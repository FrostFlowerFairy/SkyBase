// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/graphik.proto

package apipb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Timing describes timing
type Timing int32

const (
	Timing_BEFORE Timing = 0
	Timing_AFTER  Timing = 1
)

var Timing_name = map[int32]string{
	0: "BEFORE",
	1: "AFTER",
}

var Timing_value = map[string]int32{
	"BEFORE": 0,
	"AFTER":  1,
}

func (x Timing) String() string {
	return proto.EnumName(Timing_name, int32(x))
}

func (Timing) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{0}
}

// Op is a mutation that will be applied to the raft
type Op int32

const (
	Op_CREATE_NODES Op = 0
	Op_CREATE_NODE  Op = 1
	Op_PATCH_NODES  Op = 2
	Op_PATCH_NODE   Op = 3
	Op_DELETE_NODES Op = 4
	Op_DELETE_NODE  Op = 5
	Op_CREATE_EDGES Op = 6
	Op_CREATE_EDGE  Op = 7
	Op_PATCH_EDGES  Op = 8
	Op_PATCH_EDGE   Op = 9
	Op_DELETE_EDGES Op = 10
	Op_DELETE_EDGE  Op = 11
)

var Op_name = map[int32]string{
	0:  "CREATE_NODES",
	1:  "CREATE_NODE",
	2:  "PATCH_NODES",
	3:  "PATCH_NODE",
	4:  "DELETE_NODES",
	5:  "DELETE_NODE",
	6:  "CREATE_EDGES",
	7:  "CREATE_EDGE",
	8:  "PATCH_EDGES",
	9:  "PATCH_EDGE",
	10: "DELETE_EDGES",
	11: "DELETE_EDGE",
}

var Op_value = map[string]int32{
	"CREATE_NODES": 0,
	"CREATE_NODE":  1,
	"PATCH_NODES":  2,
	"PATCH_NODE":   3,
	"DELETE_NODES": 4,
	"DELETE_NODE":  5,
	"CREATE_EDGES": 6,
	"CREATE_EDGE":  7,
	"PATCH_EDGES":  8,
	"PATCH_EDGE":   9,
	"DELETE_EDGES": 10,
	"DELETE_EDGE":  11,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{1}
}

// Cascade describes how connected nodes will behave when one is deleted
type Cascade int32

const (
	// no cascade
	Cascade_CASCADE_NONE Cascade = 0
	// the source node in the connection will be deleted if the destination is deleted
	Cascade_CASCADE_FROM Cascade = 1
	// the destination node in the connection will be deleted if the source node is
	Cascade_CASCADE_TO Cascade = 2
	// if either node is deleted, both will be deleted
	Cascade_CASCADE_MUTUAL Cascade = 3
)

var Cascade_name = map[int32]string{
	0: "CASCADE_NONE",
	1: "CASCADE_FROM",
	2: "CASCADE_TO",
	3: "CASCADE_MUTUAL",
}

var Cascade_value = map[string]int32{
	"CASCADE_NONE":   0,
	"CASCADE_FROM":   1,
	"CASCADE_TO":     2,
	"CASCADE_MUTUAL": 3,
}

func (x Cascade) String() string {
	return proto.EnumName(Cascade_name, int32(x))
}

func (Cascade) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{2}
}

// Path describes a node/edge type & id
type Path struct {
	Gtype                string   `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Gid                  string   `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{0}
}

func (m *Path) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Path.Unmarshal(m, b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Path.Marshal(b, m, deterministic)
}
func (m *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(m, src)
}
func (m *Path) XXX_Size() int {
	return xxx_messageInfo_Path.Size(m)
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func (m *Path) GetGtype() string {
	if m != nil {
		return m.Gtype
	}
	return ""
}

func (m *Path) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

type Metadata struct {
	CreatedAt            int64    `protobuf:"varint,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy            string   `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy            string   `protobuf:"bytes,4,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{1}
}

func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metadata.Unmarshal(m, b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return xxx_messageInfo_Metadata.Size(m)
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Metadata) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Metadata) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Metadata) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

// Paths is an array of paths
type Paths struct {
	Paths                []*Path  `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Paths) Reset()         { *m = Paths{} }
func (m *Paths) String() string { return proto.CompactTextString(m) }
func (*Paths) ProtoMessage()    {}
func (*Paths) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{2}
}

func (m *Paths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paths.Unmarshal(m, b)
}
func (m *Paths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paths.Marshal(b, m, deterministic)
}
func (m *Paths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paths.Merge(m, src)
}
func (m *Paths) XXX_Size() int {
	return xxx_messageInfo_Paths.Size(m)
}
func (m *Paths) XXX_DiscardUnknown() {
	xxx_messageInfo_Paths.DiscardUnknown(m)
}

var xxx_messageInfo_Paths proto.InternalMessageInfo

func (m *Paths) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

// Node is a Graph primitive representing a single entity/resource. It is connected to other nodes via Edges
type Node struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Metadata             *Metadata       `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Node) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Node) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// NodeConstructor is used to create a node
type NodeConstructor struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NodeConstructor) Reset()         { *m = NodeConstructor{} }
func (m *NodeConstructor) String() string { return proto.CompactTextString(m) }
func (*NodeConstructor) ProtoMessage()    {}
func (*NodeConstructor) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{4}
}

func (m *NodeConstructor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeConstructor.Unmarshal(m, b)
}
func (m *NodeConstructor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeConstructor.Marshal(b, m, deterministic)
}
func (m *NodeConstructor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConstructor.Merge(m, src)
}
func (m *NodeConstructor) XXX_Size() int {
	return xxx_messageInfo_NodeConstructor.Size(m)
}
func (m *NodeConstructor) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConstructor.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConstructor proto.InternalMessageInfo

func (m *NodeConstructor) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *NodeConstructor) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// NodeConstructor is used to create a batch of nodes
type NodeConstructors struct {
	Nodes                []*NodeConstructor `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NodeConstructors) Reset()         { *m = NodeConstructors{} }
func (m *NodeConstructors) String() string { return proto.CompactTextString(m) }
func (*NodeConstructors) ProtoMessage()    {}
func (*NodeConstructors) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{5}
}

func (m *NodeConstructors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeConstructors.Unmarshal(m, b)
}
func (m *NodeConstructors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeConstructors.Marshal(b, m, deterministic)
}
func (m *NodeConstructors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeConstructors.Merge(m, src)
}
func (m *NodeConstructors) XXX_Size() int {
	return xxx_messageInfo_NodeConstructors.Size(m)
}
func (m *NodeConstructors) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeConstructors.DiscardUnknown(m)
}

var xxx_messageInfo_NodeConstructors proto.InternalMessageInfo

func (m *NodeConstructors) GetNodes() []*NodeConstructor {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Nodes is an array of nodes
type Nodes struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{6}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// NodeDetail is a node with its connected edges
type NodeDetail struct {
	Path                 *Path                   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct         `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	EdgesFrom            map[string]*EdgeDetails `protobuf:"bytes,3,rep,name=edges_from,json=edgesFrom,proto3" json:"edges_from,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EdgesTo              map[string]*EdgeDetails `protobuf:"bytes,4,rep,name=edges_to,json=edgesTo,proto3" json:"edges_to,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Metadata             *Metadata               `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NodeDetail) Reset()         { *m = NodeDetail{} }
func (m *NodeDetail) String() string { return proto.CompactTextString(m) }
func (*NodeDetail) ProtoMessage()    {}
func (*NodeDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{7}
}

func (m *NodeDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeDetail.Unmarshal(m, b)
}
func (m *NodeDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeDetail.Marshal(b, m, deterministic)
}
func (m *NodeDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDetail.Merge(m, src)
}
func (m *NodeDetail) XXX_Size() int {
	return xxx_messageInfo_NodeDetail.Size(m)
}
func (m *NodeDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDetail.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDetail proto.InternalMessageInfo

func (m *NodeDetail) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *NodeDetail) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *NodeDetail) GetEdgesFrom() map[string]*EdgeDetails {
	if m != nil {
		return m.EdgesFrom
	}
	return nil
}

func (m *NodeDetail) GetEdgesTo() map[string]*EdgeDetails {
	if m != nil {
		return m.EdgesTo
	}
	return nil
}

func (m *NodeDetail) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// NodeDetails is an array of NodeDetail
type NodeDetails struct {
	NodeDetails          []*NodeDetail `protobuf:"bytes,1,rep,name=node_details,json=nodeDetails,proto3" json:"node_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NodeDetails) Reset()         { *m = NodeDetails{} }
func (m *NodeDetails) String() string { return proto.CompactTextString(m) }
func (*NodeDetails) ProtoMessage()    {}
func (*NodeDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{8}
}

func (m *NodeDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeDetails.Unmarshal(m, b)
}
func (m *NodeDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeDetails.Marshal(b, m, deterministic)
}
func (m *NodeDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDetails.Merge(m, src)
}
func (m *NodeDetails) XXX_Size() int {
	return xxx_messageInfo_NodeDetails.Size(m)
}
func (m *NodeDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDetails.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDetails proto.InternalMessageInfo

func (m *NodeDetails) GetNodeDetails() []*NodeDetail {
	if m != nil {
		return m.NodeDetails
	}
	return nil
}

// NodeDetailFilter is used to fetch node details
type NodeDetailFilter struct {
	Path                 *Path    `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	EdgesFrom            *Filter  `protobuf:"bytes,2,opt,name=edges_from,json=edgesFrom,proto3" json:"edges_from,omitempty"`
	EdgesTo              *Filter  `protobuf:"bytes,3,opt,name=edges_to,json=edgesTo,proto3" json:"edges_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeDetailFilter) Reset()         { *m = NodeDetailFilter{} }
func (m *NodeDetailFilter) String() string { return proto.CompactTextString(m) }
func (*NodeDetailFilter) ProtoMessage()    {}
func (*NodeDetailFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{9}
}

func (m *NodeDetailFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeDetailFilter.Unmarshal(m, b)
}
func (m *NodeDetailFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeDetailFilter.Marshal(b, m, deterministic)
}
func (m *NodeDetailFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDetailFilter.Merge(m, src)
}
func (m *NodeDetailFilter) XXX_Size() int {
	return xxx_messageInfo_NodeDetailFilter.Size(m)
}
func (m *NodeDetailFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDetailFilter.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDetailFilter proto.InternalMessageInfo

func (m *NodeDetailFilter) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *NodeDetailFilter) GetEdgesFrom() *Filter {
	if m != nil {
		return m.EdgesFrom
	}
	return nil
}

func (m *NodeDetailFilter) GetEdgesTo() *Filter {
	if m != nil {
		return m.EdgesTo
	}
	return nil
}

// Edge is a graph primitive that represents a relationship between two nodes
type Edge struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Cascade              Cascade         `protobuf:"varint,3,opt,name=cascade,proto3,enum=api.Cascade" json:"cascade,omitempty"`
	From                 *Path           `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To                   *Path           `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Metadata             *Metadata       `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Edge) Reset()         { *m = Edge{} }
func (m *Edge) String() string { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()    {}
func (*Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{10}
}

func (m *Edge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Edge.Unmarshal(m, b)
}
func (m *Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Edge.Marshal(b, m, deterministic)
}
func (m *Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge.Merge(m, src)
}
func (m *Edge) XXX_Size() int {
	return xxx_messageInfo_Edge.Size(m)
}
func (m *Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Edge proto.InternalMessageInfo

func (m *Edge) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Edge) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Edge) GetCascade() Cascade {
	if m != nil {
		return m.Cascade
	}
	return Cascade_CASCADE_NONE
}

func (m *Edge) GetFrom() *Path {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Edge) GetTo() *Path {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Edge) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// EdgeConstructor is used to create an Edge
type EdgeConstructor struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Cascade              Cascade         `protobuf:"varint,4,opt,name=cascade,proto3,enum=api.Cascade" json:"cascade,omitempty"`
	From                 *Path           `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To                   *Path           `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EdgeConstructor) Reset()         { *m = EdgeConstructor{} }
func (m *EdgeConstructor) String() string { return proto.CompactTextString(m) }
func (*EdgeConstructor) ProtoMessage()    {}
func (*EdgeConstructor) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{11}
}

func (m *EdgeConstructor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EdgeConstructor.Unmarshal(m, b)
}
func (m *EdgeConstructor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EdgeConstructor.Marshal(b, m, deterministic)
}
func (m *EdgeConstructor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeConstructor.Merge(m, src)
}
func (m *EdgeConstructor) XXX_Size() int {
	return xxx_messageInfo_EdgeConstructor.Size(m)
}
func (m *EdgeConstructor) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeConstructor.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeConstructor proto.InternalMessageInfo

func (m *EdgeConstructor) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *EdgeConstructor) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EdgeConstructor) GetCascade() Cascade {
	if m != nil {
		return m.Cascade
	}
	return Cascade_CASCADE_NONE
}

func (m *EdgeConstructor) GetFrom() *Path {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *EdgeConstructor) GetTo() *Path {
	if m != nil {
		return m.To
	}
	return nil
}

// EdgeConstructors is an array of EdgeConstructor
type EdgeConstructors struct {
	Edges                []*EdgeConstructor `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EdgeConstructors) Reset()         { *m = EdgeConstructors{} }
func (m *EdgeConstructors) String() string { return proto.CompactTextString(m) }
func (*EdgeConstructors) ProtoMessage()    {}
func (*EdgeConstructors) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{12}
}

func (m *EdgeConstructors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EdgeConstructors.Unmarshal(m, b)
}
func (m *EdgeConstructors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EdgeConstructors.Marshal(b, m, deterministic)
}
func (m *EdgeConstructors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeConstructors.Merge(m, src)
}
func (m *EdgeConstructors) XXX_Size() int {
	return xxx_messageInfo_EdgeConstructors.Size(m)
}
func (m *EdgeConstructors) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeConstructors.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeConstructors proto.InternalMessageInfo

func (m *EdgeConstructors) GetEdges() []*EdgeConstructor {
	if m != nil {
		return m.Edges
	}
	return nil
}

// Edges is an array of Edge
type Edges struct {
	Edges                []*Edge  `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Edges) Reset()         { *m = Edges{} }
func (m *Edges) String() string { return proto.CompactTextString(m) }
func (*Edges) ProtoMessage()    {}
func (*Edges) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{13}
}

func (m *Edges) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Edges.Unmarshal(m, b)
}
func (m *Edges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Edges.Marshal(b, m, deterministic)
}
func (m *Edges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edges.Merge(m, src)
}
func (m *Edges) XXX_Size() int {
	return xxx_messageInfo_Edges.Size(m)
}
func (m *Edges) XXX_DiscardUnknown() {
	xxx_messageInfo_Edges.DiscardUnknown(m)
}

var xxx_messageInfo_Edges proto.InternalMessageInfo

func (m *Edges) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

// EdgeDetail is an edge with both of it's connected nodes fully loaded
type EdgeDetail struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Cascade              Cascade         `protobuf:"varint,3,opt,name=cascade,proto3,enum=api.Cascade" json:"cascade,omitempty"`
	From                 *Node           `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	To                   *Node           `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
	Metadata             *Metadata       `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *EdgeDetail) Reset()         { *m = EdgeDetail{} }
func (m *EdgeDetail) String() string { return proto.CompactTextString(m) }
func (*EdgeDetail) ProtoMessage()    {}
func (*EdgeDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{14}
}

func (m *EdgeDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EdgeDetail.Unmarshal(m, b)
}
func (m *EdgeDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EdgeDetail.Marshal(b, m, deterministic)
}
func (m *EdgeDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeDetail.Merge(m, src)
}
func (m *EdgeDetail) XXX_Size() int {
	return xxx_messageInfo_EdgeDetail.Size(m)
}
func (m *EdgeDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeDetail.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeDetail proto.InternalMessageInfo

func (m *EdgeDetail) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *EdgeDetail) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *EdgeDetail) GetCascade() Cascade {
	if m != nil {
		return m.Cascade
	}
	return Cascade_CASCADE_NONE
}

func (m *EdgeDetail) GetFrom() *Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *EdgeDetail) GetTo() *Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *EdgeDetail) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// EdgeDetails is an array of EdgeDetail
type EdgeDetails struct {
	Edges                []*EdgeDetail `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *EdgeDetails) Reset()         { *m = EdgeDetails{} }
func (m *EdgeDetails) String() string { return proto.CompactTextString(m) }
func (*EdgeDetails) ProtoMessage()    {}
func (*EdgeDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{15}
}

func (m *EdgeDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EdgeDetails.Unmarshal(m, b)
}
func (m *EdgeDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EdgeDetails.Marshal(b, m, deterministic)
}
func (m *EdgeDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeDetails.Merge(m, src)
}
func (m *EdgeDetails) XXX_Size() int {
	return xxx_messageInfo_EdgeDetails.Size(m)
}
func (m *EdgeDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeDetails.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeDetails proto.InternalMessageInfo

func (m *EdgeDetails) GetEdges() []*EdgeDetail {
	if m != nil {
		return m.Edges
	}
	return nil
}

// EdgeFilter is used to fetch edges
type EdgeFilter struct {
	NodePath             *Path    `protobuf:"bytes,1,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
	Gtype                string   `protobuf:"bytes,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Expressions          []string `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EdgeFilter) Reset()         { *m = EdgeFilter{} }
func (m *EdgeFilter) String() string { return proto.CompactTextString(m) }
func (*EdgeFilter) ProtoMessage()    {}
func (*EdgeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{16}
}

func (m *EdgeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EdgeFilter.Unmarshal(m, b)
}
func (m *EdgeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EdgeFilter.Marshal(b, m, deterministic)
}
func (m *EdgeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeFilter.Merge(m, src)
}
func (m *EdgeFilter) XXX_Size() int {
	return xxx_messageInfo_EdgeFilter.Size(m)
}
func (m *EdgeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeFilter proto.InternalMessageInfo

func (m *EdgeFilter) GetNodePath() *Path {
	if m != nil {
		return m.NodePath
	}
	return nil
}

func (m *EdgeFilter) GetGtype() string {
	if m != nil {
		return m.Gtype
	}
	return ""
}

func (m *EdgeFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *EdgeFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Filter is a generic filter using Common Expression Language
type Filter struct {
	Gtype                string   `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Expressions          []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{17}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetGtype() string {
	if m != nil {
		return m.Gtype
	}
	return ""
}

func (m *Filter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *Filter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// MeFilter is used to fetch a NodeDetail representing the user in the inbound JWT token
type MeFilter struct {
	EdgesFrom            *Filter  `protobuf:"bytes,1,opt,name=edges_from,json=edgesFrom,proto3" json:"edges_from,omitempty"`
	EdgesTo              *Filter  `protobuf:"bytes,2,opt,name=edges_to,json=edgesTo,proto3" json:"edges_to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeFilter) Reset()         { *m = MeFilter{} }
func (m *MeFilter) String() string { return proto.CompactTextString(m) }
func (*MeFilter) ProtoMessage()    {}
func (*MeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{18}
}

func (m *MeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeFilter.Unmarshal(m, b)
}
func (m *MeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeFilter.Marshal(b, m, deterministic)
}
func (m *MeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeFilter.Merge(m, src)
}
func (m *MeFilter) XXX_Size() int {
	return xxx_messageInfo_MeFilter.Size(m)
}
func (m *MeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_MeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_MeFilter proto.InternalMessageInfo

func (m *MeFilter) GetEdgesFrom() *Filter {
	if m != nil {
		return m.EdgesFrom
	}
	return nil
}

func (m *MeFilter) GetEdgesTo() *Filter {
	if m != nil {
		return m.EdgesTo
	}
	return nil
}

// ChannelFilter is used to filter messages in a pubsub channel
type ChannelFilter struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Expressions          []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelFilter) Reset()         { *m = ChannelFilter{} }
func (m *ChannelFilter) String() string { return proto.CompactTextString(m) }
func (*ChannelFilter) ProtoMessage()    {}
func (*ChannelFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{19}
}

func (m *ChannelFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelFilter.Unmarshal(m, b)
}
func (m *ChannelFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelFilter.Marshal(b, m, deterministic)
}
func (m *ChannelFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelFilter.Merge(m, src)
}
func (m *ChannelFilter) XXX_Size() int {
	return xxx_messageInfo_ChannelFilter.Size(m)
}
func (m *ChannelFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelFilter proto.InternalMessageInfo

func (m *ChannelFilter) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ChannelFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

// SubGraphFilter is used to filter nodes/edges in the graph
type SubGraphFilter struct {
	Nodes                *Filter  `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Edges                *Filter  `protobuf:"bytes,2,opt,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubGraphFilter) Reset()         { *m = SubGraphFilter{} }
func (m *SubGraphFilter) String() string { return proto.CompactTextString(m) }
func (*SubGraphFilter) ProtoMessage()    {}
func (*SubGraphFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{20}
}

func (m *SubGraphFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubGraphFilter.Unmarshal(m, b)
}
func (m *SubGraphFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubGraphFilter.Marshal(b, m, deterministic)
}
func (m *SubGraphFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubGraphFilter.Merge(m, src)
}
func (m *SubGraphFilter) XXX_Size() int {
	return xxx_messageInfo_SubGraphFilter.Size(m)
}
func (m *SubGraphFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_SubGraphFilter.DiscardUnknown(m)
}

var xxx_messageInfo_SubGraphFilter proto.InternalMessageInfo

func (m *SubGraphFilter) GetNodes() *Filter {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *SubGraphFilter) GetEdges() *Filter {
	if m != nil {
		return m.Edges
	}
	return nil
}

// StateChange represents any mutation in the Graph
type StateChange struct {
	Op                   Op        `protobuf:"varint,3,opt,name=op,proto3,enum=api.Op" json:"op,omitempty"`
	Mutation             *Mutation `protobuf:"bytes,4,opt,name=mutation,proto3" json:"mutation,omitempty"`
	Timestamp            int64     `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StateChange) Reset()         { *m = StateChange{} }
func (m *StateChange) String() string { return proto.CompactTextString(m) }
func (*StateChange) ProtoMessage()    {}
func (*StateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{21}
}

func (m *StateChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateChange.Unmarshal(m, b)
}
func (m *StateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateChange.Marshal(b, m, deterministic)
}
func (m *StateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChange.Merge(m, src)
}
func (m *StateChange) XXX_Size() int {
	return xxx_messageInfo_StateChange.Size(m)
}
func (m *StateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChange.DiscardUnknown(m)
}

var xxx_messageInfo_StateChange proto.InternalMessageInfo

func (m *StateChange) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_CREATE_NODES
}

func (m *StateChange) GetMutation() *Mutation {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (m *StateChange) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Mutation is oneOf many state change mutations
type Mutation struct {
	// Types that are valid to be assigned to Object:
	//	*Mutation_Node
	//	*Mutation_Nodes
	//	*Mutation_NodeConstructor
	//	*Mutation_NodeConstructors
	//	*Mutation_EdgeConstructor
	//	*Mutation_EdgeConstructors
	//	*Mutation_Edge
	//	*Mutation_Edges
	//	*Mutation_Path
	//	*Mutation_Paths
	//	*Mutation_Patch
	//	*Mutation_Patches
	//	*Mutation_Empty
	Object               isMutation_Object `protobuf_oneof:"object"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Mutation) Reset()         { *m = Mutation{} }
func (m *Mutation) String() string { return proto.CompactTextString(m) }
func (*Mutation) ProtoMessage()    {}
func (*Mutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{22}
}

func (m *Mutation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mutation.Unmarshal(m, b)
}
func (m *Mutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mutation.Marshal(b, m, deterministic)
}
func (m *Mutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mutation.Merge(m, src)
}
func (m *Mutation) XXX_Size() int {
	return xxx_messageInfo_Mutation.Size(m)
}
func (m *Mutation) XXX_DiscardUnknown() {
	xxx_messageInfo_Mutation.DiscardUnknown(m)
}

var xxx_messageInfo_Mutation proto.InternalMessageInfo

type isMutation_Object interface {
	isMutation_Object()
}

type Mutation_Node struct {
	Node *Node `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type Mutation_Nodes struct {
	Nodes *Nodes `protobuf:"bytes,2,opt,name=nodes,proto3,oneof"`
}

type Mutation_NodeConstructor struct {
	NodeConstructor *NodeConstructor `protobuf:"bytes,3,opt,name=node_constructor,json=nodeConstructor,proto3,oneof"`
}

type Mutation_NodeConstructors struct {
	NodeConstructors *NodeConstructors `protobuf:"bytes,4,opt,name=node_constructors,json=nodeConstructors,proto3,oneof"`
}

type Mutation_EdgeConstructor struct {
	EdgeConstructor *EdgeConstructor `protobuf:"bytes,5,opt,name=edge_constructor,json=edgeConstructor,proto3,oneof"`
}

type Mutation_EdgeConstructors struct {
	EdgeConstructors *EdgeConstructors `protobuf:"bytes,6,opt,name=edge_constructors,json=edgeConstructors,proto3,oneof"`
}

type Mutation_Edge struct {
	Edge *Edge `protobuf:"bytes,7,opt,name=edge,proto3,oneof"`
}

type Mutation_Edges struct {
	Edges *Edges `protobuf:"bytes,8,opt,name=edges,proto3,oneof"`
}

type Mutation_Path struct {
	Path *Path `protobuf:"bytes,9,opt,name=path,proto3,oneof"`
}

type Mutation_Paths struct {
	Paths *Paths `protobuf:"bytes,10,opt,name=paths,proto3,oneof"`
}

type Mutation_Patch struct {
	Patch *Patch `protobuf:"bytes,13,opt,name=patch,proto3,oneof"`
}

type Mutation_Patches struct {
	Patches *Patches `protobuf:"bytes,14,opt,name=patches,proto3,oneof"`
}

type Mutation_Empty struct {
	Empty *empty.Empty `protobuf:"bytes,15,opt,name=empty,proto3,oneof"`
}

func (*Mutation_Node) isMutation_Object() {}

func (*Mutation_Nodes) isMutation_Object() {}

func (*Mutation_NodeConstructor) isMutation_Object() {}

func (*Mutation_NodeConstructors) isMutation_Object() {}

func (*Mutation_EdgeConstructor) isMutation_Object() {}

func (*Mutation_EdgeConstructors) isMutation_Object() {}

func (*Mutation_Edge) isMutation_Object() {}

func (*Mutation_Edges) isMutation_Object() {}

func (*Mutation_Path) isMutation_Object() {}

func (*Mutation_Paths) isMutation_Object() {}

func (*Mutation_Patch) isMutation_Object() {}

func (*Mutation_Patches) isMutation_Object() {}

func (*Mutation_Empty) isMutation_Object() {}

func (m *Mutation) GetObject() isMutation_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Mutation) GetNode() *Node {
	if x, ok := m.GetObject().(*Mutation_Node); ok {
		return x.Node
	}
	return nil
}

func (m *Mutation) GetNodes() *Nodes {
	if x, ok := m.GetObject().(*Mutation_Nodes); ok {
		return x.Nodes
	}
	return nil
}

func (m *Mutation) GetNodeConstructor() *NodeConstructor {
	if x, ok := m.GetObject().(*Mutation_NodeConstructor); ok {
		return x.NodeConstructor
	}
	return nil
}

func (m *Mutation) GetNodeConstructors() *NodeConstructors {
	if x, ok := m.GetObject().(*Mutation_NodeConstructors); ok {
		return x.NodeConstructors
	}
	return nil
}

func (m *Mutation) GetEdgeConstructor() *EdgeConstructor {
	if x, ok := m.GetObject().(*Mutation_EdgeConstructor); ok {
		return x.EdgeConstructor
	}
	return nil
}

func (m *Mutation) GetEdgeConstructors() *EdgeConstructors {
	if x, ok := m.GetObject().(*Mutation_EdgeConstructors); ok {
		return x.EdgeConstructors
	}
	return nil
}

func (m *Mutation) GetEdge() *Edge {
	if x, ok := m.GetObject().(*Mutation_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *Mutation) GetEdges() *Edges {
	if x, ok := m.GetObject().(*Mutation_Edges); ok {
		return x.Edges
	}
	return nil
}

func (m *Mutation) GetPath() *Path {
	if x, ok := m.GetObject().(*Mutation_Path); ok {
		return x.Path
	}
	return nil
}

func (m *Mutation) GetPaths() *Paths {
	if x, ok := m.GetObject().(*Mutation_Paths); ok {
		return x.Paths
	}
	return nil
}

func (m *Mutation) GetPatch() *Patch {
	if x, ok := m.GetObject().(*Mutation_Patch); ok {
		return x.Patch
	}
	return nil
}

func (m *Mutation) GetPatches() *Patches {
	if x, ok := m.GetObject().(*Mutation_Patches); ok {
		return x.Patches
	}
	return nil
}

func (m *Mutation) GetEmpty() *empty.Empty {
	if x, ok := m.GetObject().(*Mutation_Empty); ok {
		return x.Empty
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Mutation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Mutation_Node)(nil),
		(*Mutation_Nodes)(nil),
		(*Mutation_NodeConstructor)(nil),
		(*Mutation_NodeConstructors)(nil),
		(*Mutation_EdgeConstructor)(nil),
		(*Mutation_EdgeConstructors)(nil),
		(*Mutation_Edge)(nil),
		(*Mutation_Edges)(nil),
		(*Mutation_Path)(nil),
		(*Mutation_Paths)(nil),
		(*Mutation_Patch)(nil),
		(*Mutation_Patches)(nil),
		(*Mutation_Empty)(nil),
	}
}

// Graph is an array of nodes and edges
type Graph struct {
	Nodes                *Nodes   `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Edges                *Edges   `protobuf:"bytes,2,opt,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Graph) Reset()         { *m = Graph{} }
func (m *Graph) String() string { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()    {}
func (*Graph) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{23}
}

func (m *Graph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Graph.Unmarshal(m, b)
}
func (m *Graph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Graph.Marshal(b, m, deterministic)
}
func (m *Graph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Graph.Merge(m, src)
}
func (m *Graph) XXX_Size() int {
	return xxx_messageInfo_Graph.Size(m)
}
func (m *Graph) XXX_DiscardUnknown() {
	xxx_messageInfo_Graph.DiscardUnknown(m)
}

var xxx_messageInfo_Graph proto.InternalMessageInfo

func (m *Graph) GetNodes() *Nodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Graph) GetEdges() *Edges {
	if m != nil {
		return m.Edges
	}
	return nil
}

// Patch patches the attributes of a Node or Edge
type Patch struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Patch) Reset()         { *m = Patch{} }
func (m *Patch) String() string { return proto.CompactTextString(m) }
func (*Patch) ProtoMessage()    {}
func (*Patch) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{24}
}

func (m *Patch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Patch.Unmarshal(m, b)
}
func (m *Patch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Patch.Marshal(b, m, deterministic)
}
func (m *Patch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patch.Merge(m, src)
}
func (m *Patch) XXX_Size() int {
	return xxx_messageInfo_Patch.Size(m)
}
func (m *Patch) XXX_DiscardUnknown() {
	xxx_messageInfo_Patch.DiscardUnknown(m)
}

var xxx_messageInfo_Patch proto.InternalMessageInfo

func (m *Patch) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Patch) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// Patches is an array of Patch
type Patches struct {
	Patches              []*Patch `protobuf:"bytes,1,rep,name=patches,proto3" json:"patches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Patches) Reset()         { *m = Patches{} }
func (m *Patches) String() string { return proto.CompactTextString(m) }
func (*Patches) ProtoMessage()    {}
func (*Patches) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{25}
}

func (m *Patches) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Patches.Unmarshal(m, b)
}
func (m *Patches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Patches.Marshal(b, m, deterministic)
}
func (m *Patches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patches.Merge(m, src)
}
func (m *Patches) XXX_Size() int {
	return xxx_messageInfo_Patches.Size(m)
}
func (m *Patches) XXX_DiscardUnknown() {
	xxx_messageInfo_Patches.DiscardUnknown(m)
}

var xxx_messageInfo_Patches proto.InternalMessageInfo

func (m *Patches) GetPatches() []*Patch {
	if m != nil {
		return m.Patches
	}
	return nil
}

// Pong returns PONG if the server is healthy
type Pong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{26}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// RaftNode is the identifier of a distinct raft node in the cluster
type RaftNode struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftNode) Reset()         { *m = RaftNode{} }
func (m *RaftNode) String() string { return proto.CompactTextString(m) }
func (*RaftNode) ProtoMessage()    {}
func (*RaftNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{27}
}

func (m *RaftNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftNode.Unmarshal(m, b)
}
func (m *RaftNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftNode.Marshal(b, m, deterministic)
}
func (m *RaftNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftNode.Merge(m, src)
}
func (m *RaftNode) XXX_Size() int {
	return xxx_messageInfo_RaftNode.Size(m)
}
func (m *RaftNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftNode.DiscardUnknown(m)
}

var xxx_messageInfo_RaftNode proto.InternalMessageInfo

func (m *RaftNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RaftNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// RaftLog is a raft log
type RaftLog struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term                 uint64   `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	Type                 uint32   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Data                 []byte   `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	Extensions           []byte   `protobuf:"bytes,10,opt,name=extensions,proto3" json:"extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftLog) Reset()         { *m = RaftLog{} }
func (m *RaftLog) String() string { return proto.CompactTextString(m) }
func (*RaftLog) ProtoMessage()    {}
func (*RaftLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{28}
}

func (m *RaftLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftLog.Unmarshal(m, b)
}
func (m *RaftLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftLog.Marshal(b, m, deterministic)
}
func (m *RaftLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLog.Merge(m, src)
}
func (m *RaftLog) XXX_Size() int {
	return xxx_messageInfo_RaftLog.Size(m)
}
func (m *RaftLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLog.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLog proto.InternalMessageInfo

func (m *RaftLog) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftLog) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RaftLog) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *RaftLog) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RaftLog) GetExtensions() []byte {
	if m != nil {
		return m.Extensions
	}
	return nil
}

// OutboundMessage is a message to be published to a pubsub channel
type OutboundMessage struct {
	Channel              string          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OutboundMessage) Reset()         { *m = OutboundMessage{} }
func (m *OutboundMessage) String() string { return proto.CompactTextString(m) }
func (*OutboundMessage) ProtoMessage()    {}
func (*OutboundMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{29}
}

func (m *OutboundMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutboundMessage.Unmarshal(m, b)
}
func (m *OutboundMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutboundMessage.Marshal(b, m, deterministic)
}
func (m *OutboundMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundMessage.Merge(m, src)
}
func (m *OutboundMessage) XXX_Size() int {
	return xxx_messageInfo_OutboundMessage.Size(m)
}
func (m *OutboundMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundMessage proto.InternalMessageInfo

func (m *OutboundMessage) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *OutboundMessage) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

// Message is received on PubSub subscriptions
type Message struct {
	Channel              string          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Sender               *Path           `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Timestamp            int64           `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{30}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Message) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetSender() *Path {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Trigger is sent to registered external triggers before & after all graph state changes
type Trigger struct {
	Method               string       `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	User                 *Node        `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Timing               Timing       `protobuf:"varint,3,opt,name=timing,proto3,enum=api.Timing" json:"timing,omitempty"`
	State                *StateChange `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{31}
}

func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trigger.Unmarshal(m, b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return xxx_messageInfo_Trigger.Size(m)
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

func (m *Trigger) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Trigger) GetUser() *Node {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Trigger) GetTiming() Timing {
	if m != nil {
		return m.Timing
	}
	return Timing_BEFORE
}

func (m *Trigger) GetState() *StateChange {
	if m != nil {
		return m.State
	}
	return nil
}

// RequestIntercept is sent to registered external authorizers within a request middleware/interceptor
type RequestIntercept struct {
	Method    string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	User      *Node  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*RequestIntercept_Empty
	//	*RequestIntercept_SubgraphFilter
	//	*RequestIntercept_Graph
	//	*RequestIntercept_ChannelFilter
	//	*RequestIntercept_OutboundMessage
	//	*RequestIntercept_EdgeFilter
	//	*RequestIntercept_Paths
	//	*RequestIntercept_Path
	//	*RequestIntercept_Patches
	//	*RequestIntercept_Patch
	//	*RequestIntercept_Filter
	//	*RequestIntercept_NodeConstructors
	//	*RequestIntercept_NodeConstructor
	//	*RequestIntercept_MeFilter
	//	*RequestIntercept_RaftNode
	Request              isRequestIntercept_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RequestIntercept) Reset()         { *m = RequestIntercept{} }
func (m *RequestIntercept) String() string { return proto.CompactTextString(m) }
func (*RequestIntercept) ProtoMessage()    {}
func (*RequestIntercept) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{32}
}

func (m *RequestIntercept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestIntercept.Unmarshal(m, b)
}
func (m *RequestIntercept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestIntercept.Marshal(b, m, deterministic)
}
func (m *RequestIntercept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestIntercept.Merge(m, src)
}
func (m *RequestIntercept) XXX_Size() int {
	return xxx_messageInfo_RequestIntercept.Size(m)
}
func (m *RequestIntercept) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestIntercept.DiscardUnknown(m)
}

var xxx_messageInfo_RequestIntercept proto.InternalMessageInfo

func (m *RequestIntercept) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *RequestIntercept) GetUser() *Node {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestIntercept) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type isRequestIntercept_Request interface {
	isRequestIntercept_Request()
}

type RequestIntercept_Empty struct {
	Empty *empty.Empty `protobuf:"bytes,4,opt,name=empty,proto3,oneof"`
}

type RequestIntercept_SubgraphFilter struct {
	SubgraphFilter *SubGraphFilter `protobuf:"bytes,5,opt,name=subgraph_filter,json=subgraphFilter,proto3,oneof"`
}

type RequestIntercept_Graph struct {
	Graph *Graph `protobuf:"bytes,6,opt,name=graph,proto3,oneof"`
}

type RequestIntercept_ChannelFilter struct {
	ChannelFilter *ChannelFilter `protobuf:"bytes,7,opt,name=channel_filter,json=channelFilter,proto3,oneof"`
}

type RequestIntercept_OutboundMessage struct {
	OutboundMessage *OutboundMessage `protobuf:"bytes,8,opt,name=outbound_message,json=outboundMessage,proto3,oneof"`
}

type RequestIntercept_EdgeFilter struct {
	EdgeFilter *EdgeFilter `protobuf:"bytes,10,opt,name=edge_filter,json=edgeFilter,proto3,oneof"`
}

type RequestIntercept_Paths struct {
	Paths *Paths `protobuf:"bytes,11,opt,name=paths,proto3,oneof"`
}

type RequestIntercept_Path struct {
	Path *Path `protobuf:"bytes,12,opt,name=path,proto3,oneof"`
}

type RequestIntercept_Patches struct {
	Patches *Patches `protobuf:"bytes,13,opt,name=patches,proto3,oneof"`
}

type RequestIntercept_Patch struct {
	Patch *Patch `protobuf:"bytes,14,opt,name=patch,proto3,oneof"`
}

type RequestIntercept_Filter struct {
	Filter *Filter `protobuf:"bytes,15,opt,name=filter,proto3,oneof"`
}

type RequestIntercept_NodeConstructors struct {
	NodeConstructors *NodeConstructors `protobuf:"bytes,16,opt,name=node_constructors,json=nodeConstructors,proto3,oneof"`
}

type RequestIntercept_NodeConstructor struct {
	NodeConstructor *NodeConstructor `protobuf:"bytes,17,opt,name=node_constructor,json=nodeConstructor,proto3,oneof"`
}

type RequestIntercept_MeFilter struct {
	MeFilter *MeFilter `protobuf:"bytes,18,opt,name=me_filter,json=meFilter,proto3,oneof"`
}

type RequestIntercept_RaftNode struct {
	RaftNode *RaftNode `protobuf:"bytes,19,opt,name=raft_node,json=raftNode,proto3,oneof"`
}

func (*RequestIntercept_Empty) isRequestIntercept_Request() {}

func (*RequestIntercept_SubgraphFilter) isRequestIntercept_Request() {}

func (*RequestIntercept_Graph) isRequestIntercept_Request() {}

func (*RequestIntercept_ChannelFilter) isRequestIntercept_Request() {}

func (*RequestIntercept_OutboundMessage) isRequestIntercept_Request() {}

func (*RequestIntercept_EdgeFilter) isRequestIntercept_Request() {}

func (*RequestIntercept_Paths) isRequestIntercept_Request() {}

func (*RequestIntercept_Path) isRequestIntercept_Request() {}

func (*RequestIntercept_Patches) isRequestIntercept_Request() {}

func (*RequestIntercept_Patch) isRequestIntercept_Request() {}

func (*RequestIntercept_Filter) isRequestIntercept_Request() {}

func (*RequestIntercept_NodeConstructors) isRequestIntercept_Request() {}

func (*RequestIntercept_NodeConstructor) isRequestIntercept_Request() {}

func (*RequestIntercept_MeFilter) isRequestIntercept_Request() {}

func (*RequestIntercept_RaftNode) isRequestIntercept_Request() {}

func (m *RequestIntercept) GetRequest() isRequestIntercept_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RequestIntercept) GetEmpty() *empty.Empty {
	if x, ok := m.GetRequest().(*RequestIntercept_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *RequestIntercept) GetSubgraphFilter() *SubGraphFilter {
	if x, ok := m.GetRequest().(*RequestIntercept_SubgraphFilter); ok {
		return x.SubgraphFilter
	}
	return nil
}

func (m *RequestIntercept) GetGraph() *Graph {
	if x, ok := m.GetRequest().(*RequestIntercept_Graph); ok {
		return x.Graph
	}
	return nil
}

func (m *RequestIntercept) GetChannelFilter() *ChannelFilter {
	if x, ok := m.GetRequest().(*RequestIntercept_ChannelFilter); ok {
		return x.ChannelFilter
	}
	return nil
}

func (m *RequestIntercept) GetOutboundMessage() *OutboundMessage {
	if x, ok := m.GetRequest().(*RequestIntercept_OutboundMessage); ok {
		return x.OutboundMessage
	}
	return nil
}

func (m *RequestIntercept) GetEdgeFilter() *EdgeFilter {
	if x, ok := m.GetRequest().(*RequestIntercept_EdgeFilter); ok {
		return x.EdgeFilter
	}
	return nil
}

func (m *RequestIntercept) GetPaths() *Paths {
	if x, ok := m.GetRequest().(*RequestIntercept_Paths); ok {
		return x.Paths
	}
	return nil
}

func (m *RequestIntercept) GetPath() *Path {
	if x, ok := m.GetRequest().(*RequestIntercept_Path); ok {
		return x.Path
	}
	return nil
}

func (m *RequestIntercept) GetPatches() *Patches {
	if x, ok := m.GetRequest().(*RequestIntercept_Patches); ok {
		return x.Patches
	}
	return nil
}

func (m *RequestIntercept) GetPatch() *Patch {
	if x, ok := m.GetRequest().(*RequestIntercept_Patch); ok {
		return x.Patch
	}
	return nil
}

func (m *RequestIntercept) GetFilter() *Filter {
	if x, ok := m.GetRequest().(*RequestIntercept_Filter); ok {
		return x.Filter
	}
	return nil
}

func (m *RequestIntercept) GetNodeConstructors() *NodeConstructors {
	if x, ok := m.GetRequest().(*RequestIntercept_NodeConstructors); ok {
		return x.NodeConstructors
	}
	return nil
}

func (m *RequestIntercept) GetNodeConstructor() *NodeConstructor {
	if x, ok := m.GetRequest().(*RequestIntercept_NodeConstructor); ok {
		return x.NodeConstructor
	}
	return nil
}

func (m *RequestIntercept) GetMeFilter() *MeFilter {
	if x, ok := m.GetRequest().(*RequestIntercept_MeFilter); ok {
		return x.MeFilter
	}
	return nil
}

func (m *RequestIntercept) GetRaftNode() *RaftNode {
	if x, ok := m.GetRequest().(*RequestIntercept_RaftNode); ok {
		return x.RaftNode
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RequestIntercept) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RequestIntercept_Empty)(nil),
		(*RequestIntercept_SubgraphFilter)(nil),
		(*RequestIntercept_Graph)(nil),
		(*RequestIntercept_ChannelFilter)(nil),
		(*RequestIntercept_OutboundMessage)(nil),
		(*RequestIntercept_EdgeFilter)(nil),
		(*RequestIntercept_Paths)(nil),
		(*RequestIntercept_Path)(nil),
		(*RequestIntercept_Patches)(nil),
		(*RequestIntercept_Patch)(nil),
		(*RequestIntercept_Filter)(nil),
		(*RequestIntercept_NodeConstructors)(nil),
		(*RequestIntercept_NodeConstructor)(nil),
		(*RequestIntercept_MeFilter)(nil),
		(*RequestIntercept_RaftNode)(nil),
	}
}

// Decision is returned by registered external authorizers
type Decision struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Decision) Reset()         { *m = Decision{} }
func (m *Decision) String() string { return proto.CompactTextString(m) }
func (*Decision) ProtoMessage()    {}
func (*Decision) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{33}
}

func (m *Decision) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Decision.Unmarshal(m, b)
}
func (m *Decision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Decision.Marshal(b, m, deterministic)
}
func (m *Decision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Decision.Merge(m, src)
}
func (m *Decision) XXX_Size() int {
	return xxx_messageInfo_Decision.Size(m)
}
func (m *Decision) XXX_DiscardUnknown() {
	xxx_messageInfo_Decision.DiscardUnknown(m)
}

var xxx_messageInfo_Decision proto.InternalMessageInfo

func (m *Decision) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

// Schema returns registered edge & node types
type Schema struct {
	EdgeTypes            []string `protobuf:"bytes,1,rep,name=edge_types,json=edgeTypes,proto3" json:"edge_types,omitempty"`
	NodeTypes            []string `protobuf:"bytes,2,rep,name=node_types,json=nodeTypes,proto3" json:"node_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{34}
}

func (m *Schema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schema.Unmarshal(m, b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return xxx_messageInfo_Schema.Size(m)
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetEdgeTypes() []string {
	if m != nil {
		return m.EdgeTypes
	}
	return nil
}

func (m *Schema) GetNodeTypes() []string {
	if m != nil {
		return m.NodeTypes
	}
	return nil
}

func init() {
	proto.RegisterEnum("api.Timing", Timing_name, Timing_value)
	proto.RegisterEnum("api.Op", Op_name, Op_value)
	proto.RegisterEnum("api.Cascade", Cascade_name, Cascade_value)
	proto.RegisterType((*Path)(nil), "api.Path")
	proto.RegisterType((*Metadata)(nil), "api.Metadata")
	proto.RegisterType((*Paths)(nil), "api.Paths")
	proto.RegisterType((*Node)(nil), "api.Node")
	proto.RegisterType((*NodeConstructor)(nil), "api.NodeConstructor")
	proto.RegisterType((*NodeConstructors)(nil), "api.NodeConstructors")
	proto.RegisterType((*Nodes)(nil), "api.Nodes")
	proto.RegisterType((*NodeDetail)(nil), "api.NodeDetail")
	proto.RegisterMapType((map[string]*EdgeDetails)(nil), "api.NodeDetail.EdgesFromEntry")
	proto.RegisterMapType((map[string]*EdgeDetails)(nil), "api.NodeDetail.EdgesToEntry")
	proto.RegisterType((*NodeDetails)(nil), "api.NodeDetails")
	proto.RegisterType((*NodeDetailFilter)(nil), "api.NodeDetailFilter")
	proto.RegisterType((*Edge)(nil), "api.Edge")
	proto.RegisterType((*EdgeConstructor)(nil), "api.EdgeConstructor")
	proto.RegisterType((*EdgeConstructors)(nil), "api.EdgeConstructors")
	proto.RegisterType((*Edges)(nil), "api.Edges")
	proto.RegisterType((*EdgeDetail)(nil), "api.EdgeDetail")
	proto.RegisterType((*EdgeDetails)(nil), "api.EdgeDetails")
	proto.RegisterType((*EdgeFilter)(nil), "api.EdgeFilter")
	proto.RegisterType((*Filter)(nil), "api.Filter")
	proto.RegisterType((*MeFilter)(nil), "api.MeFilter")
	proto.RegisterType((*ChannelFilter)(nil), "api.ChannelFilter")
	proto.RegisterType((*SubGraphFilter)(nil), "api.SubGraphFilter")
	proto.RegisterType((*StateChange)(nil), "api.StateChange")
	proto.RegisterType((*Mutation)(nil), "api.Mutation")
	proto.RegisterType((*Graph)(nil), "api.Graph")
	proto.RegisterType((*Patch)(nil), "api.Patch")
	proto.RegisterType((*Patches)(nil), "api.Patches")
	proto.RegisterType((*Pong)(nil), "api.Pong")
	proto.RegisterType((*RaftNode)(nil), "api.RaftNode")
	proto.RegisterType((*RaftLog)(nil), "api.RaftLog")
	proto.RegisterType((*OutboundMessage)(nil), "api.OutboundMessage")
	proto.RegisterType((*Message)(nil), "api.Message")
	proto.RegisterType((*Trigger)(nil), "api.Trigger")
	proto.RegisterType((*RequestIntercept)(nil), "api.RequestIntercept")
	proto.RegisterType((*Decision)(nil), "api.Decision")
	proto.RegisterType((*Schema)(nil), "api.Schema")
}

func init() { proto.RegisterFile("api/graphik.proto", fileDescriptor_063490d3009de3e6) }

var fileDescriptor_063490d3009de3e6 = []byte{
	// 2268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x5f, 0x73, 0xdb, 0xc6,
	0x11, 0xe7, 0x7f, 0x10, 0x4b, 0x89, 0x84, 0x2f, 0x49, 0xc3, 0xb0, 0x4e, 0x24, 0x23, 0xb6, 0x47,
	0x56, 0x6d, 0x2a, 0xa6, 0xdb, 0xa6, 0x7f, 0x33, 0xa5, 0x24, 0xca, 0x72, 0x6b, 0x5b, 0x2e, 0xa8,
	0xbc, 0x74, 0xa6, 0xd1, 0x80, 0xe4, 0x89, 0x44, 0x43, 0x02, 0x08, 0x70, 0x74, 0xad, 0x66, 0xfa,
	0xd8, 0xce, 0xf4, 0x3b, 0x74, 0xa6, 0x2f, 0xed, 0x53, 0xbf, 0x4d, 0xbf, 0x40, 0x66, 0xd2, 0xc7,
	0x3c, 0x75, 0xfa, 0x05, 0x3a, 0xb7, 0x77, 0x07, 0x1e, 0x20, 0x92, 0x96, 0xdd, 0x26, 0xd3, 0x37,
	0x60, 0x77, 0x6f, 0xff, 0xdd, 0xee, 0x6f, 0x17, 0x80, 0x6b, 0x6e, 0xe8, 0xed, 0x8d, 0x23, 0x37,
	0x9c, 0x78, 0x9f, 0xb6, 0xc3, 0x28, 0x60, 0x01, 0x29, 0xba, 0xa1, 0xd7, 0xba, 0x3e, 0x0e, 0x82,
	0xf1, 0x94, 0xee, 0x21, 0x69, 0x30, 0x3f, 0xdf, 0x8b, 0x59, 0x34, 0x1f, 0x32, 0x21, 0xd2, 0xda,
	0xca, 0x72, 0x99, 0x37, 0xa3, 0x31, 0x73, 0x67, 0xa1, 0x14, 0x78, 0x27, 0x2b, 0xe0, 0xfa, 0x17,
	0x92, 0xf5, 0xed, 0x2c, 0x8b, 0xce, 0x42, 0xa6, 0x98, 0xef, 0x8f, 0x83, 0x7b, 0xf8, 0x74, 0xef,
	0xb9, 0x3b, 0xf5, 0x46, 0x2e, 0x0b, 0xa2, 0x78, 0x2f, 0x79, 0x14, 0x42, 0xf6, 0xcf, 0xa0, 0xf4,
	0xcc, 0x65, 0x13, 0x72, 0x1b, 0xca, 0x63, 0x76, 0x11, 0xd2, 0x66, 0x7e, 0x3b, 0xbf, 0x63, 0xee,
	0x5b, 0x5f, 0x7e, 0xb1, 0xb5, 0x01, 0xf0, 0x49, 0xfb, 0xf3, 0xfb, 0x77, 0x3b, 0x9d, 0xef, 0xfd,
	0xfe, 0xa6, 0x23, 0xd8, 0xc4, 0x82, 0xe2, 0xd8, 0x1b, 0x35, 0x0b, 0x5c, 0xca, 0xe1, 0x8f, 0xf6,
	0x1f, 0xf3, 0x50, 0x7d, 0x42, 0x99, 0x3b, 0x72, 0x99, 0x4b, 0xde, 0x05, 0x18, 0x46, 0xd4, 0x65,
	0x74, 0x74, 0xe6, 0x32, 0xd4, 0x55, 0x74, 0x4c, 0x49, 0xe9, 0x32, 0xce, 0x9e, 0x87, 0x23, 0xc5,
	0x2e, 0x08, 0xb6, 0xa4, 0x08, 0xb6, 0x3a, 0x3d, 0xb8, 0x68, 0x16, 0xd1, 0x86, 0x3a, 0xbd, 0x7f,
	0xa1, 0x9f, 0x1e, 0x5c, 0x34, 0x4b, 0x82, 0x2d, 0x29, 0xfb, 0x17, 0xf6, 0x0e, 0x94, 0x79, 0x28,
	0x31, 0xd9, 0x82, 0x72, 0xc8, 0x1f, 0x9a, 0xf9, 0xed, 0xe2, 0x4e, 0xad, 0x63, 0xb6, 0xdd, 0xd0,
	0x6b, 0x73, 0x96, 0x23, 0xe8, 0xf6, 0x9f, 0xf2, 0x50, 0x7a, 0x1a, 0x8c, 0x28, 0x79, 0x17, 0x4a,
	0x9c, 0x82, 0x8e, 0xa6, 0x04, 0x91, 0x4c, 0x3e, 0x04, 0x70, 0x19, 0x8b, 0xbc, 0xc1, 0x9c, 0xd1,
	0x18, 0xdd, 0xad, 0x75, 0xde, 0x6e, 0x8b, 0x9c, 0xb7, 0x55, 0xce, 0xdb, 0x7d, 0xbc, 0x4d, 0x47,
	0x13, 0x25, 0x77, 0xa0, 0x3a, 0x93, 0x29, 0xc1, 0x30, 0x6a, 0x9d, 0x4d, 0xd4, 0xad, 0xf2, 0xe4,
	0x24, 0x6c, 0xfb, 0x33, 0x68, 0x70, 0x57, 0x0e, 0x02, 0x5f, 0x54, 0x45, 0x10, 0x91, 0x5b, 0x2b,
	0xbc, 0xda, 0xaf, 0x7c, 0xf9, 0xc5, 0x56, 0x61, 0x3b, 0xbf, 0xd4, 0xbb, 0xe2, 0x95, 0xbd, 0xb3,
	0x3f, 0x02, 0x2b, 0x63, 0x32, 0x26, 0xbb, 0x50, 0xf6, 0x83, 0x11, 0x55, 0x39, 0x7b, 0x13, 0x8d,
	0x66, 0xa4, 0x1c, 0x21, 0xc2, 0x13, 0xcd, 0x39, 0x98, 0x68, 0xfd, 0x90, 0x99, 0x1c, 0x52, 0x92,
	0x7f, 0x2b, 0x02, 0xf0, 0xf7, 0x43, 0xca, 0x5c, 0x6f, 0xfa, 0xb5, 0xa5, 0xfb, 0xa7, 0x00, 0x74,
	0x34, 0xa6, 0xf1, 0xd9, 0x79, 0x14, 0xcc, 0x9a, 0x45, 0x74, 0xe6, 0xbd, 0xc4, 0x19, 0x61, 0xbc,
	0xdd, 0xe3, 0x12, 0x47, 0x51, 0x30, 0xeb, 0xf9, 0x2c, 0xba, 0x70, 0x4c, 0xaa, 0xde, 0xc9, 0x87,
	0x50, 0x15, 0xc7, 0x59, 0xd0, 0x2c, 0xe1, 0xe1, 0xeb, 0x4b, 0x0f, 0x9f, 0x06, 0xe2, 0xa8, 0x41,
	0xc5, 0x5b, 0xea, 0x9a, 0xcb, 0x6b, 0xaf, 0xb9, 0xf5, 0x14, 0xea, 0x69, 0x07, 0x78, 0x27, 0x7d,
	0x4a, 0x2f, 0x44, 0xbf, 0x39, 0xfc, 0x91, 0xf7, 0xe0, 0x73, 0x77, 0x3a, 0xa7, 0x32, 0x74, 0x0b,
	0x75, 0xf1, 0x53, 0xc2, 0x89, 0xd8, 0x11, 0xec, 0x1f, 0x15, 0x7e, 0x90, 0x6f, 0x3d, 0x86, 0x0d,
	0xdd, 0xa7, 0xff, 0x4e, 0x9b, 0xdd, 0x85, 0xda, 0x22, 0xd8, 0x98, 0x74, 0x60, 0x83, 0xdf, 0xdf,
	0xd9, 0x48, 0xbc, 0xcb, 0xeb, 0x6d, 0x64, 0x92, 0xe2, 0xd4, 0xfc, 0xc5, 0x19, 0xfb, 0x0f, 0x79,
	0x51, 0x55, 0xe2, 0xfd, 0xc8, 0x9b, 0x32, 0x1a, 0xbd, 0xec, 0xc2, 0x77, 0x53, 0xf7, 0x26, 0xfc,
	0xac, 0xa1, 0x90, 0x38, 0xaf, 0x5f, 0xd2, 0x6d, 0xed, 0x92, 0x8a, 0x97, 0x25, 0xd5, 0x9d, 0xd8,
	0x5f, 0xe5, 0xa1, 0xc4, 0xa3, 0xfc, 0xda, 0x8a, 0xed, 0x36, 0x18, 0x43, 0x37, 0x1e, 0xba, 0x23,
	0x8a, 0x7e, 0xd4, 0x3b, 0x1b, 0xa8, 0xfa, 0x40, 0xd0, 0x1c, 0xc5, 0xe4, 0xf6, 0x31, 0xac, 0xd2,
	0x25, 0xfb, 0x9c, 0x4c, 0xde, 0x81, 0x02, 0x0b, 0x64, 0xd5, 0x68, 0xcc, 0x02, 0x4b, 0x97, 0x55,
	0x65, 0x3d, 0x7a, 0xfc, 0x33, 0x0f, 0x0d, 0x1e, 0xed, 0x37, 0x08, 0x1f, 0x7a, 0x02, 0x4a, 0xeb,
	0x12, 0x70, 0x4b, 0x26, 0xa0, 0xbc, 0xd2, 0x0f, 0x4c, 0xc4, 0x0d, 0x4c, 0x44, 0x65, 0x95, 0x50,
	0x81, 0x05, 0x1c, 0xb0, 0x32, 0x41, 0x22, 0x60, 0xe1, 0x95, 0xa7, 0x00, 0x2b, 0x23, 0xe5, 0x08,
	0x11, 0x0e, 0x58, 0xd8, 0x2c, 0x1c, 0xb0, 0xf4, 0x43, 0x66, 0x72, 0x48, 0x49, 0xfe, 0x2b, 0x0f,
	0xb0, 0xe8, 0x91, 0xff, 0xcb, 0x1a, 0x42, 0x7c, 0x5d, 0x55, 0x43, 0xc8, 0x7c, 0xc5, 0x1a, 0xfa,
	0x2e, 0xd4, 0x34, 0x58, 0x20, 0xb7, 0xd2, 0x39, 0x6a, 0x64, 0x70, 0x43, 0x65, 0xea, 0xaf, 0x32,
	0x53, 0xb2, 0xd3, 0xdb, 0x60, 0x22, 0x64, 0xac, 0xaf, 0xbc, 0x2a, 0x97, 0x49, 0xef, 0x1b, 0x85,
	0xf5, 0xfb, 0xc6, 0x36, 0xd4, 0xe8, 0x8b, 0x30, 0xa2, 0x71, 0xec, 0x05, 0x7e, 0x8c, 0xd8, 0x6e,
	0x3a, 0x3a, 0x89, 0x5c, 0x87, 0xf2, 0xd4, 0x9b, 0x79, 0x0c, 0x93, 0x54, 0x16, 0xa6, 0xac, 0x9c,
	0x23, 0x88, 0x76, 0x08, 0x15, 0xe9, 0xe1, 0x55, 0x37, 0x9c, 0x8c, 0xc5, 0xc2, 0x1a, 0x8b, 0xc5,
	0x65, 0x16, 0x3f, 0xe1, 0xeb, 0x90, 0xb4, 0x99, 0x06, 0xb8, 0xfc, 0x95, 0x01, 0xae, 0xb0, 0x06,
	0xe0, 0x7e, 0x0d, 0x9b, 0x07, 0x13, 0xd7, 0xf7, 0xe9, 0x34, 0x31, 0x62, 0x0c, 0x05, 0x61, 0x65,
	0x68, 0x4a, 0xe0, 0xe5, 0xc1, 0xd9, 0xe7, 0x50, 0xef, 0xcf, 0x07, 0x0f, 0xf9, 0x16, 0x2b, 0xf5,
	0xdf, 0x59, 0x4c, 0xf9, 0xac, 0x57, 0xc9, 0xc5, 0x0a, 0x09, 0x2e, 0x2a, 0x6a, 0xa7, 0xb0, 0x46,
	0x54, 0xd4, 0x4f, 0x00, 0xb5, 0x3e, 0x73, 0x19, 0xe5, 0xb1, 0x8c, 0x29, 0x79, 0x1b, 0x0a, 0x41,
	0x28, 0x9b, 0xc1, 0xc0, 0x63, 0x27, 0xa1, 0x53, 0x08, 0x42, 0x2c, 0xe4, 0x39, 0x73, 0x99, 0x17,
	0xf8, 0xb2, 0x0d, 0x64, 0x21, 0x4b, 0xa2, 0x93, 0xb0, 0xc9, 0x75, 0x30, 0x93, 0xdd, 0x19, 0xbb,
	0xa2, 0xe8, 0x2c, 0x08, 0xf6, 0xbf, 0x4b, 0x50, 0x55, 0x87, 0xc8, 0x16, 0x94, 0xb8, 0xc7, 0xa9,
	0x4a, 0xe5, 0xbd, 0x73, 0x9c, 0x73, 0x90, 0x41, 0x6c, 0x15, 0xb4, 0x88, 0x04, 0x12, 0x89, 0xf8,
	0x38, 0xa7, 0xa2, 0xed, 0x82, 0x85, 0x35, 0x3f, 0x5c, 0x20, 0x8e, 0xc4, 0xd1, 0xa5, 0xeb, 0xd3,
	0x71, 0xce, 0x69, 0xf8, 0x99, 0x55, 0xef, 0x10, 0xae, 0x65, 0x55, 0xc4, 0x32, 0xcc, 0xb7, 0x96,
	0xe9, 0xe0, 0xd6, 0x2d, 0x3f, 0xbb, 0xbc, 0x75, 0xc1, 0xe2, 0x49, 0x4d, 0x39, 0x52, 0xd6, 0x1c,
	0xc9, 0xc0, 0x22, 0x77, 0x84, 0x66, 0x86, 0xc6, 0x21, 0x5c, 0xcb, 0xaa, 0x88, 0x25, 0x70, 0xbc,
	0xb5, 0x4c, 0x07, 0x3a, 0x42, 0xb3, 0xa0, 0xbc, 0x05, 0x25, 0x4e, 0x6b, 0x1a, 0x5a, 0x5a, 0xf9,
	0x41, 0x9e, 0x56, 0xce, 0xe0, 0x69, 0x15, 0x05, 0x52, 0xd5, 0xd2, 0x8a, 0xd8, 0xcc, 0xd3, 0x4a,
	0x25, 0x48, 0x0b, 0xd0, 0x35, 0x33, 0x28, 0xc2, 0x95, 0x20, 0xec, 0xda, 0x6a, 0xbf, 0x07, 0x4d,
	0x09, 0xae, 0xfe, 0x5c, 0x09, 0xb2, 0xa4, 0xcc, 0x70, 0xd2, 0xdc, 0x4c, 0xcb, 0x0c, 0x27, 0x52,
	0x66, 0x38, 0x21, 0x3b, 0x60, 0xe0, 0x03, 0x8d, 0x9b, 0x75, 0x94, 0xda, 0x58, 0x48, 0xa1, 0x43,
	0x8a, 0x4d, 0xda, 0x50, 0xc6, 0x2f, 0xab, 0x66, 0x03, 0xe5, 0xbe, 0x75, 0x09, 0xe3, 0x7b, 0x9c,
	0x8b, 0x21, 0xf0, 0x87, 0xfd, 0x2a, 0x54, 0x82, 0xc1, 0x6f, 0xe8, 0x90, 0xd9, 0xbf, 0x80, 0x32,
	0xf6, 0x12, 0xd9, 0x4e, 0x77, 0x91, 0x56, 0x50, 0xaa, 0x9c, 0xb6, 0xd3, 0xcd, 0xa3, 0xe5, 0x46,
	0xf5, 0xcc, 0x18, 0xbf, 0x70, 0x86, 0x93, 0xd7, 0x1b, 0xf1, 0x57, 0x9f, 0x4f, 0xf6, 0x1e, 0x18,
	0x32, 0x0b, 0xe4, 0xe6, 0x22, 0x49, 0x62, 0x20, 0x68, 0xa9, 0x4c, 0x12, 0x64, 0x6f, 0x43, 0xe9,
	0x59, 0xe0, 0x8f, 0x49, 0x13, 0x8c, 0x19, 0x8d, 0x63, 0x77, 0x2c, 0x61, 0xd6, 0x51, 0xaf, 0xb6,
	0x0b, 0x55, 0xc7, 0x3d, 0x67, 0xf8, 0xd9, 0x75, 0x07, 0x0c, 0xac, 0x7a, 0x6f, 0xb4, 0x12, 0xb1,
	0x2a, 0x5c, 0xe0, 0xd1, 0x88, 0x83, 0x9b, 0x3b, 0x1a, 0x71, 0x74, 0x5a, 0x39, 0x29, 0x94, 0x80,
	0xfd, 0x39, 0x18, 0xdc, 0xc4, 0xe3, 0x60, 0x4c, 0xde, 0x84, 0xb2, 0xe7, 0x8f, 0xe8, 0x0b, 0xd4,
	0x5f, 0x72, 0xc4, 0x0b, 0x21, 0x50, 0x62, 0x34, 0x9a, 0x61, 0x93, 0x96, 0x1c, 0x7c, 0x46, 0x1a,
	0x9f, 0x0a, 0xbc, 0xe9, 0x36, 0x1d, 0x7c, 0xe6, 0x34, 0x1c, 0x9c, 0xbc, 0x02, 0x37, 0x1c, 0x7c,
	0x26, 0xef, 0x01, 0xd0, 0x17, 0x8c, 0xfa, 0x02, 0x38, 0x01, 0x39, 0x1a, 0xc5, 0x8e, 0xa0, 0x71,
	0x32, 0x67, 0x83, 0x60, 0xee, 0x8f, 0x9e, 0x88, 0x90, 0x5f, 0x09, 0x98, 0x1f, 0x48, 0x93, 0xeb,
	0x2f, 0x69, 0x71, 0xbf, 0x38, 0xb9, 0xff, 0x9e, 0x07, 0xe3, 0x9b, 0x32, 0x46, 0x6e, 0x40, 0x25,
	0xa6, 0xfe, 0x88, 0x2a, 0x8c, 0xd3, 0xb6, 0x21, 0xc9, 0x48, 0x03, 0x70, 0x29, 0x0b, 0xc0, 0x7f,
	0xc9, 0x83, 0x71, 0x1a, 0x79, 0xe3, 0x31, 0x8d, 0xc8, 0x0e, 0x54, 0x66, 0x94, 0x4d, 0x82, 0x35,
	0x05, 0x20, 0xf8, 0x7c, 0x05, 0x9a, 0xc7, 0x34, 0x92, 0xbe, 0xea, 0x2b, 0x10, 0x27, 0x93, 0xf7,
	0xa1, 0xc2, 0xbc, 0x99, 0xe7, 0x8f, 0xe5, 0xec, 0x10, 0x23, 0xe7, 0x14, 0x49, 0x8e, 0x64, 0xf1,
	0xd1, 0x1f, 0xf3, 0x59, 0x23, 0x91, 0x55, 0x7c, 0x0a, 0x69, 0xd3, 0xc7, 0x11, 0x6c, 0xfb, 0xab,
	0x0a, 0x58, 0x0e, 0xfd, 0x6c, 0x4e, 0x63, 0xf6, 0xc8, 0x67, 0x34, 0x1a, 0xd2, 0x90, 0xfd, 0xef,
	0x5c, 0x4d, 0x65, 0xa7, 0x98, 0xc9, 0xce, 0x02, 0x62, 0x4a, 0x57, 0x82, 0x18, 0xf2, 0x11, 0x34,
	0xe2, 0xf9, 0x00, 0xff, 0x36, 0x9d, 0x9d, 0xe3, 0x84, 0x95, 0x90, 0xff, 0x86, 0x88, 0x2e, 0x35,
	0xc3, 0x8f, 0x73, 0x4e, 0x5d, 0x49, 0xcb, 0xa9, 0x6e, 0x43, 0x19, 0x5f, 0x25, 0xc8, 0x8b, 0xae,
	0xc6, 0x23, 0xdc, 0x06, 0xb2, 0xc8, 0x8f, 0xa1, 0x2e, 0x4b, 0x46, 0x99, 0x10, 0xc0, 0x4e, 0xc4,
	0xb6, 0xaa, 0x6f, 0x21, 0xc7, 0x39, 0x67, 0x73, 0x98, 0x5a, 0x4b, 0xba, 0x60, 0x05, 0xb2, 0x21,
	0xce, 0x14, 0x26, 0x54, 0xb5, 0xa1, 0x94, 0xe9, 0x16, 0x3e, 0x94, 0x82, 0x4c, 0x03, 0x75, 0xa0,
	0x86, 0x43, 0x49, 0x1a, 0x17, 0x70, 0xbf, 0x58, 0x48, 0x13, 0xcb, 0xb8, 0x64, 0x2d, 0xe2, 0x12,
	0xc3, 0xa1, 0xb6, 0x7a, 0x38, 0xa8, 0x09, 0xb3, 0xb1, 0x6a, 0xc2, 0x68, 0x93, 0x61, 0x73, 0xfd,
	0x64, 0x48, 0xe6, 0x4c, 0x7d, 0xf5, 0x9c, 0xb9, 0x05, 0x15, 0x19, 0x41, 0xe3, 0xd2, 0x5a, 0x74,
	0x9c, 0x73, 0x24, 0x73, 0xf9, 0x2e, 0x60, 0xbd, 0xc6, 0x2e, 0x70, 0x69, 0x29, 0xb9, 0xf6, 0x6a,
	0x4b, 0xc9, 0x5d, 0x30, 0x67, 0x49, 0xd2, 0x49, 0xea, 0xe3, 0x21, 0x71, 0xba, 0x3a, 0x53, 0x09,
	0xbf, 0x0b, 0x66, 0xe4, 0x9e, 0xb3, 0x33, 0xdc, 0xa7, 0xde, 0xd0, 0xa4, 0x15, 0xdc, 0x73, 0xe9,
	0x48, 0x3e, 0xef, 0x9b, 0x60, 0x44, 0xa2, 0xc3, 0xec, 0x6d, 0xa8, 0x1e, 0xd2, 0xa1, 0xc7, 0xe1,
	0x93, 0xe3, 0xb5, 0xf8, 0x59, 0xc1, 0x7b, 0xac, 0x2a, 0x7f, 0x4d, 0xd8, 0x47, 0x50, 0xe9, 0x0f,
	0x27, 0x74, 0x86, 0xff, 0x15, 0xb1, 0x12, 0x38, 0x3c, 0x8b, 0x41, 0x64, 0x8a, 0xdd, 0xf9, 0x94,
	0x13, 0x38, 0x1b, 0x83, 0x16, 0x6c, 0xb1, 0xd5, 0xe2, 0xf7, 0x08, 0xb2, 0x77, 0xb7, 0xa0, 0x22,
	0x10, 0x81, 0x00, 0x54, 0xf6, 0x7b, 0x47, 0x27, 0x4e, 0xcf, 0xca, 0x11, 0x13, 0xca, 0xdd, 0xa3,
	0xd3, 0x9e, 0x63, 0xe5, 0x77, 0xff, 0x91, 0x87, 0xc2, 0x49, 0x48, 0x2c, 0xd8, 0x38, 0x70, 0x7a,
	0xdd, 0xd3, 0xde, 0xd9, 0xd3, 0x93, 0xc3, 0x5e, 0xdf, 0xca, 0x91, 0x06, 0xd4, 0x34, 0x8a, 0x95,
	0xe7, 0x84, 0x67, 0xdd, 0xd3, 0x83, 0x63, 0x29, 0x51, 0x20, 0x75, 0x80, 0x05, 0xc1, 0x2a, 0x72,
	0x1d, 0x87, 0xbd, 0xc7, 0xbd, 0x44, 0x47, 0x89, 0x1f, 0xd1, 0x28, 0x56, 0x59, 0x33, 0xd3, 0x3b,
	0x7c, 0xd8, 0xeb, 0x5b, 0x15, 0xcd, 0x0c, 0xa7, 0x58, 0xc6, 0xc2, 0x8c, 0x90, 0xa8, 0x2e, 0xcc,
	0xa0, 0x80, 0xa9, 0x99, 0x11, 0x12, 0xa0, 0x99, 0x41, 0x91, 0xda, 0xee, 0x2f, 0xc1, 0x90, 0x1f,
	0x94, 0x68, 0xb1, 0xdb, 0x3f, 0xe8, 0x1e, 0x72, 0x1f, 0x9e, 0xf2, 0xe0, 0x35, 0xca, 0x91, 0x73,
	0xf2, 0xc4, 0xca, 0x73, 0x0b, 0x8a, 0x72, 0x7a, 0x62, 0x15, 0x08, 0x81, 0xba, 0x7a, 0x7f, 0xf2,
	0xf1, 0xe9, 0xc7, 0xdd, 0xc7, 0x56, 0xb1, 0xf3, 0x67, 0x80, 0x0d, 0xc4, 0x88, 0x3e, 0x8d, 0x9e,
	0x7b, 0x43, 0x4a, 0xbe, 0x03, 0xa5, 0x67, 0x3c, 0xaf, 0x2b, 0xe0, 0xaa, 0x25, 0x7b, 0x2b, 0xf0,
	0xc7, 0x76, 0x8e, 0x7c, 0x1f, 0x6a, 0x3f, 0x0f, 0x3c, 0xff, 0x60, 0x3a, 0x8f, 0x79, 0xe1, 0xa4,
	0xab, 0xa4, 0xb5, 0x42, 0x85, 0x9d, 0x23, 0x1d, 0x30, 0x1f, 0x52, 0x26, 0x2b, 0x61, 0x95, 0x25,
	0xd1, 0x54, 0x42, 0xc8, 0xce, 0x91, 0xdb, 0x50, 0x78, 0x42, 0x49, 0xba, 0x6c, 0x5b, 0xd9, 0x3f,
	0x58, 0x76, 0x8e, 0xec, 0x01, 0x1c, 0xe0, 0x0f, 0x66, 0x5c, 0x4c, 0x96, 0xb6, 0x48, 0x6b, 0x81,
	0xe4, 0xe8, 0x4c, 0x6d, 0x71, 0x20, 0x26, 0xcb, 0x3b, 0xb3, 0xa5, 0xad, 0x77, 0x76, 0x8e, 0xdc,
	0x00, 0xe3, 0x21, 0x15, 0xab, 0xcf, 0x02, 0x6c, 0xd2, 0x6a, 0x77, 0xa0, 0xd6, 0xa7, 0x6e, 0x34,
	0x9c, 0x08, 0xb5, 0x3a, 0x44, 0x64, 0x94, 0xdd, 0x04, 0x13, 0xf1, 0x05, 0xd5, 0x69, 0x78, 0x93,
	0xd5, 0x07, 0x89, 0x54, 0x4c, 0x52, 0xf0, 0x95, 0xd1, 0xd7, 0x06, 0xe3, 0x90, 0x4e, 0xb3, 0xce,
	0xad, 0xbe, 0x8d, 0x0f, 0x78, 0xdb, 0x4e, 0x85, 0x5e, 0x0d, 0x5d, 0xd7, 0x9c, 0x48, 0x72, 0x8c,
	0xff, 0xe5, 0x96, 0x7e, 0x92, 0xb4, 0x16, 0xdf, 0x0a, 0x7a, 0x8e, 0xc5, 0x5f, 0x9b, 0xe5, 0x1f,
	0x20, 0x2d, 0x6d, 0x41, 0x4e, 0x72, 0x8c, 0x16, 0x2e, 0xe5, 0x58, 0xaa, 0x4d, 0x72, 0x2c, 0xd4,
	0x2e, 0xc9, 0xb1, 0x52, 0xa6, 0x72, 0x8c, 0xea, 0x2e, 0xe7, 0x38, 0xd1, 0x07, 0x89, 0xd4, 0xf2,
	0x1c, 0x2b, 0x7d, 0x22, 0xc7, 0x59, 0xe7, 0x5e, 0x96, 0x63, 0xa1, 0xf7, 0x6a, 0x39, 0xde, 0x05,
	0x33, 0xf9, 0xbf, 0x4c, 0xb2, 0x23, 0x32, 0xe3, 0xcd, 0x0e, 0x18, 0xf2, 0xdf, 0xf1, 0xcb, 0x24,
	0x7f, 0x08, 0xc6, 0xb3, 0xf9, 0x60, 0xea, 0xc5, 0x13, 0xb2, 0x74, 0x68, 0xaf, 0x71, 0xe8, 0x3e,
	0x98, 0xfd, 0xf9, 0x20, 0x1e, 0x46, 0xde, 0x80, 0x92, 0x25, 0x0b, 0x43, 0x6b, 0x43, 0xf6, 0xa6,
	0xf8, 0x3c, 0xc8, 0x7d, 0x90, 0x27, 0x36, 0x54, 0x1e, 0xcd, 0xc2, 0x20, 0x62, 0x44, 0xdb, 0x46,
	0x5a, 0xda, 0x33, 0x66, 0xb2, 0xd2, 0x7b, 0x81, 0x32, 0xab, 0x80, 0x20, 0x2d, 0x7f, 0x0f, 0xaa,
	0x6a, 0x15, 0x22, 0xcb, 0x36, 0xa3, 0x8c, 0xf8, 0x4f, 0xa0, 0xda, 0x9f, 0xcc, 0xd9, 0x28, 0xf8,
	0xad, 0xbf, 0xd2, 0xc0, 0xca, 0x98, 0x3b, 0x21, 0xd4, 0xe5, 0x82, 0xfb, 0x5a, 0xf8, 0x78, 0x1f,
	0x36, 0x8f, 0x5d, 0x7f, 0x34, 0xa5, 0x6a, 0x4b, 0x16, 0x29, 0x92, 0x6f, 0xad, 0x4b, 0x6b, 0xab,
	0x9d, 0xeb, 0xbc, 0x80, 0x37, 0xbb, 0x73, 0x36, 0x09, 0x22, 0xef, 0x77, 0xf8, 0x63, 0xe3, 0xb5,
	0xec, 0x3e, 0x00, 0x53, 0x29, 0xa1, 0xb2, 0xd9, 0xb2, 0x5b, 0x70, 0x4b, 0x20, 0xa9, 0x9a, 0xd7,
	0x76, 0x6e, 0xdf, 0xf8, 0x55, 0xd9, 0x0d, 0xbd, 0x70, 0x30, 0xa8, 0xa0, 0xea, 0x07, 0xff, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x78, 0x8b, 0x4a, 0x02, 0xfe, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphServiceClient interface {
	// Ping returns PONG if the server is health
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	// JoinCluster Joins the raft node to the cluster
	JoinCluster(ctx context.Context, in *RaftNode, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetSchema gets schema about the Graph node & edge types
	GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Schema, error)
	// Me returns a NodeDetail of the currently logged in user(the subject of the JWT)
	Me(ctx context.Context, in *MeFilter, opts ...grpc.CallOption) (*NodeDetail, error)
	// CreateNode creates a node in the graph
	CreateNode(ctx context.Context, in *NodeConstructor, opts ...grpc.CallOption) (*Node, error)
	// CreateNodes creates a batch of nodes in the graph
	CreateNodes(ctx context.Context, in *NodeConstructors, opts ...grpc.CallOption) (*Nodes, error)
	// GetNode gets a single node in the graph
	GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error)
	// SearchNodes searches the graph for nodes
	SearchNodes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Nodes, error)
	// PatchNode patches a nodes attributes
	PatchNode(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Node, error)
	// PatchNodes patches a batch of nodes attributes
	PatchNodes(ctx context.Context, in *Patches, opts ...grpc.CallOption) (*Nodes, error)
	// DelNode deletes a node from the graph
	DelNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*empty.Empty, error)
	// DelNodes deletes a batch of nodes from the graph
	DelNodes(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*empty.Empty, error)
	// CreateEdge creates an edge in the graph
	CreateEdge(ctx context.Context, in *EdgeConstructor, opts ...grpc.CallOption) (*Edge, error)
	// CreateEdges creates a batch of edges in the graph
	CreateEdges(ctx context.Context, in *EdgeConstructors, opts ...grpc.CallOption) (*Edges, error)
	// GetEdge gets a single edge in the graph
	GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error)
	// SearchEdges searches the graph for edges
	SearchEdges(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Edges, error)
	// PatchEdge patches an edges attributes
	PatchEdge(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Edge, error)
	// PatchEdges patches a batch of edges attributes
	PatchEdges(ctx context.Context, in *Patches, opts ...grpc.CallOption) (*Edges, error)
	// DelEdge deletes an edge from the graph
	DelEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*empty.Empty, error)
	// DelEdges deletes a batch of edges from the graph
	DelEdges(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*empty.Empty, error)
	// EdgesFrom returns edges that source from the given node path that pass the filter
	EdgesFrom(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error)
	// EdgesTo returns edges that point to the given node path that pass the filter
	EdgesTo(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error)
	// Publish publishes a message to a pubsub channel
	Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	// Subscribe subscribes to messages on a pubsub channel
	Subscribe(ctx context.Context, in *ChannelFilter, opts ...grpc.CallOption) (GraphService_SubscribeClient, error)
	// Import imports the Graph into the database
	Import(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*Graph, error)
	// Export returns the Graph data
	Export(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Graph, error)
	// SubGraph returns a subgraph using the given filter
	SubGraph(ctx context.Context, in *SubGraphFilter, opts ...grpc.CallOption) (*Graph, error)
	// Shutdown shuts down the database
	Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type graphServiceClient struct {
	cc *grpc.ClientConn
}

func NewGraphServiceClient(cc *grpc.ClientConn) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.GraphService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) JoinCluster(ctx context.Context, in *RaftNode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Me(ctx context.Context, in *MeFilter, opts ...grpc.CallOption) (*NodeDetail, error) {
	out := new(NodeDetail)
	err := c.cc.Invoke(ctx, "/api.GraphService/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateNode(ctx context.Context, in *NodeConstructor, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateNodes(ctx context.Context, in *NodeConstructors, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchNodes(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNode(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNodes(ctx context.Context, in *Patches, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelNodes(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdge(ctx context.Context, in *EdgeConstructor, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdges(ctx context.Context, in *EdgeConstructors, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchEdges(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdge(ctx context.Context, in *Patch, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdges(ctx context.Context, in *Patches, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelEdges(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) EdgesFrom(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/EdgesFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) EdgesTo(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/EdgesTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Subscribe(ctx context.Context, in *ChannelFilter, opts ...grpc.CallOption) (GraphService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GraphService_serviceDesc.Streams[0], "/api.GraphService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type graphServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *graphServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphServiceClient) Import(ctx context.Context, in *Graph, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/api.GraphService/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Export(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/api.GraphService/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SubGraph(ctx context.Context, in *SubGraphFilter, opts ...grpc.CallOption) (*Graph, error) {
	out := new(Graph)
	err := c.cc.Invoke(ctx, "/api.GraphService/SubGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Shutdown(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServiceServer is the server API for GraphService service.
type GraphServiceServer interface {
	// Ping returns PONG if the server is health
	Ping(context.Context, *empty.Empty) (*Pong, error)
	// JoinCluster Joins the raft node to the cluster
	JoinCluster(context.Context, *RaftNode) (*empty.Empty, error)
	// GetSchema gets schema about the Graph node & edge types
	GetSchema(context.Context, *empty.Empty) (*Schema, error)
	// Me returns a NodeDetail of the currently logged in user(the subject of the JWT)
	Me(context.Context, *MeFilter) (*NodeDetail, error)
	// CreateNode creates a node in the graph
	CreateNode(context.Context, *NodeConstructor) (*Node, error)
	// CreateNodes creates a batch of nodes in the graph
	CreateNodes(context.Context, *NodeConstructors) (*Nodes, error)
	// GetNode gets a single node in the graph
	GetNode(context.Context, *Path) (*Node, error)
	// SearchNodes searches the graph for nodes
	SearchNodes(context.Context, *Filter) (*Nodes, error)
	// PatchNode patches a nodes attributes
	PatchNode(context.Context, *Patch) (*Node, error)
	// PatchNodes patches a batch of nodes attributes
	PatchNodes(context.Context, *Patches) (*Nodes, error)
	// DelNode deletes a node from the graph
	DelNode(context.Context, *Path) (*empty.Empty, error)
	// DelNodes deletes a batch of nodes from the graph
	DelNodes(context.Context, *Paths) (*empty.Empty, error)
	// CreateEdge creates an edge in the graph
	CreateEdge(context.Context, *EdgeConstructor) (*Edge, error)
	// CreateEdges creates a batch of edges in the graph
	CreateEdges(context.Context, *EdgeConstructors) (*Edges, error)
	// GetEdge gets a single edge in the graph
	GetEdge(context.Context, *Path) (*Edge, error)
	// SearchEdges searches the graph for edges
	SearchEdges(context.Context, *Filter) (*Edges, error)
	// PatchEdge patches an edges attributes
	PatchEdge(context.Context, *Patch) (*Edge, error)
	// PatchEdges patches a batch of edges attributes
	PatchEdges(context.Context, *Patches) (*Edges, error)
	// DelEdge deletes an edge from the graph
	DelEdge(context.Context, *Path) (*empty.Empty, error)
	// DelEdges deletes a batch of edges from the graph
	DelEdges(context.Context, *Paths) (*empty.Empty, error)
	// EdgesFrom returns edges that source from the given node path that pass the filter
	EdgesFrom(context.Context, *EdgeFilter) (*Edges, error)
	// EdgesTo returns edges that point to the given node path that pass the filter
	EdgesTo(context.Context, *EdgeFilter) (*Edges, error)
	// Publish publishes a message to a pubsub channel
	Publish(context.Context, *OutboundMessage) (*empty.Empty, error)
	// Subscribe subscribes to messages on a pubsub channel
	Subscribe(*ChannelFilter, GraphService_SubscribeServer) error
	// Import imports the Graph into the database
	Import(context.Context, *Graph) (*Graph, error)
	// Export returns the Graph data
	Export(context.Context, *empty.Empty) (*Graph, error)
	// SubGraph returns a subgraph using the given filter
	SubGraph(context.Context, *SubGraphFilter) (*Graph, error)
	// Shutdown shuts down the database
	Shutdown(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterGraphServiceServer(s *grpc.Server, srv GraphServiceServer) {
	s.RegisterService(&_GraphService_serviceDesc, srv)
}

func _GraphService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).JoinCluster(ctx, req.(*RaftNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetSchema(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Me(ctx, req.(*MeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeConstructor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNode(ctx, req.(*NodeConstructor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeConstructors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNodes(ctx, req.(*NodeConstructors))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchNodes(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNode(ctx, req.(*Patch))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patches)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNodes(ctx, req.(*Patches))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelNodes(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeConstructor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdge(ctx, req.(*EdgeConstructor))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeConstructors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdges(ctx, req.(*EdgeConstructors))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetEdge(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchEdges(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdge(ctx, req.(*Patch))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patches)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdges(ctx, req.(*Patches))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelEdge(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelEdges(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_EdgesFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).EdgesFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/EdgesFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).EdgesFrom(ctx, req.(*EdgeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_EdgesTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).EdgesTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/EdgesTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).EdgesTo(ctx, req.(*EdgeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Publish(ctx, req.(*OutboundMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServiceServer).Subscribe(m, &graphServiceSubscribeServer{stream})
}

type GraphService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type graphServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *graphServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _GraphService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Graph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Import(ctx, req.(*Graph))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Export(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SubGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubGraphFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SubGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SubGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SubGraph(ctx, req.(*SubGraphFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Shutdown(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraphService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GraphService_Ping_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _GraphService_JoinCluster_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _GraphService_GetSchema_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _GraphService_Me_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _GraphService_CreateNode_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _GraphService_CreateNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _GraphService_GetNode_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _GraphService_SearchNodes_Handler,
		},
		{
			MethodName: "PatchNode",
			Handler:    _GraphService_PatchNode_Handler,
		},
		{
			MethodName: "PatchNodes",
			Handler:    _GraphService_PatchNodes_Handler,
		},
		{
			MethodName: "DelNode",
			Handler:    _GraphService_DelNode_Handler,
		},
		{
			MethodName: "DelNodes",
			Handler:    _GraphService_DelNodes_Handler,
		},
		{
			MethodName: "CreateEdge",
			Handler:    _GraphService_CreateEdge_Handler,
		},
		{
			MethodName: "CreateEdges",
			Handler:    _GraphService_CreateEdges_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _GraphService_GetEdge_Handler,
		},
		{
			MethodName: "SearchEdges",
			Handler:    _GraphService_SearchEdges_Handler,
		},
		{
			MethodName: "PatchEdge",
			Handler:    _GraphService_PatchEdge_Handler,
		},
		{
			MethodName: "PatchEdges",
			Handler:    _GraphService_PatchEdges_Handler,
		},
		{
			MethodName: "DelEdge",
			Handler:    _GraphService_DelEdge_Handler,
		},
		{
			MethodName: "DelEdges",
			Handler:    _GraphService_DelEdges_Handler,
		},
		{
			MethodName: "EdgesFrom",
			Handler:    _GraphService_EdgesFrom_Handler,
		},
		{
			MethodName: "EdgesTo",
			Handler:    _GraphService_EdgesTo_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _GraphService_Publish_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _GraphService_Import_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _GraphService_Export_Handler,
		},
		{
			MethodName: "SubGraph",
			Handler:    _GraphService_SubGraph_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _GraphService_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _GraphService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/graphik.proto",
}

// TriggerServiceClient is the client API for TriggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TriggerServiceClient interface {
	// Ping returns PONG if the server is health
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	// HandleTrigger mutates state changes
	HandleTrigger(ctx context.Context, in *Trigger, opts ...grpc.CallOption) (*StateChange, error)
}

type triggerServiceClient struct {
	cc *grpc.ClientConn
}

func NewTriggerServiceClient(cc *grpc.ClientConn) TriggerServiceClient {
	return &triggerServiceClient{cc}
}

func (c *triggerServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.TriggerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerServiceClient) HandleTrigger(ctx context.Context, in *Trigger, opts ...grpc.CallOption) (*StateChange, error) {
	out := new(StateChange)
	err := c.cc.Invoke(ctx, "/api.TriggerService/HandleTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerServiceServer is the server API for TriggerService service.
type TriggerServiceServer interface {
	// Ping returns PONG if the server is health
	Ping(context.Context, *empty.Empty) (*Pong, error)
	// HandleTrigger mutates state changes
	HandleTrigger(context.Context, *Trigger) (*StateChange, error)
}

func RegisterTriggerServiceServer(s *grpc.Server, srv TriggerServiceServer) {
	s.RegisterService(&_TriggerService_serviceDesc, srv)
}

func _TriggerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TriggerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerService_HandleTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Trigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerServiceServer).HandleTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.TriggerService/HandleTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerServiceServer).HandleTrigger(ctx, req.(*Trigger))
	}
	return interceptor(ctx, in, info, handler)
}

var _TriggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.TriggerService",
	HandlerType: (*TriggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TriggerService_Ping_Handler,
		},
		{
			MethodName: "HandleTrigger",
			Handler:    _TriggerService_HandleTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graphik.proto",
}

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	// Ping returns PONG if the server is health
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	// Authorize authorizes inbound graph requests
	Authorize(ctx context.Context, in *RequestIntercept, opts ...grpc.CallOption) (*Decision, error)
}

type authorizationServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizationServiceClient(cc *grpc.ClientConn) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.AuthorizationService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) Authorize(ctx context.Context, in *RequestIntercept, opts ...grpc.CallOption) (*Decision, error) {
	out := new(Decision)
	err := c.cc.Invoke(ctx, "/api.AuthorizationService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
type AuthorizationServiceServer interface {
	// Ping returns PONG if the server is health
	Ping(context.Context, *empty.Empty) (*Pong, error)
	// Authorize authorizes inbound graph requests
	Authorize(context.Context, *RequestIntercept) (*Decision, error)
}

func RegisterAuthorizationServiceServer(s *grpc.Server, srv AuthorizationServiceServer) {
	s.RegisterService(&_AuthorizationService_serviceDesc, srv)
}

func _AuthorizationService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthorizationService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestIntercept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AuthorizationService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).Authorize(ctx, req.(*RequestIntercept))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthorizationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AuthorizationService_Ping_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _AuthorizationService_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graphik.proto",
}
