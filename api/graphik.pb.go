// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/graphik.proto

package apipb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Op int32

const (
	Op_CREATE_NODES Op = 0
	Op_CREATE_NODE  Op = 1
	Op_PATCH_NODES  Op = 2
	Op_PATCH_NODE   Op = 3
	Op_DELETE_NODES Op = 4
	Op_DELETE_NODE  Op = 5
	Op_CREATE_EDGES Op = 6
	Op_CREATE_EDGE  Op = 7
	Op_PATCH_EDGES  Op = 8
	Op_PATCH_EDGE   Op = 9
	Op_DELETE_EDGES Op = 10
	Op_DELETE_EDGE  Op = 11
	Op_SET_AUTH     Op = 12
)

var Op_name = map[int32]string{
	0:  "CREATE_NODES",
	1:  "CREATE_NODE",
	2:  "PATCH_NODES",
	3:  "PATCH_NODE",
	4:  "DELETE_NODES",
	5:  "DELETE_NODE",
	6:  "CREATE_EDGES",
	7:  "CREATE_EDGE",
	8:  "PATCH_EDGES",
	9:  "PATCH_EDGE",
	10: "DELETE_EDGES",
	11: "DELETE_EDGE",
	12: "SET_AUTH",
}

var Op_value = map[string]int32{
	"CREATE_NODES": 0,
	"CREATE_NODE":  1,
	"PATCH_NODES":  2,
	"PATCH_NODE":   3,
	"DELETE_NODES": 4,
	"DELETE_NODE":  5,
	"CREATE_EDGES": 6,
	"CREATE_EDGE":  7,
	"PATCH_EDGES":  8,
	"PATCH_EDGE":   9,
	"DELETE_EDGES": 10,
	"DELETE_EDGE":  11,
	"SET_AUTH":     12,
}

func (x Op) String() string {
	return proto.EnumName(Op_name, int32(x))
}

func (Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{0}
}

type Cascade int32

const (
	Cascade_CASCADE_NONE   Cascade = 0
	Cascade_CASCADE_FROM   Cascade = 1
	Cascade_CASCADE_TO     Cascade = 2
	Cascade_CASCADE_MUTUAL Cascade = 3
)

var Cascade_name = map[int32]string{
	0: "CASCADE_NONE",
	1: "CASCADE_FROM",
	2: "CASCADE_TO",
	3: "CASCADE_MUTUAL",
}

var Cascade_value = map[string]int32{
	"CASCADE_NONE":   0,
	"CASCADE_FROM":   1,
	"CASCADE_TO":     2,
	"CASCADE_MUTUAL": 3,
}

func (x Cascade) String() string {
	return proto.EnumName(Cascade_name, int32(x))
}

func (Cascade) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{1}
}

type Keyword int32

const (
	Keyword_INVALID Keyword = 0
	Keyword_ANY     Keyword = 1
	Keyword_DEFAULT Keyword = 2
)

var Keyword_name = map[int32]string{
	0: "INVALID",
	1: "ANY",
	2: "DEFAULT",
}

var Keyword_value = map[string]int32{
	"INVALID": 0,
	"ANY":     1,
	"DEFAULT": 2,
}

func (x Keyword) String() string {
	return proto.EnumName(Keyword_name, int32(x))
}

func (Keyword) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{2}
}

type Counter struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Counter) Reset()         { *m = Counter{} }
func (m *Counter) String() string { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()    {}
func (*Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{0}
}

func (m *Counter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counter.Unmarshal(m, b)
}
func (m *Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counter.Marshal(b, m, deterministic)
}
func (m *Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counter.Merge(m, src)
}
func (m *Counter) XXX_Size() int {
	return xxx_messageInfo_Counter.Size(m)
}
func (m *Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_Counter proto.InternalMessageInfo

func (m *Counter) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Path struct {
	Gtype                string   `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Gid                  string   `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Path) Reset()         { *m = Path{} }
func (m *Path) String() string { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()    {}
func (*Path) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{1}
}

func (m *Path) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Path.Unmarshal(m, b)
}
func (m *Path) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Path.Marshal(b, m, deterministic)
}
func (m *Path) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Path.Merge(m, src)
}
func (m *Path) XXX_Size() int {
	return xxx_messageInfo_Path.Size(m)
}
func (m *Path) XXX_DiscardUnknown() {
	xxx_messageInfo_Path.DiscardUnknown(m)
}

var xxx_messageInfo_Path proto.InternalMessageInfo

func (m *Path) GetGtype() string {
	if m != nil {
		return m.Gtype
	}
	return ""
}

func (m *Path) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

type Paths struct {
	Paths                []*Path  `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Paths) Reset()         { *m = Paths{} }
func (m *Paths) String() string { return proto.CompactTextString(m) }
func (*Paths) ProtoMessage()    {}
func (*Paths) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{2}
}

func (m *Paths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paths.Unmarshal(m, b)
}
func (m *Paths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paths.Marshal(b, m, deterministic)
}
func (m *Paths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paths.Merge(m, src)
}
func (m *Paths) XXX_Size() int {
	return xxx_messageInfo_Paths.Size(m)
}
func (m *Paths) XXX_DiscardUnknown() {
	xxx_messageInfo_Paths.DiscardUnknown(m)
}

var xxx_messageInfo_Paths proto.InternalMessageInfo

func (m *Paths) GetPaths() []*Path {
	if m != nil {
		return m.Paths
	}
	return nil
}

type Node struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	CreatedAt            int64           `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64           `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{3}
}

func (m *Node) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Node.Unmarshal(m, b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Node.Marshal(b, m, deterministic)
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return xxx_messageInfo_Node.Size(m)
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Node) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Node) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Node) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type Nodes struct {
	Nodes                []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nodes) Reset()         { *m = Nodes{} }
func (m *Nodes) String() string { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()    {}
func (*Nodes) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{4}
}

func (m *Nodes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nodes.Unmarshal(m, b)
}
func (m *Nodes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nodes.Marshal(b, m, deterministic)
}
func (m *Nodes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nodes.Merge(m, src)
}
func (m *Nodes) XXX_Size() int {
	return xxx_messageInfo_Nodes.Size(m)
}
func (m *Nodes) XXX_DiscardUnknown() {
	xxx_messageInfo_Nodes.DiscardUnknown(m)
}

var xxx_messageInfo_Nodes proto.InternalMessageInfo

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Edge struct {
	Path                 *Path           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Attributes           *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Cascade              Cascade         `protobuf:"varint,4,opt,name=cascade,proto3,enum=api.Cascade" json:"cascade,omitempty"`
	From                 *Path           `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	To                   *Path           `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
	CreatedAt            int64           `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64           `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Edge) Reset()         { *m = Edge{} }
func (m *Edge) String() string { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()    {}
func (*Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{5}
}

func (m *Edge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Edge.Unmarshal(m, b)
}
func (m *Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Edge.Marshal(b, m, deterministic)
}
func (m *Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge.Merge(m, src)
}
func (m *Edge) XXX_Size() int {
	return xxx_messageInfo_Edge.Size(m)
}
func (m *Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Edge proto.InternalMessageInfo

func (m *Edge) GetPath() *Path {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *Edge) GetAttributes() *_struct.Struct {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Edge) GetCascade() Cascade {
	if m != nil {
		return m.Cascade
	}
	return Cascade_CASCADE_NONE
}

func (m *Edge) GetFrom() *Path {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Edge) GetTo() *Path {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Edge) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Edge) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type Edges struct {
	Edges                []*Edge  `protobuf:"bytes,1,rep,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Edges) Reset()         { *m = Edges{} }
func (m *Edges) String() string { return proto.CompactTextString(m) }
func (*Edges) ProtoMessage()    {}
func (*Edges) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{6}
}

func (m *Edges) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Edges.Unmarshal(m, b)
}
func (m *Edges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Edges.Marshal(b, m, deterministic)
}
func (m *Edges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edges.Merge(m, src)
}
func (m *Edges) XXX_Size() int {
	return xxx_messageInfo_Edges.Size(m)
}
func (m *Edges) XXX_DiscardUnknown() {
	xxx_messageInfo_Edges.DiscardUnknown(m)
}

var xxx_messageInfo_Edges proto.InternalMessageInfo

func (m *Edges) GetEdges() []*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type EdgeFilter struct {
	NodePath             *Path    `protobuf:"bytes,1,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
	Gtype                string   `protobuf:"bytes,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Expressions          []string `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxDegree            int32    `protobuf:"varint,5,opt,name=max_degree,json=maxDegree,proto3" json:"max_degree,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EdgeFilter) Reset()         { *m = EdgeFilter{} }
func (m *EdgeFilter) String() string { return proto.CompactTextString(m) }
func (*EdgeFilter) ProtoMessage()    {}
func (*EdgeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{7}
}

func (m *EdgeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EdgeFilter.Unmarshal(m, b)
}
func (m *EdgeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EdgeFilter.Marshal(b, m, deterministic)
}
func (m *EdgeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EdgeFilter.Merge(m, src)
}
func (m *EdgeFilter) XXX_Size() int {
	return xxx_messageInfo_EdgeFilter.Size(m)
}
func (m *EdgeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_EdgeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_EdgeFilter proto.InternalMessageInfo

func (m *EdgeFilter) GetNodePath() *Path {
	if m != nil {
		return m.NodePath
	}
	return nil
}

func (m *EdgeFilter) GetGtype() string {
	if m != nil {
		return m.Gtype
	}
	return ""
}

func (m *EdgeFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *EdgeFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *EdgeFilter) GetMaxDegree() int32 {
	if m != nil {
		return m.MaxDegree
	}
	return 0
}

type TypeFilter struct {
	Gtype                string   `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Expressions          []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeFilter) Reset()         { *m = TypeFilter{} }
func (m *TypeFilter) String() string { return proto.CompactTextString(m) }
func (*TypeFilter) ProtoMessage()    {}
func (*TypeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{8}
}

func (m *TypeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeFilter.Unmarshal(m, b)
}
func (m *TypeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeFilter.Marshal(b, m, deterministic)
}
func (m *TypeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeFilter.Merge(m, src)
}
func (m *TypeFilter) XXX_Size() int {
	return xxx_messageInfo_TypeFilter.Size(m)
}
func (m *TypeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TypeFilter proto.InternalMessageInfo

func (m *TypeFilter) GetGtype() string {
	if m != nil {
		return m.Gtype
	}
	return ""
}

func (m *TypeFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

func (m *TypeFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ChangeFilter struct {
	Expressions          []string `protobuf:"bytes,1,rep,name=expressions,proto3" json:"expressions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeFilter) Reset()         { *m = ChangeFilter{} }
func (m *ChangeFilter) String() string { return proto.CompactTextString(m) }
func (*ChangeFilter) ProtoMessage()    {}
func (*ChangeFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{9}
}

func (m *ChangeFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeFilter.Unmarshal(m, b)
}
func (m *ChangeFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeFilter.Marshal(b, m, deterministic)
}
func (m *ChangeFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeFilter.Merge(m, src)
}
func (m *ChangeFilter) XXX_Size() int {
	return xxx_messageInfo_ChangeFilter.Size(m)
}
func (m *ChangeFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeFilter proto.InternalMessageInfo

func (m *ChangeFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type ChannelFilter struct {
	Channel              string   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Expressions          []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelFilter) Reset()         { *m = ChannelFilter{} }
func (m *ChannelFilter) String() string { return proto.CompactTextString(m) }
func (*ChannelFilter) ProtoMessage()    {}
func (*ChannelFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{10}
}

func (m *ChannelFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelFilter.Unmarshal(m, b)
}
func (m *ChannelFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelFilter.Marshal(b, m, deterministic)
}
func (m *ChannelFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelFilter.Merge(m, src)
}
func (m *ChannelFilter) XXX_Size() int {
	return xxx_messageInfo_ChannelFilter.Size(m)
}
func (m *ChannelFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelFilter proto.InternalMessageInfo

func (m *ChannelFilter) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *ChannelFilter) GetExpressions() []string {
	if m != nil {
		return m.Expressions
	}
	return nil
}

type StateChange struct {
	Op                   Op       `protobuf:"varint,1,opt,name=op,proto3,enum=api.Op" json:"op,omitempty"`
	Log                  *Log     `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateChange) Reset()         { *m = StateChange{} }
func (m *StateChange) String() string { return proto.CompactTextString(m) }
func (*StateChange) ProtoMessage()    {}
func (*StateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{11}
}

func (m *StateChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateChange.Unmarshal(m, b)
}
func (m *StateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateChange.Marshal(b, m, deterministic)
}
func (m *StateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateChange.Merge(m, src)
}
func (m *StateChange) XXX_Size() int {
	return xxx_messageInfo_StateChange.Size(m)
}
func (m *StateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_StateChange.DiscardUnknown(m)
}

var xxx_messageInfo_StateChange proto.InternalMessageInfo

func (m *StateChange) GetOp() Op {
	if m != nil {
		return m.Op
	}
	return Op_CREATE_NODES
}

func (m *StateChange) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *StateChange) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Log struct {
	// Types that are valid to be assigned to Log:
	//	*Log_Node
	//	*Log_Nodes
	//	*Log_Edge
	//	*Log_Edges
	//	*Log_Path
	//	*Log_Paths
	//	*Log_Auth
	//	*Log_Counter
	Log                  isLog_Log `protobuf_oneof:"log"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{12}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

type isLog_Log interface {
	isLog_Log()
}

type Log_Node struct {
	Node *Node `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type Log_Nodes struct {
	Nodes *Nodes `protobuf:"bytes,2,opt,name=nodes,proto3,oneof"`
}

type Log_Edge struct {
	Edge *Edge `protobuf:"bytes,3,opt,name=edge,proto3,oneof"`
}

type Log_Edges struct {
	Edges *Edges `protobuf:"bytes,4,opt,name=edges,proto3,oneof"`
}

type Log_Path struct {
	Path *Path `protobuf:"bytes,5,opt,name=path,proto3,oneof"`
}

type Log_Paths struct {
	Paths *Paths `protobuf:"bytes,6,opt,name=paths,proto3,oneof"`
}

type Log_Auth struct {
	Auth *AuthConfig `protobuf:"bytes,7,opt,name=auth,proto3,oneof"`
}

type Log_Counter struct {
	Counter *Counter `protobuf:"bytes,8,opt,name=counter,proto3,oneof"`
}

func (*Log_Node) isLog_Log() {}

func (*Log_Nodes) isLog_Log() {}

func (*Log_Edge) isLog_Log() {}

func (*Log_Edges) isLog_Log() {}

func (*Log_Path) isLog_Log() {}

func (*Log_Paths) isLog_Log() {}

func (*Log_Auth) isLog_Log() {}

func (*Log_Counter) isLog_Log() {}

func (m *Log) GetLog() isLog_Log {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *Log) GetNode() *Node {
	if x, ok := m.GetLog().(*Log_Node); ok {
		return x.Node
	}
	return nil
}

func (m *Log) GetNodes() *Nodes {
	if x, ok := m.GetLog().(*Log_Nodes); ok {
		return x.Nodes
	}
	return nil
}

func (m *Log) GetEdge() *Edge {
	if x, ok := m.GetLog().(*Log_Edge); ok {
		return x.Edge
	}
	return nil
}

func (m *Log) GetEdges() *Edges {
	if x, ok := m.GetLog().(*Log_Edges); ok {
		return x.Edges
	}
	return nil
}

func (m *Log) GetPath() *Path {
	if x, ok := m.GetLog().(*Log_Path); ok {
		return x.Path
	}
	return nil
}

func (m *Log) GetPaths() *Paths {
	if x, ok := m.GetLog().(*Log_Paths); ok {
		return x.Paths
	}
	return nil
}

func (m *Log) GetAuth() *AuthConfig {
	if x, ok := m.GetLog().(*Log_Auth); ok {
		return x.Auth
	}
	return nil
}

func (m *Log) GetCounter() *Counter {
	if x, ok := m.GetLog().(*Log_Counter); ok {
		return x.Counter
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Log) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Log_Node)(nil),
		(*Log_Nodes)(nil),
		(*Log_Edge)(nil),
		(*Log_Edges)(nil),
		(*Log_Path)(nil),
		(*Log_Paths)(nil),
		(*Log_Auth)(nil),
		(*Log_Counter)(nil),
	}
}

type Export struct {
	Nodes                *Nodes   `protobuf:"bytes,1,opt,name=nodes,proto3" json:"nodes,omitempty"`
	Edges                *Edges   `protobuf:"bytes,2,opt,name=edges,proto3" json:"edges,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Export) Reset()         { *m = Export{} }
func (m *Export) String() string { return proto.CompactTextString(m) }
func (*Export) ProtoMessage()    {}
func (*Export) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{13}
}

func (m *Export) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Export.Unmarshal(m, b)
}
func (m *Export) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Export.Marshal(b, m, deterministic)
}
func (m *Export) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Export.Merge(m, src)
}
func (m *Export) XXX_Size() int {
	return xxx_messageInfo_Export.Size(m)
}
func (m *Export) XXX_DiscardUnknown() {
	xxx_messageInfo_Export.DiscardUnknown(m)
}

var xxx_messageInfo_Export proto.InternalMessageInfo

func (m *Export) GetNodes() *Nodes {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Export) GetEdges() *Edges {
	if m != nil {
		return m.Edges
	}
	return nil
}

type Pong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{14}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RaftNode struct {
	NodeId               string   `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftNode) Reset()         { *m = RaftNode{} }
func (m *RaftNode) String() string { return proto.CompactTextString(m) }
func (*RaftNode) ProtoMessage()    {}
func (*RaftNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{15}
}

func (m *RaftNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftNode.Unmarshal(m, b)
}
func (m *RaftNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftNode.Marshal(b, m, deterministic)
}
func (m *RaftNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftNode.Merge(m, src)
}
func (m *RaftNode) XXX_Size() int {
	return xxx_messageInfo_RaftNode.Size(m)
}
func (m *RaftNode) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftNode.DiscardUnknown(m)
}

var xxx_messageInfo_RaftNode proto.InternalMessageInfo

func (m *RaftNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RaftNode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AuthConfig struct {
	JwksSources          []string `protobuf:"bytes,1,rep,name=jwks_sources,json=jwksSources,proto3" json:"jwks_sources,omitempty"`
	AuthExpressions      []string `protobuf:"bytes,2,rep,name=auth_expressions,json=authExpressions,proto3" json:"auth_expressions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthConfig) Reset()         { *m = AuthConfig{} }
func (m *AuthConfig) String() string { return proto.CompactTextString(m) }
func (*AuthConfig) ProtoMessage()    {}
func (*AuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{16}
}

func (m *AuthConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthConfig.Unmarshal(m, b)
}
func (m *AuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthConfig.Marshal(b, m, deterministic)
}
func (m *AuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthConfig.Merge(m, src)
}
func (m *AuthConfig) XXX_Size() int {
	return xxx_messageInfo_AuthConfig.Size(m)
}
func (m *AuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AuthConfig proto.InternalMessageInfo

func (m *AuthConfig) GetJwksSources() []string {
	if m != nil {
		return m.JwksSources
	}
	return nil
}

func (m *AuthConfig) GetAuthExpressions() []string {
	if m != nil {
		return m.AuthExpressions
	}
	return nil
}

type RaftConfig struct {
	Bind                 string   `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	StoragePath          string   `protobuf:"bytes,2,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	Join                 string   `protobuf:"bytes,3,opt,name=join,proto3" json:"join,omitempty"`
	NodeId               string   `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftConfig) Reset()         { *m = RaftConfig{} }
func (m *RaftConfig) String() string { return proto.CompactTextString(m) }
func (*RaftConfig) ProtoMessage()    {}
func (*RaftConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{17}
}

func (m *RaftConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftConfig.Unmarshal(m, b)
}
func (m *RaftConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftConfig.Marshal(b, m, deterministic)
}
func (m *RaftConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftConfig.Merge(m, src)
}
func (m *RaftConfig) XXX_Size() int {
	return xxx_messageInfo_RaftConfig.Size(m)
}
func (m *RaftConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RaftConfig proto.InternalMessageInfo

func (m *RaftConfig) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

func (m *RaftConfig) GetStoragePath() string {
	if m != nil {
		return m.StoragePath
	}
	return ""
}

func (m *RaftConfig) GetJoin() string {
	if m != nil {
		return m.Join
	}
	return ""
}

func (m *RaftConfig) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

type HTTPConfig struct {
	Bind                 string   `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	AllowedOrigins       []string `protobuf:"bytes,2,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`
	AllowedHeaders       []string `protobuf:"bytes,3,rep,name=allowed_headers,json=allowedHeaders,proto3" json:"allowed_headers,omitempty"`
	AllowedMethods       []string `protobuf:"bytes,4,rep,name=allowed_methods,json=allowedMethods,proto3" json:"allowed_methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPConfig) Reset()         { *m = HTTPConfig{} }
func (m *HTTPConfig) String() string { return proto.CompactTextString(m) }
func (*HTTPConfig) ProtoMessage()    {}
func (*HTTPConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{18}
}

func (m *HTTPConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPConfig.Unmarshal(m, b)
}
func (m *HTTPConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPConfig.Marshal(b, m, deterministic)
}
func (m *HTTPConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPConfig.Merge(m, src)
}
func (m *HTTPConfig) XXX_Size() int {
	return xxx_messageInfo_HTTPConfig.Size(m)
}
func (m *HTTPConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPConfig proto.InternalMessageInfo

func (m *HTTPConfig) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

func (m *HTTPConfig) GetAllowedOrigins() []string {
	if m != nil {
		return m.AllowedOrigins
	}
	return nil
}

func (m *HTTPConfig) GetAllowedHeaders() []string {
	if m != nil {
		return m.AllowedHeaders
	}
	return nil
}

func (m *HTTPConfig) GetAllowedMethods() []string {
	if m != nil {
		return m.AllowedMethods
	}
	return nil
}

type GRPCConfig struct {
	Bind                 string   `protobuf:"bytes,1,opt,name=bind,proto3" json:"bind,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GRPCConfig) Reset()         { *m = GRPCConfig{} }
func (m *GRPCConfig) String() string { return proto.CompactTextString(m) }
func (*GRPCConfig) ProtoMessage()    {}
func (*GRPCConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{19}
}

func (m *GRPCConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GRPCConfig.Unmarshal(m, b)
}
func (m *GRPCConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GRPCConfig.Marshal(b, m, deterministic)
}
func (m *GRPCConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GRPCConfig.Merge(m, src)
}
func (m *GRPCConfig) XXX_Size() int {
	return xxx_messageInfo_GRPCConfig.Size(m)
}
func (m *GRPCConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GRPCConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GRPCConfig proto.InternalMessageInfo

func (m *GRPCConfig) GetBind() string {
	if m != nil {
		return m.Bind
	}
	return ""
}

type Config struct {
	Http                 *HTTPConfig `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Grpc                 *GRPCConfig `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"`
	Raft                 *RaftConfig `protobuf:"bytes,3,opt,name=raft,proto3" json:"raft,omitempty"`
	Auth                 *AuthConfig `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{20}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetHttp() *HTTPConfig {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *Config) GetGrpc() *GRPCConfig {
	if m != nil {
		return m.Grpc
	}
	return nil
}

func (m *Config) GetRaft() *RaftConfig {
	if m != nil {
		return m.Raft
	}
	return nil
}

func (m *Config) GetAuth() *AuthConfig {
	if m != nil {
		return m.Auth
	}
	return nil
}

type RequestIntercept struct {
	FullPath             string          `protobuf:"bytes,1,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	User                 *Node           `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Request              *_struct.Struct `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RequestIntercept) Reset()         { *m = RequestIntercept{} }
func (m *RequestIntercept) String() string { return proto.CompactTextString(m) }
func (*RequestIntercept) ProtoMessage()    {}
func (*RequestIntercept) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{21}
}

func (m *RequestIntercept) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestIntercept.Unmarshal(m, b)
}
func (m *RequestIntercept) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestIntercept.Marshal(b, m, deterministic)
}
func (m *RequestIntercept) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestIntercept.Merge(m, src)
}
func (m *RequestIntercept) XXX_Size() int {
	return xxx_messageInfo_RequestIntercept.Size(m)
}
func (m *RequestIntercept) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestIntercept.DiscardUnknown(m)
}

var xxx_messageInfo_RequestIntercept proto.InternalMessageInfo

func (m *RequestIntercept) GetFullPath() string {
	if m != nil {
		return m.FullPath
	}
	return ""
}

func (m *RequestIntercept) GetUser() *Node {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestIntercept) GetRequest() *_struct.Struct {
	if m != nil {
		return m.Request
	}
	return nil
}

type OutboundMessage struct {
	Channel              string          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *OutboundMessage) Reset()         { *m = OutboundMessage{} }
func (m *OutboundMessage) String() string { return proto.CompactTextString(m) }
func (*OutboundMessage) ProtoMessage()    {}
func (*OutboundMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{22}
}

func (m *OutboundMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutboundMessage.Unmarshal(m, b)
}
func (m *OutboundMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutboundMessage.Marshal(b, m, deterministic)
}
func (m *OutboundMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundMessage.Merge(m, src)
}
func (m *OutboundMessage) XXX_Size() int {
	return xxx_messageInfo_OutboundMessage.Size(m)
}
func (m *OutboundMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundMessage proto.InternalMessageInfo

func (m *OutboundMessage) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *OutboundMessage) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	Channel              string          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Data                 *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Sender               *Path           `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Timestamp            int64           `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_063490d3009de3e6, []int{23}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Message) GetData() *_struct.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetSender() *Path {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *Message) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("api.Op", Op_name, Op_value)
	proto.RegisterEnum("api.Cascade", Cascade_name, Cascade_value)
	proto.RegisterEnum("api.Keyword", Keyword_name, Keyword_value)
	proto.RegisterType((*Counter)(nil), "api.Counter")
	proto.RegisterType((*Path)(nil), "api.Path")
	proto.RegisterType((*Paths)(nil), "api.Paths")
	proto.RegisterType((*Node)(nil), "api.Node")
	proto.RegisterType((*Nodes)(nil), "api.Nodes")
	proto.RegisterType((*Edge)(nil), "api.Edge")
	proto.RegisterType((*Edges)(nil), "api.Edges")
	proto.RegisterType((*EdgeFilter)(nil), "api.EdgeFilter")
	proto.RegisterType((*TypeFilter)(nil), "api.TypeFilter")
	proto.RegisterType((*ChangeFilter)(nil), "api.ChangeFilter")
	proto.RegisterType((*ChannelFilter)(nil), "api.ChannelFilter")
	proto.RegisterType((*StateChange)(nil), "api.StateChange")
	proto.RegisterType((*Log)(nil), "api.Log")
	proto.RegisterType((*Export)(nil), "api.Export")
	proto.RegisterType((*Pong)(nil), "api.Pong")
	proto.RegisterType((*RaftNode)(nil), "api.RaftNode")
	proto.RegisterType((*AuthConfig)(nil), "api.AuthConfig")
	proto.RegisterType((*RaftConfig)(nil), "api.RaftConfig")
	proto.RegisterType((*HTTPConfig)(nil), "api.HTTPConfig")
	proto.RegisterType((*GRPCConfig)(nil), "api.GRPCConfig")
	proto.RegisterType((*Config)(nil), "api.Config")
	proto.RegisterType((*RequestIntercept)(nil), "api.RequestIntercept")
	proto.RegisterType((*OutboundMessage)(nil), "api.OutboundMessage")
	proto.RegisterType((*Message)(nil), "api.Message")
}

func init() { proto.RegisterFile("api/graphik.proto", fileDescriptor_063490d3009de3e6) }

var fileDescriptor_063490d3009de3e6 = []byte{
	// 1574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4d, 0x77, 0xda, 0xcc,
	0x15, 0x46, 0x20, 0x10, 0x5c, 0x1c, 0x5b, 0x99, 0x93, 0xd3, 0x10, 0x92, 0x1c, 0x3b, 0x4a, 0x9a,
	0x38, 0x6e, 0xea, 0x24, 0x6e, 0x4f, 0x73, 0xba, 0xe8, 0x82, 0x00, 0xfe, 0x68, 0xfc, 0x41, 0x05,
	0xee, 0x69, 0xb3, 0xa1, 0x02, 0x8d, 0x85, 0x12, 0x40, 0xaa, 0x34, 0x6a, 0xec, 0x65, 0x7f, 0x42,
	0xd7, 0xed, 0xa6, 0xfb, 0xfc, 0xa1, 0xee, 0xfa, 0x4b, 0xde, 0xf3, 0x9e, 0x3b, 0x33, 0x42, 0x83,
	0x8c, 0xed, 0xcd, 0xfb, 0xee, 0x66, 0x9e, 0xfb, 0xf0, 0xdc, 0x0f, 0xdd, 0x3b, 0x33, 0xc0, 0x7d,
	0x27, 0xf4, 0xdf, 0x7a, 0x91, 0x13, 0x4e, 0xfc, 0xaf, 0xbb, 0x61, 0x14, 0xb0, 0x80, 0x94, 0x9c,
	0xd0, 0x6f, 0x3e, 0xf1, 0x82, 0xc0, 0x9b, 0xd2, 0xb7, 0x1c, 0x1a, 0x25, 0x17, 0x6f, 0x63, 0x16,
	0x25, 0x63, 0x26, 0x28, 0xcd, 0xcd, 0xbc, 0x95, 0xf9, 0x33, 0x1a, 0x33, 0x67, 0x16, 0x4a, 0xc2,
	0xa3, 0x3c, 0xc1, 0x99, 0x5f, 0x49, 0xd3, 0xe3, 0xbc, 0x89, 0xce, 0x42, 0x26, 0x8d, 0xd6, 0x26,
	0x18, 0xed, 0x20, 0x99, 0x33, 0x1a, 0x91, 0x07, 0x50, 0x1e, 0xe3, 0xb2, 0xa1, 0x6d, 0x69, 0xdb,
	0x25, 0x5b, 0x6c, 0xac, 0x5d, 0xd0, 0x7b, 0x0e, 0x9b, 0xa0, 0xd5, 0x63, 0x57, 0x21, 0xe5, 0xd6,
	0x9a, 0x2d, 0x36, 0xc4, 0x84, 0x92, 0xe7, 0xbb, 0x8d, 0x22, 0xc7, 0x70, 0x69, 0x6d, 0x43, 0x19,
	0xf9, 0x31, 0xd9, 0x84, 0x72, 0x88, 0x8b, 0x86, 0xb6, 0x55, 0xda, 0xae, 0xef, 0xd5, 0x76, 0x9d,
	0xd0, 0xdf, 0x45, 0x93, 0x2d, 0x70, 0xeb, 0x3f, 0x1a, 0xe8, 0xa7, 0x81, 0x4b, 0xc9, 0x53, 0xd0,
	0x11, 0xe1, 0xca, 0x4b, 0x44, 0x0e, 0x93, 0x0f, 0x00, 0x0e, 0x63, 0x91, 0x3f, 0x4a, 0x18, 0x8d,
	0x1b, 0x25, 0x4e, 0x7a, 0xb8, 0x2b, 0x92, 0xda, 0x4d, 0x93, 0xda, 0xed, 0xf3, 0x72, 0xd9, 0x0a,
	0x95, 0x3c, 0x05, 0x18, 0x47, 0xd4, 0x61, 0xd4, 0x1d, 0x3a, 0xac, 0xa1, 0xf3, 0xac, 0x6a, 0x12,
	0x69, 0x31, 0x34, 0x27, 0xa1, 0x9b, 0x9a, 0xcb, 0xc2, 0x2c, 0x91, 0x16, 0xc3, 0x44, 0x30, 0x3a,
	0x9e, 0xc8, 0x1c, 0x17, 0x4b, 0x89, 0xa0, 0xc9, 0x16, 0xb8, 0xf5, 0x83, 0x06, 0x7a, 0xd7, 0xf5,
	0x7e, 0xbe, 0x44, 0x5e, 0x82, 0x31, 0x76, 0xe2, 0xb1, 0xe3, 0x52, 0x9e, 0xc5, 0xfa, 0xde, 0x1a,
	0x97, 0x6e, 0x0b, 0xcc, 0x4e, 0x8d, 0xe8, 0xff, 0x22, 0x0a, 0x66, 0x3c, 0x97, 0x65, 0xff, 0x08,
	0x93, 0x47, 0x50, 0x64, 0x41, 0xa3, 0x92, 0x37, 0x16, 0x59, 0x90, 0x2b, 0x15, 0xdc, 0x5e, 0xaa,
	0xfa, 0x8a, 0x52, 0x61, 0xfe, 0xbc, 0x54, 0x14, 0x17, 0x4b, 0xa5, 0x42, 0x93, 0x2d, 0x70, 0xeb,
	0xbf, 0x1a, 0x00, 0xee, 0xf7, 0xfd, 0x29, 0xb6, 0xdc, 0x4b, 0xa8, 0x61, 0x09, 0x87, 0xab, 0xab,
	0x56, 0x45, 0xdb, 0x72, 0xf3, 0x15, 0xd5, 0xe6, 0xdb, 0x82, 0x3a, 0xbd, 0x0c, 0x23, 0x1a, 0xc7,
	0x7e, 0x30, 0xc7, 0x82, 0x96, 0xb6, 0x6b, 0xb6, 0x0a, 0xe1, 0xef, 0xa6, 0xfe, 0xcc, 0x17, 0x1f,
	0xbf, 0x6c, 0x8b, 0x0d, 0x66, 0x33, 0x73, 0x2e, 0x87, 0x2e, 0xf5, 0x22, 0x4a, 0x79, 0xb1, 0xca,
	0x76, 0x6d, 0xe6, 0x5c, 0x76, 0x38, 0x60, 0x7d, 0x06, 0x18, 0x5c, 0x85, 0x69, 0x88, 0xab, 0xfb,
	0x3e, 0xe7, 0xba, 0x78, 0x8b, 0xeb, 0x92, 0xe2, 0xda, 0x7a, 0x07, 0x6b, 0xed, 0x89, 0x33, 0x5f,
	0x14, 0x20, 0xa7, 0xa3, 0x5d, 0xd3, 0xb1, 0x3e, 0xc1, 0x3d, 0xfc, 0xc5, 0x9c, 0x4e, 0xe5, 0x4f,
	0x1a, 0x60, 0x8c, 0x05, 0x20, 0x43, 0x4a, 0xb7, 0x77, 0x07, 0x65, 0xfd, 0x0d, 0xea, 0x7d, 0xe6,
	0x30, 0x2a, 0x62, 0x20, 0x0f, 0xa1, 0x18, 0x84, 0x5c, 0x65, 0x7d, 0xcf, 0xe0, 0x75, 0x3f, 0x0b,
	0xed, 0x62, 0x10, 0x92, 0x26, 0x94, 0xa6, 0x81, 0xc7, 0xab, 0x5d, 0xdf, 0xab, 0x72, 0xcb, 0x71,
	0xe0, 0xd9, 0x08, 0x92, 0x27, 0x50, 0x5b, 0x1c, 0x3e, 0x3c, 0xb9, 0x92, 0x9d, 0x01, 0xd6, 0xf7,
	0x22, 0x94, 0x8e, 0x03, 0x8f, 0x6c, 0x82, 0x8e, 0x5f, 0x6f, 0xe9, 0xa3, 0xe2, 0xcc, 0x1c, 0x16,
	0x6c, 0x6e, 0x20, 0x56, 0x3a, 0x55, 0xc2, 0x09, 0x2c, 0x18, 0xf1, 0x61, 0x41, 0x0e, 0x16, 0x8a,
	0x60, 0xdb, 0xc8, 0x51, 0xc9, 0xba, 0x09, 0x45, 0xd0, 0x80, 0x22, 0xa2, 0xdf, 0x74, 0x45, 0x84,
	0xb7, 0x22, 0x8a, 0x50, 0xd9, 0x93, 0x62, 0x28, 0xf3, 0x43, 0x81, 0x22, 0x7c, 0x2c, 0xad, 0xf4,
	0xa0, 0xaa, 0x28, 0x22, 0xfc, 0x0c, 0x43, 0x11, 0x6e, 0x22, 0xbf, 0x04, 0xdd, 0x49, 0xd8, 0xa4,
	0x61, 0x70, 0xca, 0x06, 0xa7, 0xb4, 0x12, 0x36, 0x69, 0x07, 0xf3, 0x0b, 0xdf, 0x43, 0x29, 0x34,
	0x93, 0x6d, 0x30, 0xc6, 0xe2, 0x34, 0x6d, 0x54, 0x39, 0x53, 0x0e, 0xaa, 0xc0, 0x0e, 0x0b, 0x76,
	0x6a, 0xfe, 0x58, 0xe6, 0x15, 0xb6, 0x8e, 0xa1, 0xd2, 0xbd, 0x0c, 0x83, 0x88, 0x91, 0xad, 0xec,
	0x94, 0xc9, 0xd5, 0x23, 0xad, 0xc6, 0x56, 0x9a, 0x6c, 0x31, 0x9f, 0x6c, 0x3a, 0x5d, 0x5b, 0xa0,
	0xf7, 0x82, 0xb9, 0x87, 0x2d, 0x32, 0xa3, 0x71, 0xec, 0x78, 0x69, 0xd7, 0xa6, 0x5b, 0xeb, 0x0f,
	0x50, 0xb5, 0x9d, 0x0b, 0xc6, 0x8f, 0xdd, 0x87, 0x60, 0xf0, 0xe1, 0xf3, 0x5d, 0xc9, 0xaa, 0xe0,
	0xf6, 0xc8, 0xc5, 0x9f, 0x3b, 0xae, 0x8b, 0x4d, 0x23, 0xe7, 0x2d, 0xdd, 0xe2, 0x68, 0x64, 0x59,
	0x93, 0x67, 0xb0, 0xf6, 0xe5, 0xdb, 0xd7, 0x78, 0x18, 0x07, 0x49, 0x34, 0xa6, 0x8b, 0xee, 0x45,
	0xac, 0x2f, 0x20, 0xf2, 0x1a, 0x4c, 0x2c, 0xcc, 0xf0, 0x7a, 0x5f, 0x6e, 0x20, 0xde, 0x55, 0x7a,
	0x33, 0x04, 0xc0, 0xd0, 0xa4, 0x36, 0x01, 0x7d, 0xe4, 0xcf, 0xd3, 0xc8, 0xf8, 0x1a, 0xfd, 0xc5,
	0x2c, 0x88, 0x1c, 0x4f, 0x1e, 0x18, 0x22, 0xb8, 0xba, 0xc4, 0xf8, 0x41, 0x41, 0x40, 0xff, 0x12,
	0xf8, 0x73, 0xde, 0x31, 0x35, 0x9b, 0xaf, 0xd5, 0x3c, 0x75, 0x35, 0x4f, 0xeb, 0xdf, 0x1a, 0xc0,
	0xe1, 0x60, 0xd0, 0xbb, 0xc5, 0xe5, 0x2b, 0xd8, 0x70, 0xa6, 0xd3, 0xe0, 0x1b, 0x75, 0x87, 0x41,
	0xe4, 0x7b, 0xfe, 0x22, 0xfc, 0x75, 0x09, 0x9f, 0x09, 0x54, 0x25, 0x4e, 0xa8, 0xe3, 0xd2, 0x28,
	0x3d, 0x8f, 0x52, 0xe2, 0xa1, 0x40, 0x55, 0xe2, 0x8c, 0xb2, 0x49, 0xe0, 0x62, 0xf3, 0xaa, 0xc4,
	0x13, 0x81, 0x5a, 0x5b, 0x00, 0x07, 0x76, 0xaf, 0x7d, 0x73, 0x70, 0x78, 0x81, 0x56, 0xa4, 0xf9,
	0x39, 0xe8, 0x13, 0xc6, 0x42, 0xd9, 0x3c, 0xa2, 0x3f, 0xb3, 0xd4, 0x6c, 0x6e, 0x44, 0x92, 0x17,
	0x85, 0x63, 0xd9, 0x3f, 0x82, 0x94, 0xb9, 0xb0, 0xb9, 0x11, 0x49, 0x91, 0x73, 0xc1, 0xe4, 0xcc,
	0x09, 0x52, 0xf6, 0x5d, 0x6c, 0x6e, 0x44, 0x12, 0x1f, 0x07, 0x7d, 0xe5, 0x38, 0x88, 0x61, 0xb0,
	0xfe, 0xa9, 0x81, 0x69, 0xd3, 0xbf, 0x27, 0x34, 0x66, 0x47, 0xd8, 0xf3, 0x63, 0x1a, 0x32, 0xf2,
	0x18, 0x6a, 0x17, 0xc9, 0x74, 0x9a, 0x9d, 0xf8, 0x35, 0xbb, 0x8a, 0x00, 0xff, 0x7a, 0x4f, 0x41,
	0x4f, 0x62, 0x1a, 0xc9, 0x00, 0x95, 0x8b, 0x96, 0xc3, 0xe4, 0x3d, 0x18, 0x91, 0xd0, 0xbb, 0xeb,
	0xf2, 0x4c, 0x79, 0xd6, 0x5f, 0x60, 0xe3, 0x2c, 0x61, 0xa3, 0x20, 0x99, 0xbb, 0x27, 0x62, 0x04,
	0x6e, 0x39, 0x3f, 0x7f, 0x05, 0xba, 0xeb, 0x30, 0x47, 0xba, 0xbf, 0x51, 0x9c, 0x93, 0xac, 0x7f,
	0x69, 0x60, 0xfc, 0xb4, 0x92, 0xe4, 0x19, 0x54, 0x62, 0x3a, 0x77, 0x69, 0xb4, 0x74, 0xe0, 0xf1,
	0xab, 0x50, 0x1a, 0x96, 0x0f, 0x5f, 0x3d, 0x77, 0xf8, 0xee, 0xfc, 0x5f, 0x83, 0xe2, 0x59, 0x48,
	0x4c, 0x58, 0x6b, 0xdb, 0xdd, 0xd6, 0xa0, 0x3b, 0x3c, 0x3d, 0xeb, 0x74, 0xfb, 0x66, 0x81, 0x6c,
	0x40, 0x5d, 0x41, 0x4c, 0x0d, 0x81, 0x5e, 0x6b, 0xd0, 0x3e, 0x94, 0x8c, 0x22, 0x59, 0x07, 0xc8,
	0x00, 0xb3, 0x84, 0x1a, 0x9d, 0xee, 0x71, 0x77, 0xa1, 0xa1, 0xe3, 0x4f, 0x14, 0xc4, 0x2c, 0x2b,
	0x6e, 0xba, 0x9d, 0x83, 0x6e, 0xdf, 0xac, 0x28, 0x6e, 0x10, 0x31, 0x8d, 0xcc, 0x8d, 0x60, 0x54,
	0x33, 0x37, 0x9c, 0x50, 0x53, 0xdc, 0x08, 0x06, 0x28, 0x6e, 0x38, 0xa5, 0x4e, 0xd6, 0xa0, 0xda,
	0xef, 0x0e, 0x86, 0xad, 0xf3, 0xc1, 0xa1, 0xb9, 0xb6, 0xf3, 0x27, 0x30, 0xe4, 0xb3, 0x87, 0xfb,
	0x6f, 0xf5, 0xdb, 0xad, 0x0e, 0x46, 0x74, 0xda, 0x35, 0x0b, 0x2a, 0xb2, 0x6f, 0x9f, 0x9d, 0x98,
	0x1a, 0xfa, 0x4b, 0x91, 0xc1, 0x99, 0x59, 0x24, 0x04, 0xd6, 0xd3, 0xfd, 0xc9, 0xf9, 0xe0, 0xbc,
	0x75, 0x6c, 0x96, 0x76, 0xde, 0x80, 0xf1, 0x89, 0x5e, 0x7d, 0x0b, 0x22, 0x97, 0xd4, 0xc1, 0x38,
	0x3a, 0xfd, 0x73, 0xeb, 0xf8, 0xa8, 0x63, 0x16, 0x88, 0x01, 0xa5, 0xd6, 0xe9, 0x5f, 0x4d, 0x0d,
	0xd1, 0x4e, 0x77, 0xbf, 0x75, 0x7e, 0x3c, 0x30, 0x8b, 0x7b, 0xff, 0xd3, 0xe0, 0x9e, 0x68, 0xf3,
	0x3e, 0x8d, 0xfe, 0xe1, 0x8f, 0x29, 0x7e, 0xe3, 0x9e, 0x3f, 0xf7, 0xc8, 0x2f, 0xae, 0x7d, 0xdd,
	0x2e, 0x3e, 0xb4, 0x9b, 0xf2, 0x33, 0x06, 0x73, 0xcf, 0x2a, 0x90, 0xdf, 0x41, 0xfd, 0x8f, 0x81,
	0x3f, 0x6f, 0x4f, 0x93, 0x18, 0x2f, 0xf3, 0x7b, 0x8b, 0xf9, 0xc2, 0x3e, 0x6f, 0xde, 0x20, 0x61,
	0x15, 0xc8, 0x6f, 0xc1, 0x38, 0xa0, 0x0c, 0x67, 0xec, 0x46, 0x3f, 0xf9, 0x31, 0xb4, 0x0a, 0xe4,
	0xd7, 0x60, 0xf4, 0xe5, 0xaf, 0xf2, 0xd6, 0x15, 0xf4, 0xbd, 0xef, 0x06, 0xac, 0x1d, 0xe0, 0x5f,
	0x93, 0x34, 0xb5, 0xd7, 0x50, 0x3c, 0xa1, 0x77, 0x24, 0x86, 0x81, 0x5b, 0x05, 0xf2, 0x02, 0xa0,
	0xcd, 0xdf, 0x8b, 0xfc, 0x6e, 0xc9, 0x4c, 0xcb, 0xac, 0x57, 0x50, 0xcf, 0x58, 0x31, 0x51, 0x6e,
	0xb9, 0xa6, 0xb2, 0xb6, 0x0a, 0xe4, 0x19, 0xcf, 0x57, 0xd1, 0xc2, 0x31, 0x58, 0xd6, 0x7a, 0x03,
	0xf5, 0x3e, 0x75, 0xa2, 0xf1, 0x44, 0x68, 0x89, 0x7c, 0xb2, 0x97, 0x5b, 0x4e, 0xf0, 0x39, 0xd4,
	0x7a, 0x0e, 0x13, 0xe4, 0x1b, 0xc3, 0x7b, 0x09, 0xb0, 0x20, 0xdd, 0x16, 0xdd, 0x0b, 0x30, 0x3a,
	0x74, 0x9a, 0x8f, 0x6e, 0xe9, 0xb2, 0xe7, 0x6a, 0x55, 0xc9, 0x4a, 0xb5, 0xf8, 0xab, 0xe2, 0x1a,
	0x6f, 0x51, 0x3a, 0xfe, 0x27, 0x22, 0x7b, 0xe6, 0x34, 0xb3, 0xa5, 0x5a, 0x3a, 0xf1, 0xd4, 0x56,
	0xae, 0xff, 0xa6, 0xb2, 0x5e, 0x94, 0x4e, 0xd1, 0x52, 0x4a, 0x27, 0xb5, 0x16, 0xa5, 0x13, 0x5a,
	0x37, 0x94, 0x2e, 0x15, 0x4c, 0x4b, 0x77, 0x6b, 0x78, 0x69, 0xe9, 0xee, 0x8a, 0x4e, 0x94, 0x2e,
	0x1f, 0xdd, 0xea, 0xd2, 0xa9, 0x5a, 0xab, 0x4b, 0xb7, 0x03, 0x35, 0x4e, 0xda, 0xc7, 0xff, 0x37,
	0x1b, 0x0b, 0x47, 0x2b, 0xd3, 0xd8, 0x06, 0x83, 0x2f, 0x07, 0xc1, 0x5d, 0xcc, 0x0f, 0xe9, 0x2b,
	0xbd, 0xcf, 0x22, 0xea, 0xcc, 0xc8, 0x7d, 0xe1, 0x55, 0x79, 0xb8, 0x37, 0x4d, 0x0e, 0x29, 0x8f,
	0x69, 0xab, 0xf0, 0x4e, 0x23, 0xbf, 0x07, 0xa3, 0x97, 0x8c, 0xa6, 0x7e, 0x3c, 0x21, 0x0f, 0xc4,
	0x7b, 0x7a, 0xf9, 0xf2, 0xb9, 0x65, 0xc0, 0xdf, 0x43, 0xad, 0x9f, 0x8c, 0xe2, 0x71, 0xe4, 0x8f,
	0x28, 0x21, 0x0b, 0x87, 0x8b, 0x77, 0xbf, 0x4c, 0x5d, 0x0a, 0xa1, 0xb7, 0x8f, 0xc6, 0xe7, 0xb2,
	0x13, 0xfa, 0xe1, 0x68, 0x54, 0xe1, 0x6a, 0xbf, 0xf9, 0x31, 0x00, 0x00, 0xff, 0xff, 0x80, 0x48,
	0xdf, 0x81, 0x5c, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigServiceClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	JoinCluster(ctx context.Context, in *RaftNode, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAuth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthConfig, error)
	SetAuth(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*AuthConfig, error)
}

type configServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigServiceClient(cc *grpc.ClientConn) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.ConfigService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) JoinCluster(ctx context.Context, in *RaftNode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.ConfigService/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetAuth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AuthConfig, error) {
	out := new(AuthConfig)
	err := c.cc.Invoke(ctx, "/api.ConfigService/GetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) SetAuth(ctx context.Context, in *AuthConfig, opts ...grpc.CallOption) (*AuthConfig, error) {
	out := new(AuthConfig)
	err := c.cc.Invoke(ctx, "/api.ConfigService/SetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
type ConfigServiceServer interface {
	Ping(context.Context, *empty.Empty) (*Pong, error)
	JoinCluster(context.Context, *RaftNode) (*empty.Empty, error)
	GetAuth(context.Context, *empty.Empty) (*AuthConfig, error)
	SetAuth(context.Context, *AuthConfig) (*AuthConfig, error)
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).JoinCluster(ctx, req.(*RaftNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/GetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetAuth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_SetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ConfigService/SetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SetAuth(ctx, req.(*AuthConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ConfigService_Ping_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _ConfigService_JoinCluster_Handler,
		},
		{
			MethodName: "GetAuth",
			Handler:    _ConfigService_GetAuth_Handler,
		},
		{
			MethodName: "SetAuth",
			Handler:    _ConfigService_SetAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/graphik.proto",
}

// GraphServiceClient is the client API for GraphService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphServiceClient interface {
	Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error)
	CreateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	CreateNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error)
	GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error)
	SearchNodes(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Nodes, error)
	PatchNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	PatchNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error)
	DelNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error)
	DelNodes(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error)
	CreateEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	CreateEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error)
	GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error)
	SearchEdges(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Edges, error)
	PatchEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error)
	PatchEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error)
	DelEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error)
	DelEdges(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error)
	EdgesFrom(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error)
	EdgesTo(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error)
	ChangeStream(ctx context.Context, in *ChangeFilter, opts ...grpc.CallOption) (GraphService_ChangeStreamClient, error)
	Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	Subscribe(ctx context.Context, in *ChannelFilter, opts ...grpc.CallOption) (GraphService_SubscribeClient, error)
}

type graphServiceClient struct {
	cc *grpc.ClientConn
}

func NewGraphServiceClient(cc *grpc.ClientConn) GraphServiceClient {
	return &graphServiceClient{cc}
}

func (c *graphServiceClient) Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchNodes(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNode(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchNodes(ctx context.Context, in *Nodes, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelNode(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelNodes(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) CreateEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/CreateEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) GetEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/GetEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) SearchEdges(ctx context.Context, in *TypeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/SearchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdge(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*Edge, error) {
	out := new(Edge)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) PatchEdges(ctx context.Context, in *Edges, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/PatchEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelEdge(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) DelEdges(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*Counter, error) {
	out := new(Counter)
	err := c.cc.Invoke(ctx, "/api.GraphService/DelEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) EdgesFrom(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/EdgesFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) EdgesTo(ctx context.Context, in *EdgeFilter, opts ...grpc.CallOption) (*Edges, error) {
	out := new(Edges)
	err := c.cc.Invoke(ctx, "/api.GraphService/EdgesTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) ChangeStream(ctx context.Context, in *ChangeFilter, opts ...grpc.CallOption) (GraphService_ChangeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GraphService_serviceDesc.Streams[0], "/api.GraphService/ChangeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphServiceChangeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphService_ChangeStreamClient interface {
	Recv() (*StateChange, error)
	grpc.ClientStream
}

type graphServiceChangeStreamClient struct {
	grpc.ClientStream
}

func (x *graphServiceChangeStreamClient) Recv() (*StateChange, error) {
	m := new(StateChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphServiceClient) Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.GraphService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphServiceClient) Subscribe(ctx context.Context, in *ChannelFilter, opts ...grpc.CallOption) (GraphService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GraphService_serviceDesc.Streams[1], "/api.GraphService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type graphServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *graphServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphServiceServer is the server API for GraphService service.
type GraphServiceServer interface {
	Me(context.Context, *empty.Empty) (*Node, error)
	CreateNode(context.Context, *Node) (*Node, error)
	CreateNodes(context.Context, *Nodes) (*Nodes, error)
	GetNode(context.Context, *Path) (*Node, error)
	SearchNodes(context.Context, *TypeFilter) (*Nodes, error)
	PatchNode(context.Context, *Node) (*Node, error)
	PatchNodes(context.Context, *Nodes) (*Nodes, error)
	DelNode(context.Context, *Path) (*Counter, error)
	DelNodes(context.Context, *Paths) (*Counter, error)
	CreateEdge(context.Context, *Edge) (*Edge, error)
	CreateEdges(context.Context, *Edges) (*Edges, error)
	GetEdge(context.Context, *Path) (*Edge, error)
	SearchEdges(context.Context, *TypeFilter) (*Edges, error)
	PatchEdge(context.Context, *Edge) (*Edge, error)
	PatchEdges(context.Context, *Edges) (*Edges, error)
	DelEdge(context.Context, *Path) (*Counter, error)
	DelEdges(context.Context, *Paths) (*Counter, error)
	EdgesFrom(context.Context, *EdgeFilter) (*Edges, error)
	EdgesTo(context.Context, *EdgeFilter) (*Edges, error)
	ChangeStream(*ChangeFilter, GraphService_ChangeStreamServer) error
	Publish(context.Context, *OutboundMessage) (*empty.Empty, error)
	Subscribe(*ChannelFilter, GraphService_SubscribeServer) error
}

func RegisterGraphServiceServer(s *grpc.Server, srv GraphServiceServer) {
	s.RegisterService(&_GraphService_serviceDesc, srv)
}

func _GraphService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Me(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateNodes(ctx, req.(*Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchNodes(ctx, req.(*TypeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNode(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nodes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchNodes(ctx, req.(*Nodes))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelNode(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelNodes(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_CreateEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).CreateEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/CreateEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).CreateEdges(ctx, req.(*Edges))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_GetEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).GetEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/GetEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).GetEdge(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_SearchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).SearchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/SearchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).SearchEdges(ctx, req.(*TypeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdge(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_PatchEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).PatchEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/PatchEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).PatchEdges(ctx, req.(*Edges))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelEdge(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_DelEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).DelEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/DelEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).DelEdges(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_EdgesFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).EdgesFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/EdgesFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).EdgesFrom(ctx, req.(*EdgeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_EdgesTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).EdgesTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/EdgesTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).EdgesTo(ctx, req.(*EdgeFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_ChangeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangeFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServiceServer).ChangeStream(m, &graphServiceChangeStreamServer{stream})
}

type GraphService_ChangeStreamServer interface {
	Send(*StateChange) error
	grpc.ServerStream
}

type graphServiceChangeStreamServer struct {
	grpc.ServerStream
}

func (x *graphServiceChangeStreamServer) Send(m *StateChange) error {
	return x.ServerStream.SendMsg(m)
}

func _GraphService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServiceServer).Publish(ctx, req.(*OutboundMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServiceServer).Subscribe(m, &graphServiceSubscribeServer{stream})
}

type GraphService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type graphServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *graphServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _GraphService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GraphService",
	HandlerType: (*GraphServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Me",
			Handler:    _GraphService_Me_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _GraphService_CreateNode_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _GraphService_CreateNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _GraphService_GetNode_Handler,
		},
		{
			MethodName: "SearchNodes",
			Handler:    _GraphService_SearchNodes_Handler,
		},
		{
			MethodName: "PatchNode",
			Handler:    _GraphService_PatchNode_Handler,
		},
		{
			MethodName: "PatchNodes",
			Handler:    _GraphService_PatchNodes_Handler,
		},
		{
			MethodName: "DelNode",
			Handler:    _GraphService_DelNode_Handler,
		},
		{
			MethodName: "DelNodes",
			Handler:    _GraphService_DelNodes_Handler,
		},
		{
			MethodName: "CreateEdge",
			Handler:    _GraphService_CreateEdge_Handler,
		},
		{
			MethodName: "CreateEdges",
			Handler:    _GraphService_CreateEdges_Handler,
		},
		{
			MethodName: "GetEdge",
			Handler:    _GraphService_GetEdge_Handler,
		},
		{
			MethodName: "SearchEdges",
			Handler:    _GraphService_SearchEdges_Handler,
		},
		{
			MethodName: "PatchEdge",
			Handler:    _GraphService_PatchEdge_Handler,
		},
		{
			MethodName: "PatchEdges",
			Handler:    _GraphService_PatchEdges_Handler,
		},
		{
			MethodName: "DelEdge",
			Handler:    _GraphService_DelEdge_Handler,
		},
		{
			MethodName: "DelEdges",
			Handler:    _GraphService_DelEdges_Handler,
		},
		{
			MethodName: "EdgesFrom",
			Handler:    _GraphService_EdgesFrom_Handler,
		},
		{
			MethodName: "EdgesTo",
			Handler:    _GraphService_EdgesTo_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _GraphService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChangeStream",
			Handler:       _GraphService_ChangeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _GraphService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/graphik.proto",
}
