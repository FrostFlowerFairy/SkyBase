syntax = "proto3";

package api;

option go_package = "apipb";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "go-proto-validators/validator.proto";

// Timing describes timing
enum Timing {
  BEFORE =0;
  AFTER =1;
}

// Cascade describes how connected nodes will behave when one is deleted
enum Cascade {
  // no cascade
  CASCADE_NONE =0;
  // the source node in the connection will be deleted if the destination is deleted
  CASCADE_FROM =1;
  // the destination node in the connection will be deleted if the source node is
  CASCADE_TO=2;
  // if either node is deleted, both will be deleted
  CASCADE_MUTUAL=3;
}

// Path describes a node/edge type & id
message Path {
  string gtype =1 [(validator.field) = {regex : "^.{1,225}$"}];
  string gid =2;
}

message Metadata {
  int64 created_at =1;
  int64 updated_at =2;
  Path updated_by =3;
  uint64 sequence =4;
}

// Paths is an array of paths
message Paths {
  repeated Path paths =1;
}

// Node is a Graph primitive representing a single entity/resource. It is connected to other nodes via Edges
message Node {
  Path path =1;
  google.protobuf.Struct attributes =2;
  Metadata metadata =3;
}

// NodeConstructor is used to create a node
message NodeConstructor {
  Path path =1 [(validator.field) = {msg_exists : true}];
  google.protobuf.Struct attributes =3;
}

// NodeConstructor is used to create a batch of nodes
message NodeConstructors {
  repeated NodeConstructor nodes =1;
}

// Nodes is an array of nodes
message Nodes {
  repeated Node nodes =1;
}

// NodeDetail is a node with its connected edges
message NodeDetail {
  Path path =1;
  google.protobuf.Struct attributes =2;
  EdgeDetails edges_from =3;
  EdgeDetails edges_to =4;
  Metadata metadata =5;
}

// NodeDetails is an array of NodeDetail
message NodeDetails {
  repeated NodeDetail node_details =1;
}

// NodeDetailFilter is used to fetch node details
message NodeDetailFilter {
  Path path =1;
  Filter edges_from =2;
  Filter edges_to =3;
}

// Edge is a graph primitive that represents a relationship between two nodes
message Edge {
  Path path =1;
  google.protobuf.Struct attributes =2;
  Cascade cascade =3;
  Path from =4;
  Path to =5;
  Metadata metadata =6;
}

// EdgeConstructor is used to create an Edge
message EdgeConstructor {
  Path path =1 [(validator.field) = {msg_exists : true}];
  google.protobuf.Struct attributes =3;
  Cascade cascade =4;
  Path from =5 [(validator.field) = {msg_exists : true}];
  Path to =6 [(validator.field) = {msg_exists : true}];
}

// EdgeConstructors is an array of EdgeConstructor
message EdgeConstructors {
  repeated EdgeConstructor edges =1;
}

// Edges is an array of Edge
message Edges {
  repeated Edge edges =1;
}

// EdgeDetail is an edge with both of it's connected nodes fully loaded
message EdgeDetail {
  Path path =1;
  google.protobuf.Struct attributes =2;
  Cascade cascade =3;
  Node from =4;
  Node to =5;
  Metadata metadata =6;
}

// EdgeDetails is an array of EdgeDetail
message EdgeDetails {
  repeated EdgeDetail edges =1;
}

// EdgeFilter is used to fetch edges
message EdgeFilter {
  Path node_path =1 [(validator.field) = {msg_exists : true}];
  string gtype =2 [(validator.field) = {regex : "^.{1,225}$"}];
  repeated string expressions =3;
  int32 limit =4 [(validator.field) = {int_gt : 0}];
}

// Filter is a generic filter using Common Expression Language
message Filter {
  string gtype =1 [(validator.field) = {regex : "^.{1,225}$"}];
  repeated string expressions =2;
  int32 limit =3 [(validator.field) = {int_gt : 0}];
}

// MeFilter is used to fetch a NodeDetail representing the identity in the inbound JWT token
message MeFilter {
  Filter edges_from =1;
  Filter edges_to =2;
}

// ChannelFilter is used to filter messages in a pubsub channel
message ChannelFilter {
  string channel =1 [(validator.field) = {regex : "^.{1,225}$"}];
  repeated string expressions =2;
}

// SubGraphFilter is used to filter nodes/edges in the graph
message SubGraphFilter {
  Filter nodes =1 [(validator.field) = {msg_exists : true}];
  Filter edges =2 [(validator.field) = {msg_exists : true}];
}

// Graph is an array of nodes and edges
message Graph {
  Nodes nodes =1;
  Edges edges =2;
}

// Patch patches the attributes of a Node or Edge
message Patch {
  Path path =1 [(validator.field) = {msg_exists : true}];
  google.protobuf.Struct attributes =2;
}

// Patches is an array of Patch
message Patches {
  repeated Patch patches =1;
}

// Pong returns PONG if the server is healthy
message Pong {
  string message =1;
}

// OutboundMessage is a message to be published to a pubsub channel
message OutboundMessage {
  string channel =1 [(validator.field) = {regex : "^.{1,225}$"}];
  google.protobuf.Struct data =2 [(validator.field) = {msg_exists : true}];
}

// Message is received on PubSub subscriptions
message Message {
  string channel =1 [(validator.field) = {regex : "^.{1,225}$"}];
  google.protobuf.Struct data =2 [(validator.field) = {msg_exists : true}];
  Path sender =3;
  int64 timestamp=4;
}

// Schema returns registered edge & node types
message Schema {
  repeated string edge_types =1;
  repeated string node_types =2;
}

// GraphService is the primary Graph service
service GraphService {
  // Ping returns PONG if the server is health
  rpc Ping(google.protobuf.Empty) returns(Pong) {}
  // GetSchema gets schema about the Graph node & edge types
  rpc GetSchema(google.protobuf.Empty) returns(Schema){}
 // Me returns a NodeDetail of the currently logged in identity(the subject of the JWT)
  rpc Me(MeFilter) returns(NodeDetail){}
  // CreateNode creates a node in the graph
  rpc CreateNode(NodeConstructor) returns(Node){}
  // CreateNodes creates a batch of nodes in the graph
  rpc CreateNodes(NodeConstructors) returns(Nodes){}
  // GetNode gets a single node in the graph
  rpc GetNode(Path) returns(Node){}
  // SearchNodes searches the graph for nodes
  rpc SearchNodes(Filter) returns(Nodes){}
  // PatchNode patches a nodes attributes
  rpc PatchNode(Patch) returns(Node){}
  // PatchNodes patches a batch of nodes attributes
  rpc PatchNodes(Patches) returns(Nodes){}
  // DelNode deletes a node from the graph
  rpc DelNode(Path) returns(google.protobuf.Empty){}
  // DelNodes deletes a batch of nodes from the graph
  rpc DelNodes(Paths) returns(google.protobuf.Empty){}
  // CreateEdge creates an edge in the graph
  rpc CreateEdge(EdgeConstructor) returns(Edge){}
  // CreateEdges creates a batch of edges in the graph
  rpc CreateEdges(EdgeConstructors) returns(Edges){}
  // GetEdge gets a single edge in the graph
  rpc GetEdge(Path) returns(Edge){}
  // SearchEdges searches the graph for edges
  rpc SearchEdges(Filter) returns(Edges){}
  // PatchEdge patches an edges attributes
  rpc PatchEdge(Patch) returns(Edge){}
  // PatchEdges patches a batch of edges attributes
  rpc PatchEdges(Patches) returns(Edges){}
  // DelEdge deletes an edge from the graph
  rpc DelEdge(Path) returns(google.protobuf.Empty){}
  // DelEdges deletes a batch of edges from the graph
  rpc DelEdges(Paths) returns(google.protobuf.Empty){}
  // EdgesFrom returns edges that source from the given node path that pass the filter
  rpc EdgesFrom(EdgeFilter) returns(Edges){}
  // EdgesTo returns edges that point to the given node path that pass the filter
  rpc EdgesTo(EdgeFilter) returns(Edges){}
  // Publish publishes a message to a pubsub channel
  rpc Publish(OutboundMessage) returns(google.protobuf.Empty){}
  // Subscribe subscribes to messages on a pubsub channel
  rpc Subscribe(ChannelFilter) returns(stream Message){}
  // Import imports the Graph into the database
  rpc Import(Graph) returns(Graph){}
  // Export returns the Graph data
  rpc Export(google.protobuf.Empty) returns (Graph){}
  // SubGraph returns a subgraph using the given filter
  rpc SubGraph(SubGraphFilter) returns(Graph){}
  // Shutdown shuts down the database
  rpc Shutdown(google.protobuf.Empty) returns(google.protobuf.Empty){}
}

message Interception {
  string method =1 [(validator.field) = {regex : "^.{1,225}$"}];
  Node identity =2;
  int64 timestamp =3;
  google.protobuf.Any request = 4;
  Timing timing =5;
}

message TriggerFilter {
  repeated string expressions =1;
}

// TriggerService is an optional/custom external plugin that when added to a graphik instance, mutates requests & responses at runtime
service TriggerService {
  // Ping returns PONG if the server is health
  rpc Ping(google.protobuf.Empty) returns(Pong) {}
  // Mutate mutates request/responses
  rpc Mutate(Interception) returns(Interception){}
  // Filter returns a set of expressions used to determine whether the request/response will be sent to the Mutation function.
  // These expressions are cached by the Graphik server
  rpc Filter(google.protobuf.Empty) returns(TriggerFilter){}
}