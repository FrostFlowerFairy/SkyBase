/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var github_com_mwitkow_go$proto$validators_validator_pb = require('./github.com/mwitkow/go-proto-validators/validator_pb.js');
goog.exportSymbol('proto.api.AggFilter', null, global);
goog.exportSymbol('proto.api.Aggregate', null, global);
goog.exportSymbol('proto.api.Algorithm', null, global);
goog.exportSymbol('proto.api.AuthTarget', null, global);
goog.exportSymbol('proto.api.Authorizer', null, global);
goog.exportSymbol('proto.api.Authorizers', null, global);
goog.exportSymbol('proto.api.Boolean', null, global);
goog.exportSymbol('proto.api.ConnectFilter', null, global);
goog.exportSymbol('proto.api.Connection', null, global);
goog.exportSymbol('proto.api.ConnectionConstructor', null, global);
goog.exportSymbol('proto.api.ConnectionConstructors', null, global);
goog.exportSymbol('proto.api.Connections', null, global);
goog.exportSymbol('proto.api.Doc', null, global);
goog.exportSymbol('proto.api.DocConstructor', null, global);
goog.exportSymbol('proto.api.DocConstructors', null, global);
goog.exportSymbol('proto.api.Docs', null, global);
goog.exportSymbol('proto.api.Edit', null, global);
goog.exportSymbol('proto.api.EditFilter', null, global);
goog.exportSymbol('proto.api.ExistsFilter', null, global);
goog.exportSymbol('proto.api.ExprFilter', null, global);
goog.exportSymbol('proto.api.Filter', null, global);
goog.exportSymbol('proto.api.Flags', null, global);
goog.exportSymbol('proto.api.Graph', null, global);
goog.exportSymbol('proto.api.Index', null, global);
goog.exportSymbol('proto.api.IndexConstructor', null, global);
goog.exportSymbol('proto.api.Indexes', null, global);
goog.exportSymbol('proto.api.Message', null, global);
goog.exportSymbol('proto.api.Number', null, global);
goog.exportSymbol('proto.api.OutboundMessage', null, global);
goog.exportSymbol('proto.api.Pong', null, global);
goog.exportSymbol('proto.api.Ref', null, global);
goog.exportSymbol('proto.api.RefConstructor', null, global);
goog.exportSymbol('proto.api.Refs', null, global);
goog.exportSymbol('proto.api.Schema', null, global);
goog.exportSymbol('proto.api.SearchConnectFilter', null, global);
goog.exportSymbol('proto.api.SearchConnectMeFilter', null, global);
goog.exportSymbol('proto.api.StreamFilter', null, global);
goog.exportSymbol('proto.api.Traversal', null, global);
goog.exportSymbol('proto.api.Traversals', null, global);
goog.exportSymbol('proto.api.TraverseFilter', null, global);
goog.exportSymbol('proto.api.TraverseMeFilter', null, global);
goog.exportSymbol('proto.api.TypeValidator', null, global);
goog.exportSymbol('proto.api.TypeValidators', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Ref = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Ref, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Ref.displayName = 'proto.api.Ref';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Ref.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Ref.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Ref} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Ref.toObject = function(includeInstance, msg) {
  var f, obj = {
    gtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Ref}
 */
proto.api.Ref.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Ref;
  return proto.api.Ref.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Ref} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Ref}
 */
proto.api.Ref.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Ref.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Ref.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Ref} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Ref.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string gtype = 1;
 * @return {string}
 */
proto.api.Ref.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.Ref.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gid = 2;
 * @return {string}
 */
proto.api.Ref.prototype.getGid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.Ref.prototype.setGid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RefConstructor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RefConstructor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.RefConstructor.displayName = 'proto.api.RefConstructor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RefConstructor.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RefConstructor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RefConstructor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RefConstructor.toObject = function(includeInstance, msg) {
  var f, obj = {
    gtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RefConstructor}
 */
proto.api.RefConstructor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RefConstructor;
  return proto.api.RefConstructor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RefConstructor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RefConstructor}
 */
proto.api.RefConstructor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RefConstructor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.RefConstructor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.RefConstructor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.RefConstructor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string gtype = 1;
 * @return {string}
 */
proto.api.RefConstructor.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.RefConstructor.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gid = 2;
 * @return {string}
 */
proto.api.RefConstructor.prototype.getGid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.RefConstructor.prototype.setGid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Refs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Refs.repeatedFields_, null);
};
goog.inherits(proto.api.Refs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Refs.displayName = 'proto.api.Refs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Refs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Refs.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Refs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Refs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Refs.toObject = function(includeInstance, msg) {
  var f, obj = {
    refsList: jspb.Message.toObjectList(msg.getRefsList(),
    proto.api.Ref.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Refs}
 */
proto.api.Refs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Refs;
  return proto.api.Refs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Refs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Refs}
 */
proto.api.Refs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.addRefs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Refs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Refs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Refs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Refs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Ref refs = 1;
 * @return {!Array<!proto.api.Ref>}
 */
proto.api.Refs.prototype.getRefsList = function() {
  return /** @type{!Array<!proto.api.Ref>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Ref, 1));
};


/** @param {!Array<!proto.api.Ref>} value */
proto.api.Refs.prototype.setRefsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Ref=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Ref}
 */
proto.api.Refs.prototype.addRefs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Ref, opt_index);
};


proto.api.Refs.prototype.clearRefsList = function() {
  this.setRefsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Doc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Doc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Doc.displayName = 'proto.api.Doc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Doc.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Doc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Doc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Doc.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.api.Ref.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Doc}
 */
proto.api.Doc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Doc;
  return proto.api.Doc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Doc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Doc}
 */
proto.api.Doc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Doc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Doc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Doc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Doc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ref ref = 1;
 * @return {?proto.api.Ref}
 */
proto.api.Doc.prototype.getRef = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 1));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.Doc.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.Doc.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Doc.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct attributes = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.Doc.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.Doc.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.Doc.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Doc.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DocConstructor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DocConstructor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.DocConstructor.displayName = 'proto.api.DocConstructor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DocConstructor.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DocConstructor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DocConstructor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocConstructor.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.api.RefConstructor.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DocConstructor}
 */
proto.api.DocConstructor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DocConstructor;
  return proto.api.DocConstructor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DocConstructor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DocConstructor}
 */
proto.api.DocConstructor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RefConstructor;
      reader.readMessage(value,proto.api.RefConstructor.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DocConstructor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DocConstructor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DocConstructor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocConstructor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RefConstructor.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional RefConstructor ref = 1;
 * @return {?proto.api.RefConstructor}
 */
proto.api.DocConstructor.prototype.getRef = function() {
  return /** @type{?proto.api.RefConstructor} */ (
    jspb.Message.getWrapperField(this, proto.api.RefConstructor, 1));
};


/** @param {?proto.api.RefConstructor|undefined} value */
proto.api.DocConstructor.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.DocConstructor.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.DocConstructor.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct attributes = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.DocConstructor.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.DocConstructor.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.DocConstructor.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.DocConstructor.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DocConstructors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.DocConstructors.repeatedFields_, null);
};
goog.inherits(proto.api.DocConstructors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.DocConstructors.displayName = 'proto.api.DocConstructors';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.DocConstructors.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DocConstructors.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DocConstructors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DocConstructors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocConstructors.toObject = function(includeInstance, msg) {
  var f, obj = {
    docsList: jspb.Message.toObjectList(msg.getDocsList(),
    proto.api.DocConstructor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DocConstructors}
 */
proto.api.DocConstructors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DocConstructors;
  return proto.api.DocConstructors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DocConstructors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DocConstructors}
 */
proto.api.DocConstructors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.DocConstructor;
      reader.readMessage(value,proto.api.DocConstructor.deserializeBinaryFromReader);
      msg.addDocs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DocConstructors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.DocConstructors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.DocConstructors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.DocConstructors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.DocConstructor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DocConstructor docs = 1;
 * @return {!Array<!proto.api.DocConstructor>}
 */
proto.api.DocConstructors.prototype.getDocsList = function() {
  return /** @type{!Array<!proto.api.DocConstructor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.DocConstructor, 1));
};


/** @param {!Array<!proto.api.DocConstructor>} value */
proto.api.DocConstructors.prototype.setDocsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.DocConstructor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.DocConstructor}
 */
proto.api.DocConstructors.prototype.addDocs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.DocConstructor, opt_index);
};


proto.api.DocConstructors.prototype.clearDocsList = function() {
  this.setDocsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Traversal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Traversal.repeatedFields_, null);
};
goog.inherits(proto.api.Traversal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Traversal.displayName = 'proto.api.Traversal';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Traversal.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Traversal.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Traversal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Traversal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Traversal.toObject = function(includeInstance, msg) {
  var f, obj = {
    doc: (f = msg.getDoc()) && proto.api.Doc.toObject(includeInstance, f),
    traversalPathList: jspb.Message.toObjectList(msg.getTraversalPathList(),
    proto.api.Ref.toObject, includeInstance),
    depth: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hops: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Traversal}
 */
proto.api.Traversal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Traversal;
  return proto.api.Traversal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Traversal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Traversal}
 */
proto.api.Traversal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Doc;
      reader.readMessage(value,proto.api.Doc.deserializeBinaryFromReader);
      msg.setDoc(value);
      break;
    case 2:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.addTraversalPath(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Traversal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Traversal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Traversal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Traversal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDoc();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Doc.serializeBinaryToWriter
    );
  }
  f = message.getTraversalPathList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHops();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
};


/**
 * optional Doc doc = 1;
 * @return {?proto.api.Doc}
 */
proto.api.Traversal.prototype.getDoc = function() {
  return /** @type{?proto.api.Doc} */ (
    jspb.Message.getWrapperField(this, proto.api.Doc, 1));
};


/** @param {?proto.api.Doc|undefined} value */
proto.api.Traversal.prototype.setDoc = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.Traversal.prototype.clearDoc = function() {
  this.setDoc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Traversal.prototype.hasDoc = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Ref traversal_path = 2;
 * @return {!Array<!proto.api.Ref>}
 */
proto.api.Traversal.prototype.getTraversalPathList = function() {
  return /** @type{!Array<!proto.api.Ref>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Ref, 2));
};


/** @param {!Array<!proto.api.Ref>} value */
proto.api.Traversal.prototype.setTraversalPathList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.api.Ref=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Ref}
 */
proto.api.Traversal.prototype.addTraversalPath = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.api.Ref, opt_index);
};


proto.api.Traversal.prototype.clearTraversalPathList = function() {
  this.setTraversalPathList([]);
};


/**
 * optional uint64 depth = 3;
 * @return {number}
 */
proto.api.Traversal.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.Traversal.prototype.setDepth = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 hops = 4;
 * @return {number}
 */
proto.api.Traversal.prototype.getHops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.api.Traversal.prototype.setHops = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Traversals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Traversals.repeatedFields_, null);
};
goog.inherits(proto.api.Traversals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Traversals.displayName = 'proto.api.Traversals';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Traversals.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Traversals.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Traversals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Traversals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Traversals.toObject = function(includeInstance, msg) {
  var f, obj = {
    traversalsList: jspb.Message.toObjectList(msg.getTraversalsList(),
    proto.api.Traversal.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Traversals}
 */
proto.api.Traversals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Traversals;
  return proto.api.Traversals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Traversals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Traversals}
 */
proto.api.Traversals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Traversal;
      reader.readMessage(value,proto.api.Traversal.deserializeBinaryFromReader);
      msg.addTraversals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Traversals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Traversals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Traversals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Traversals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraversalsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Traversal.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Traversal traversals = 1;
 * @return {!Array<!proto.api.Traversal>}
 */
proto.api.Traversals.prototype.getTraversalsList = function() {
  return /** @type{!Array<!proto.api.Traversal>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Traversal, 1));
};


/** @param {!Array<!proto.api.Traversal>} value */
proto.api.Traversals.prototype.setTraversalsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Traversal=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Traversal}
 */
proto.api.Traversals.prototype.addTraversals = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Traversal, opt_index);
};


proto.api.Traversals.prototype.clearTraversalsList = function() {
  this.setTraversalsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Docs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Docs.repeatedFields_, null);
};
goog.inherits(proto.api.Docs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Docs.displayName = 'proto.api.Docs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Docs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Docs.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Docs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Docs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Docs.toObject = function(includeInstance, msg) {
  var f, obj = {
    docsList: jspb.Message.toObjectList(msg.getDocsList(),
    proto.api.Doc.toObject, includeInstance),
    seekNext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Docs}
 */
proto.api.Docs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Docs;
  return proto.api.Docs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Docs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Docs}
 */
proto.api.Docs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Doc;
      reader.readMessage(value,proto.api.Doc.deserializeBinaryFromReader);
      msg.addDocs(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeekNext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Docs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Docs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Docs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Docs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Doc.serializeBinaryToWriter
    );
  }
  f = message.getSeekNext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Doc docs = 1;
 * @return {!Array<!proto.api.Doc>}
 */
proto.api.Docs.prototype.getDocsList = function() {
  return /** @type{!Array<!proto.api.Doc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Doc, 1));
};


/** @param {!Array<!proto.api.Doc>} value */
proto.api.Docs.prototype.setDocsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Doc=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Doc}
 */
proto.api.Docs.prototype.addDocs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Doc, opt_index);
};


proto.api.Docs.prototype.clearDocsList = function() {
  this.setDocsList([]);
};


/**
 * optional string seek_next = 2;
 * @return {string}
 */
proto.api.Docs.prototype.getSeekNext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.Docs.prototype.setSeekNext = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Connection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Connection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Connection.displayName = 'proto.api.Connection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Connection.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Connection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Connection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Connection.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.api.Ref.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    directed: jspb.Message.getFieldWithDefault(msg, 3, false),
    from: (f = msg.getFrom()) && proto.api.Ref.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.Ref.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Connection}
 */
proto.api.Connection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Connection;
  return proto.api.Connection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Connection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Connection}
 */
proto.api.Connection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDirected(value);
      break;
    case 4:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 5:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Connection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Connection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Connection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Connection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getDirected();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ref ref = 1;
 * @return {?proto.api.Ref}
 */
proto.api.Connection.prototype.getRef = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 1));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.Connection.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.Connection.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Connection.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct attributes = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.Connection.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.Connection.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.Connection.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Connection.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool directed = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Connection.prototype.getDirected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.api.Connection.prototype.setDirected = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional Ref from = 4;
 * @return {?proto.api.Ref}
 */
proto.api.Connection.prototype.getFrom = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 4));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.Connection.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.api.Connection.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Connection.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Ref to = 5;
 * @return {?proto.api.Ref}
 */
proto.api.Connection.prototype.getTo = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 5));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.Connection.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.api.Connection.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Connection.prototype.hasTo = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ConnectionConstructor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ConnectionConstructor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ConnectionConstructor.displayName = 'proto.api.ConnectionConstructor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ConnectionConstructor.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ConnectionConstructor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ConnectionConstructor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ConnectionConstructor.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.api.RefConstructor.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    directed: jspb.Message.getFieldWithDefault(msg, 4, false),
    from: (f = msg.getFrom()) && proto.api.Ref.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.api.Ref.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ConnectionConstructor}
 */
proto.api.ConnectionConstructor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ConnectionConstructor;
  return proto.api.ConnectionConstructor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ConnectionConstructor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ConnectionConstructor}
 */
proto.api.ConnectionConstructor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.RefConstructor;
      reader.readMessage(value,proto.api.RefConstructor.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDirected(value);
      break;
    case 5:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 6:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ConnectionConstructor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ConnectionConstructor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ConnectionConstructor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ConnectionConstructor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.RefConstructor.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getDirected();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
};


/**
 * optional RefConstructor ref = 1;
 * @return {?proto.api.RefConstructor}
 */
proto.api.ConnectionConstructor.prototype.getRef = function() {
  return /** @type{?proto.api.RefConstructor} */ (
    jspb.Message.getWrapperField(this, proto.api.RefConstructor, 1));
};


/** @param {?proto.api.RefConstructor|undefined} value */
proto.api.ConnectionConstructor.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.ConnectionConstructor.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.ConnectionConstructor.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct attributes = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.ConnectionConstructor.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.ConnectionConstructor.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.ConnectionConstructor.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.ConnectionConstructor.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool directed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.ConnectionConstructor.prototype.getDirected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.api.ConnectionConstructor.prototype.setDirected = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Ref from = 5;
 * @return {?proto.api.Ref}
 */
proto.api.ConnectionConstructor.prototype.getFrom = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 5));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.ConnectionConstructor.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.api.ConnectionConstructor.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.ConnectionConstructor.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Ref to = 6;
 * @return {?proto.api.Ref}
 */
proto.api.ConnectionConstructor.prototype.getTo = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 6));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.ConnectionConstructor.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.api.ConnectionConstructor.prototype.clearTo = function() {
  this.setTo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.ConnectionConstructor.prototype.hasTo = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SearchConnectFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SearchConnectFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SearchConnectFilter.displayName = 'proto.api.SearchConnectFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SearchConnectFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SearchConnectFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SearchConnectFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SearchConnectFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.api.Filter.toObject(includeInstance, f),
    gtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    directed: jspb.Message.getFieldWithDefault(msg, 4, false),
    from: (f = msg.getFrom()) && proto.api.Ref.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SearchConnectFilter}
 */
proto.api.SearchConnectFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SearchConnectFilter;
  return proto.api.SearchConnectFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SearchConnectFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SearchConnectFilter}
 */
proto.api.SearchConnectFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Filter;
      reader.readMessage(value,proto.api.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDirected(value);
      break;
    case 5:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SearchConnectFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SearchConnectFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SearchConnectFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SearchConnectFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Filter.serializeBinaryToWriter
    );
  }
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getDirected();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
};


/**
 * optional Filter filter = 1;
 * @return {?proto.api.Filter}
 */
proto.api.SearchConnectFilter.prototype.getFilter = function() {
  return /** @type{?proto.api.Filter} */ (
    jspb.Message.getWrapperField(this, proto.api.Filter, 1));
};


/** @param {?proto.api.Filter|undefined} value */
proto.api.SearchConnectFilter.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.SearchConnectFilter.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SearchConnectFilter.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gtype = 2;
 * @return {string}
 */
proto.api.SearchConnectFilter.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.SearchConnectFilter.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Struct attributes = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.SearchConnectFilter.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.SearchConnectFilter.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.SearchConnectFilter.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SearchConnectFilter.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool directed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.SearchConnectFilter.prototype.getDirected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.api.SearchConnectFilter.prototype.setDirected = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional Ref from = 5;
 * @return {?proto.api.Ref}
 */
proto.api.SearchConnectFilter.prototype.getFrom = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 5));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.SearchConnectFilter.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.api.SearchConnectFilter.prototype.clearFrom = function() {
  this.setFrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SearchConnectFilter.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SearchConnectMeFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SearchConnectMeFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SearchConnectMeFilter.displayName = 'proto.api.SearchConnectMeFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SearchConnectMeFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SearchConnectMeFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SearchConnectMeFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SearchConnectMeFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.api.Filter.toObject(includeInstance, f),
    gtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    directed: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SearchConnectMeFilter}
 */
proto.api.SearchConnectMeFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SearchConnectMeFilter;
  return proto.api.SearchConnectMeFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SearchConnectMeFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SearchConnectMeFilter}
 */
proto.api.SearchConnectMeFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Filter;
      reader.readMessage(value,proto.api.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDirected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SearchConnectMeFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SearchConnectMeFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SearchConnectMeFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SearchConnectMeFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Filter.serializeBinaryToWriter
    );
  }
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getDirected();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional Filter filter = 1;
 * @return {?proto.api.Filter}
 */
proto.api.SearchConnectMeFilter.prototype.getFilter = function() {
  return /** @type{?proto.api.Filter} */ (
    jspb.Message.getWrapperField(this, proto.api.Filter, 1));
};


/** @param {?proto.api.Filter|undefined} value */
proto.api.SearchConnectMeFilter.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.SearchConnectMeFilter.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SearchConnectMeFilter.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gtype = 2;
 * @return {string}
 */
proto.api.SearchConnectMeFilter.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.SearchConnectMeFilter.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Struct attributes = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.SearchConnectMeFilter.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.SearchConnectMeFilter.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.SearchConnectMeFilter.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SearchConnectMeFilter.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool directed = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.SearchConnectMeFilter.prototype.getDirected = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.api.SearchConnectMeFilter.prototype.setDirected = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ConnectionConstructors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ConnectionConstructors.repeatedFields_, null);
};
goog.inherits(proto.api.ConnectionConstructors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ConnectionConstructors.displayName = 'proto.api.ConnectionConstructors';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ConnectionConstructors.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ConnectionConstructors.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ConnectionConstructors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ConnectionConstructors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ConnectionConstructors.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(),
    proto.api.ConnectionConstructor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ConnectionConstructors}
 */
proto.api.ConnectionConstructors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ConnectionConstructors;
  return proto.api.ConnectionConstructors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ConnectionConstructors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ConnectionConstructors}
 */
proto.api.ConnectionConstructors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.ConnectionConstructor;
      reader.readMessage(value,proto.api.ConnectionConstructor.deserializeBinaryFromReader);
      msg.addConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ConnectionConstructors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ConnectionConstructors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ConnectionConstructors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ConnectionConstructors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.ConnectionConstructor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConnectionConstructor connections = 1;
 * @return {!Array<!proto.api.ConnectionConstructor>}
 */
proto.api.ConnectionConstructors.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.api.ConnectionConstructor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.ConnectionConstructor, 1));
};


/** @param {!Array<!proto.api.ConnectionConstructor>} value */
proto.api.ConnectionConstructors.prototype.setConnectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.ConnectionConstructor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.ConnectionConstructor}
 */
proto.api.ConnectionConstructors.prototype.addConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.ConnectionConstructor, opt_index);
};


proto.api.ConnectionConstructors.prototype.clearConnectionsList = function() {
  this.setConnectionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Connections = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Connections.repeatedFields_, null);
};
goog.inherits(proto.api.Connections, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Connections.displayName = 'proto.api.Connections';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Connections.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Connections.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Connections.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Connections} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Connections.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionsList: jspb.Message.toObjectList(msg.getConnectionsList(),
    proto.api.Connection.toObject, includeInstance),
    seekNext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Connections}
 */
proto.api.Connections.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Connections;
  return proto.api.Connections.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Connections} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Connections}
 */
proto.api.Connections.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Connection;
      reader.readMessage(value,proto.api.Connection.deserializeBinaryFromReader);
      msg.addConnections(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeekNext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Connections.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Connections.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Connections} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Connections.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Connection.serializeBinaryToWriter
    );
  }
  f = message.getSeekNext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Connection connections = 1;
 * @return {!Array<!proto.api.Connection>}
 */
proto.api.Connections.prototype.getConnectionsList = function() {
  return /** @type{!Array<!proto.api.Connection>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Connection, 1));
};


/** @param {!Array<!proto.api.Connection>} value */
proto.api.Connections.prototype.setConnectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Connection=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Connection}
 */
proto.api.Connections.prototype.addConnections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Connection, opt_index);
};


proto.api.Connections.prototype.clearConnectionsList = function() {
  this.setConnectionsList([]);
};


/**
 * optional string seek_next = 2;
 * @return {string}
 */
proto.api.Connections.prototype.getSeekNext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.Connections.prototype.setSeekNext = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ConnectFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ConnectFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ConnectFilter.displayName = 'proto.api.ConnectFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ConnectFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ConnectFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ConnectFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ConnectFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    docRef: (f = msg.getDocRef()) && proto.api.Ref.toObject(includeInstance, f),
    gtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 3, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 5, ""),
    seek: jspb.Message.getFieldWithDefault(msg, 6, ""),
    reverse: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ConnectFilter}
 */
proto.api.ConnectFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ConnectFilter;
  return proto.api.ConnectFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ConnectFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ConnectFilter}
 */
proto.api.ConnectFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setDocRef(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeek(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ConnectFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ConnectFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ConnectFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ConnectFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSeek();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional Ref doc_ref = 1;
 * @return {?proto.api.Ref}
 */
proto.api.ConnectFilter.prototype.getDocRef = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 1));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.ConnectFilter.prototype.setDocRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.ConnectFilter.prototype.clearDocRef = function() {
  this.setDocRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.ConnectFilter.prototype.hasDocRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string gtype = 2;
 * @return {string}
 */
proto.api.ConnectFilter.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.ConnectFilter.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string expression = 3;
 * @return {string}
 */
proto.api.ConnectFilter.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.ConnectFilter.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 limit = 4;
 * @return {number}
 */
proto.api.ConnectFilter.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.api.ConnectFilter.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string sort = 5;
 * @return {string}
 */
proto.api.ConnectFilter.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.api.ConnectFilter.prototype.setSort = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string seek = 6;
 * @return {string}
 */
proto.api.ConnectFilter.prototype.getSeek = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.api.ConnectFilter.prototype.setSeek = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool reverse = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.ConnectFilter.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.api.ConnectFilter.prototype.setReverse = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Filter.displayName = 'proto.api.Filter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    gtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 4, ""),
    seek: jspb.Message.getFieldWithDefault(msg, 5, ""),
    reverse: jspb.Message.getFieldWithDefault(msg, 6, false),
    index: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Filter}
 */
proto.api.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Filter;
  return proto.api.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Filter}
 */
proto.api.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeek(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSeek();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string gtype = 1;
 * @return {string}
 */
proto.api.Filter.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.Filter.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expression = 2;
 * @return {string}
 */
proto.api.Filter.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.Filter.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 limit = 3;
 * @return {number}
 */
proto.api.Filter.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.Filter.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sort = 4;
 * @return {string}
 */
proto.api.Filter.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.api.Filter.prototype.setSort = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string seek = 5;
 * @return {string}
 */
proto.api.Filter.prototype.getSeek = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.api.Filter.prototype.setSeek = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool reverse = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Filter.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.api.Filter.prototype.setReverse = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string index = 7;
 * @return {string}
 */
proto.api.Filter.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.api.Filter.prototype.setIndex = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AggFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.AggFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.AggFilter.displayName = 'proto.api.AggFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AggFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AggFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AggFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AggFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.api.Filter.toObject(includeInstance, f),
    aggregate: jspb.Message.getFieldWithDefault(msg, 2, 0),
    field: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AggFilter}
 */
proto.api.AggFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AggFilter;
  return proto.api.AggFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AggFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AggFilter}
 */
proto.api.AggFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Filter;
      reader.readMessage(value,proto.api.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {!proto.api.Aggregate} */ (reader.readEnum());
      msg.setAggregate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setField(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AggFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.AggFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.AggFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AggFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Filter.serializeBinaryToWriter
    );
  }
  f = message.getAggregate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getField();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Filter filter = 1;
 * @return {?proto.api.Filter}
 */
proto.api.AggFilter.prototype.getFilter = function() {
  return /** @type{?proto.api.Filter} */ (
    jspb.Message.getWrapperField(this, proto.api.Filter, 1));
};


/** @param {?proto.api.Filter|undefined} value */
proto.api.AggFilter.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.AggFilter.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.AggFilter.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Aggregate aggregate = 2;
 * @return {!proto.api.Aggregate}
 */
proto.api.AggFilter.prototype.getAggregate = function() {
  return /** @type {!proto.api.Aggregate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.api.Aggregate} value */
proto.api.AggFilter.prototype.setAggregate = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string field = 3;
 * @return {string}
 */
proto.api.AggFilter.prototype.getField = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.AggFilter.prototype.setField = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TraverseFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TraverseFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.TraverseFilter.displayName = 'proto.api.TraverseFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TraverseFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TraverseFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TraverseFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TraverseFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    root: (f = msg.getRoot()) && proto.api.Ref.toObject(includeInstance, f),
    docExpression: jspb.Message.getFieldWithDefault(msg, 2, ""),
    connectionExpression: jspb.Message.getFieldWithDefault(msg, 3, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 5, ""),
    reverse: jspb.Message.getFieldWithDefault(msg, 6, false),
    algorithm: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxDepth: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxHops: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TraverseFilter}
 */
proto.api.TraverseFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TraverseFilter;
  return proto.api.TraverseFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TraverseFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TraverseFilter}
 */
proto.api.TraverseFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setRoot(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocExpression(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionExpression(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    case 7:
      var value = /** @type {!proto.api.Algorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxDepth(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxHops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TraverseFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TraverseFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TraverseFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TraverseFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getDocExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConnectionExpression();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getMaxDepth();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMaxHops();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
};


/**
 * optional Ref root = 1;
 * @return {?proto.api.Ref}
 */
proto.api.TraverseFilter.prototype.getRoot = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 1));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.TraverseFilter.prototype.setRoot = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.TraverseFilter.prototype.clearRoot = function() {
  this.setRoot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.TraverseFilter.prototype.hasRoot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string doc_expression = 2;
 * @return {string}
 */
proto.api.TraverseFilter.prototype.getDocExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.TraverseFilter.prototype.setDocExpression = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string connection_expression = 3;
 * @return {string}
 */
proto.api.TraverseFilter.prototype.getConnectionExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.TraverseFilter.prototype.setConnectionExpression = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 limit = 4;
 * @return {number}
 */
proto.api.TraverseFilter.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.api.TraverseFilter.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string sort = 5;
 * @return {string}
 */
proto.api.TraverseFilter.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.api.TraverseFilter.prototype.setSort = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool reverse = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.TraverseFilter.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.api.TraverseFilter.prototype.setReverse = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Algorithm algorithm = 7;
 * @return {!proto.api.Algorithm}
 */
proto.api.TraverseFilter.prototype.getAlgorithm = function() {
  return /** @type {!proto.api.Algorithm} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.api.Algorithm} value */
proto.api.TraverseFilter.prototype.setAlgorithm = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional uint64 max_depth = 8;
 * @return {number}
 */
proto.api.TraverseFilter.prototype.getMaxDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.api.TraverseFilter.prototype.setMaxDepth = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 max_hops = 9;
 * @return {number}
 */
proto.api.TraverseFilter.prototype.getMaxHops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.api.TraverseFilter.prototype.setMaxHops = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TraverseMeFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TraverseMeFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.TraverseMeFilter.displayName = 'proto.api.TraverseMeFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TraverseMeFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TraverseMeFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TraverseMeFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TraverseMeFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    docExpression: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionExpression: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sort: jspb.Message.getFieldWithDefault(msg, 4, ""),
    reverse: jspb.Message.getFieldWithDefault(msg, 5, false),
    algorithm: jspb.Message.getFieldWithDefault(msg, 6, 0),
    maxDepth: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxHops: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TraverseMeFilter}
 */
proto.api.TraverseMeFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TraverseMeFilter;
  return proto.api.TraverseMeFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TraverseMeFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TraverseMeFilter}
 */
proto.api.TraverseMeFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocExpression(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionExpression(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    case 6:
      var value = /** @type {!proto.api.Algorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxDepth(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxHops(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TraverseMeFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TraverseMeFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TraverseMeFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TraverseMeFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocExpression();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getMaxDepth();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getMaxHops();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string doc_expression = 1;
 * @return {string}
 */
proto.api.TraverseMeFilter.prototype.getDocExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.TraverseMeFilter.prototype.setDocExpression = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_expression = 2;
 * @return {string}
 */
proto.api.TraverseMeFilter.prototype.getConnectionExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.TraverseMeFilter.prototype.setConnectionExpression = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 limit = 3;
 * @return {number}
 */
proto.api.TraverseMeFilter.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.TraverseMeFilter.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string sort = 4;
 * @return {string}
 */
proto.api.TraverseMeFilter.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.api.TraverseMeFilter.prototype.setSort = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool reverse = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.TraverseMeFilter.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.api.TraverseMeFilter.prototype.setReverse = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional Algorithm algorithm = 6;
 * @return {!proto.api.Algorithm}
 */
proto.api.TraverseMeFilter.prototype.getAlgorithm = function() {
  return /** @type {!proto.api.Algorithm} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.api.Algorithm} value */
proto.api.TraverseMeFilter.prototype.setAlgorithm = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional uint64 max_depth = 7;
 * @return {number}
 */
proto.api.TraverseMeFilter.prototype.getMaxDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.api.TraverseMeFilter.prototype.setMaxDepth = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 max_hops = 8;
 * @return {number}
 */
proto.api.TraverseMeFilter.prototype.getMaxHops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.api.TraverseMeFilter.prototype.setMaxHops = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.IndexConstructor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.IndexConstructor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.IndexConstructor.displayName = 'proto.api.IndexConstructor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.IndexConstructor.prototype.toObject = function(opt_includeInstance) {
  return proto.api.IndexConstructor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.IndexConstructor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.IndexConstructor.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gtype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 4, ""),
    docs: jspb.Message.getFieldWithDefault(msg, 6, false),
    connections: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.IndexConstructor}
 */
proto.api.IndexConstructor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.IndexConstructor;
  return proto.api.IndexConstructor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.IndexConstructor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.IndexConstructor}
 */
proto.api.IndexConstructor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDocs(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.IndexConstructor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.IndexConstructor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.IndexConstructor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.IndexConstructor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDocs();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getConnections();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.api.IndexConstructor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.IndexConstructor.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gtype = 3;
 * @return {string}
 */
proto.api.IndexConstructor.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.IndexConstructor.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string expression = 4;
 * @return {string}
 */
proto.api.IndexConstructor.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.api.IndexConstructor.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool docs = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.IndexConstructor.prototype.getDocs = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.api.IndexConstructor.prototype.setDocs = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool connections = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.IndexConstructor.prototype.getConnections = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.api.IndexConstructor.prototype.setConnections = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AuthTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.AuthTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.AuthTarget.displayName = 'proto.api.AuthTarget';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AuthTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AuthTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AuthTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AuthTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 3, ""),
    user: (f = msg.getUser()) && proto.api.Doc.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AuthTarget}
 */
proto.api.AuthTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AuthTarget;
  return proto.api.AuthTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AuthTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AuthTarget}
 */
proto.api.AuthTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = new proto.api.Doc;
      reader.readMessage(value,proto.api.Doc.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 5:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AuthTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.AuthTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.AuthTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.AuthTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.Doc.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.api.AuthTarget.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.AuthTarget.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Doc user = 4;
 * @return {?proto.api.Doc}
 */
proto.api.AuthTarget.prototype.getUser = function() {
  return /** @type{?proto.api.Doc} */ (
    jspb.Message.getWrapperField(this, proto.api.Doc, 4));
};


/** @param {?proto.api.Doc|undefined} value */
proto.api.AuthTarget.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.api.AuthTarget.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.AuthTarget.prototype.hasUser = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Struct target = 5;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.AuthTarget.prototype.getTarget = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 5));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.AuthTarget.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.api.AuthTarget.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.AuthTarget.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Authorizer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Authorizer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Authorizer.displayName = 'proto.api.Authorizer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Authorizer.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Authorizer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Authorizer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Authorizer.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 2, ""),
    targetRequests: jspb.Message.getFieldWithDefault(msg, 3, false),
    targetResponses: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Authorizer}
 */
proto.api.Authorizer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Authorizer;
  return proto.api.Authorizer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Authorizer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Authorizer}
 */
proto.api.Authorizer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTargetRequests(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTargetResponses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Authorizer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Authorizer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Authorizer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Authorizer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTargetRequests();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTargetResponses();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.api.Authorizer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.Authorizer.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expression = 2;
 * @return {string}
 */
proto.api.Authorizer.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.Authorizer.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool target_requests = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Authorizer.prototype.getTargetRequests = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.api.Authorizer.prototype.setTargetRequests = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool target_responses = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Authorizer.prototype.getTargetResponses = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.api.Authorizer.prototype.setTargetResponses = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Authorizers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Authorizers.repeatedFields_, null);
};
goog.inherits(proto.api.Authorizers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Authorizers.displayName = 'proto.api.Authorizers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Authorizers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Authorizers.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Authorizers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Authorizers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Authorizers.toObject = function(includeInstance, msg) {
  var f, obj = {
    authorizersList: jspb.Message.toObjectList(msg.getAuthorizersList(),
    proto.api.Authorizer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Authorizers}
 */
proto.api.Authorizers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Authorizers;
  return proto.api.Authorizers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Authorizers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Authorizers}
 */
proto.api.Authorizers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Authorizer;
      reader.readMessage(value,proto.api.Authorizer.deserializeBinaryFromReader);
      msg.addAuthorizers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Authorizers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Authorizers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Authorizers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Authorizers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthorizersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Authorizer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Authorizer authorizers = 1;
 * @return {!Array<!proto.api.Authorizer>}
 */
proto.api.Authorizers.prototype.getAuthorizersList = function() {
  return /** @type{!Array<!proto.api.Authorizer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Authorizer, 1));
};


/** @param {!Array<!proto.api.Authorizer>} value */
proto.api.Authorizers.prototype.setAuthorizersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Authorizer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Authorizer}
 */
proto.api.Authorizers.prototype.addAuthorizers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Authorizer, opt_index);
};


proto.api.Authorizers.prototype.clearAuthorizersList = function() {
  this.setAuthorizersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TypeValidator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.TypeValidator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.TypeValidator.displayName = 'proto.api.TypeValidator';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TypeValidator.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TypeValidator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TypeValidator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TypeValidator.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 3, ""),
    docs: jspb.Message.getFieldWithDefault(msg, 4, false),
    connections: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TypeValidator}
 */
proto.api.TypeValidator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TypeValidator;
  return proto.api.TypeValidator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TypeValidator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TypeValidator}
 */
proto.api.TypeValidator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDocs(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TypeValidator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TypeValidator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TypeValidator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TypeValidator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDocs();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getConnections();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.api.TypeValidator.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.TypeValidator.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gtype = 2;
 * @return {string}
 */
proto.api.TypeValidator.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.TypeValidator.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string expression = 3;
 * @return {string}
 */
proto.api.TypeValidator.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.TypeValidator.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool docs = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.TypeValidator.prototype.getDocs = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.api.TypeValidator.prototype.setDocs = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool connections = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.TypeValidator.prototype.getConnections = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.api.TypeValidator.prototype.setConnections = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.TypeValidators = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.TypeValidators.repeatedFields_, null);
};
goog.inherits(proto.api.TypeValidators, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.TypeValidators.displayName = 'proto.api.TypeValidators';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.TypeValidators.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.TypeValidators.prototype.toObject = function(opt_includeInstance) {
  return proto.api.TypeValidators.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.TypeValidators} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TypeValidators.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.api.TypeValidator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.TypeValidators}
 */
proto.api.TypeValidators.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.TypeValidators;
  return proto.api.TypeValidators.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.TypeValidators} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.TypeValidators}
 */
proto.api.TypeValidators.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.TypeValidator;
      reader.readMessage(value,proto.api.TypeValidator.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.TypeValidators.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.TypeValidators.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.TypeValidators} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.TypeValidators.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.TypeValidator.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TypeValidator validators = 1;
 * @return {!Array<!proto.api.TypeValidator>}
 */
proto.api.TypeValidators.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.api.TypeValidator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.TypeValidator, 1));
};


/** @param {!Array<!proto.api.TypeValidator>} value */
proto.api.TypeValidators.prototype.setValidatorsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.TypeValidator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.TypeValidator}
 */
proto.api.TypeValidators.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.TypeValidator, opt_index);
};


proto.api.TypeValidators.prototype.clearValidatorsList = function() {
  this.setValidatorsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Index.displayName = 'proto.api.Index';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gtype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 4, ""),
    docs: jspb.Message.getFieldWithDefault(msg, 6, false),
    connections: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Index}
 */
proto.api.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Index;
  return proto.api.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Index}
 */
proto.api.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDocs(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDocs();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getConnections();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.api.Index.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.Index.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gtype = 3;
 * @return {string}
 */
proto.api.Index.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.Index.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string expression = 4;
 * @return {string}
 */
proto.api.Index.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.api.Index.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool docs = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Index.prototype.getDocs = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.api.Index.prototype.setDocs = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool connections = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Index.prototype.getConnections = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.api.Index.prototype.setConnections = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Indexes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Indexes.repeatedFields_, null);
};
goog.inherits(proto.api.Indexes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Indexes.displayName = 'proto.api.Indexes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Indexes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Indexes.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Indexes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Indexes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Indexes.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.api.Index.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Indexes}
 */
proto.api.Indexes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Indexes;
  return proto.api.Indexes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Indexes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Indexes}
 */
proto.api.Indexes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Index;
      reader.readMessage(value,proto.api.Index.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Indexes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Indexes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Indexes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Indexes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.Index.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Index indexes = 1;
 * @return {!Array<!proto.api.Index>}
 */
proto.api.Indexes.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.api.Index>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.Index, 1));
};


/** @param {!Array<!proto.api.Index>} value */
proto.api.Indexes.prototype.setIndexesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.api.Index=} opt_value
 * @param {number=} opt_index
 * @return {!proto.api.Index}
 */
proto.api.Indexes.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.Index, opt_index);
};


proto.api.Indexes.prototype.clearIndexesList = function() {
  this.setIndexesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.StreamFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.StreamFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.StreamFilter.displayName = 'proto.api.StreamFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.StreamFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.StreamFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.StreamFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.StreamFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.StreamFilter}
 */
proto.api.StreamFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.StreamFilter;
  return proto.api.StreamFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.StreamFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.StreamFilter}
 */
proto.api.StreamFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.StreamFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.StreamFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.StreamFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.StreamFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.api.StreamFilter.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.StreamFilter.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expression = 2;
 * @return {string}
 */
proto.api.StreamFilter.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.StreamFilter.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Graph.displayName = 'proto.api.Graph';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Graph.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Graph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    docs: (f = msg.getDocs()) && proto.api.Docs.toObject(includeInstance, f),
    connections: (f = msg.getConnections()) && proto.api.Connections.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Graph}
 */
proto.api.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Graph;
  return proto.api.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Graph}
 */
proto.api.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Docs;
      reader.readMessage(value,proto.api.Docs.deserializeBinaryFromReader);
      msg.setDocs(value);
      break;
    case 2:
      var value = new proto.api.Connections;
      reader.readMessage(value,proto.api.Connections.deserializeBinaryFromReader);
      msg.setConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Graph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Graph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Graph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocs();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Docs.serializeBinaryToWriter
    );
  }
  f = message.getConnections();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.Connections.serializeBinaryToWriter
    );
  }
};


/**
 * optional Docs docs = 1;
 * @return {?proto.api.Docs}
 */
proto.api.Graph.prototype.getDocs = function() {
  return /** @type{?proto.api.Docs} */ (
    jspb.Message.getWrapperField(this, proto.api.Docs, 1));
};


/** @param {?proto.api.Docs|undefined} value */
proto.api.Graph.prototype.setDocs = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.Graph.prototype.clearDocs = function() {
  this.setDocs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Graph.prototype.hasDocs = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Connections connections = 2;
 * @return {?proto.api.Connections}
 */
proto.api.Graph.prototype.getConnections = function() {
  return /** @type{?proto.api.Connections} */ (
    jspb.Message.getWrapperField(this, proto.api.Connections, 2));
};


/** @param {?proto.api.Connections|undefined} value */
proto.api.Graph.prototype.setConnections = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.Graph.prototype.clearConnections = function() {
  this.setConnections(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Graph.prototype.hasConnections = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Flags = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Flags.repeatedFields_, null);
};
goog.inherits(proto.api.Flags, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Flags.displayName = 'proto.api.Flags';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Flags.repeatedFields_ = [5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Flags.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Flags.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Flags} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Flags.toObject = function(includeInstance, msg) {
  var f, obj = {
    openIdDiscovery: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storagePath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metrics: jspb.Message.getFieldWithDefault(msg, 3, false),
    allowHeadersList: jspb.Message.getRepeatedField(msg, 5),
    allowMethodsList: jspb.Message.getRepeatedField(msg, 6),
    allowOriginsList: jspb.Message.getRepeatedField(msg, 7),
    rootUsersList: jspb.Message.getRepeatedField(msg, 8),
    tlsCert: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tlsKey: jspb.Message.getFieldWithDefault(msg, 10, ""),
    playgroundClientId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    playgroundClientSecret: jspb.Message.getFieldWithDefault(msg, 12, ""),
    playgroundRedirect: jspb.Message.getFieldWithDefault(msg, 13, ""),
    playgroundSessionStore: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Flags}
 */
proto.api.Flags.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Flags;
  return proto.api.Flags.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Flags} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Flags}
 */
proto.api.Flags.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpenIdDiscovery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStoragePath(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMetrics(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowHeaders(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowMethods(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowOrigins(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addRootUsers(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsCert(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsKey(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaygroundClientId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaygroundClientSecret(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaygroundRedirect(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaygroundSessionStore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Flags.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Flags.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Flags} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Flags.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenIdDiscovery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStoragePath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetrics();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getAllowHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getAllowMethodsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getAllowOriginsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getRootUsersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getTlsCert();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getTlsKey();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPlaygroundClientId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPlaygroundClientSecret();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getPlaygroundRedirect();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getPlaygroundSessionStore();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional string open_id_discovery = 1;
 * @return {string}
 */
proto.api.Flags.prototype.getOpenIdDiscovery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setOpenIdDiscovery = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string storage_path = 2;
 * @return {string}
 */
proto.api.Flags.prototype.getStoragePath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setStoragePath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool metrics = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Flags.prototype.getMetrics = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.api.Flags.prototype.setMetrics = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated string allow_headers = 5;
 * @return {!Array<string>}
 */
proto.api.Flags.prototype.getAllowHeadersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.api.Flags.prototype.setAllowHeadersList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.api.Flags.prototype.addAllowHeaders = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.api.Flags.prototype.clearAllowHeadersList = function() {
  this.setAllowHeadersList([]);
};


/**
 * repeated string allow_methods = 6;
 * @return {!Array<string>}
 */
proto.api.Flags.prototype.getAllowMethodsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.api.Flags.prototype.setAllowMethodsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.api.Flags.prototype.addAllowMethods = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.api.Flags.prototype.clearAllowMethodsList = function() {
  this.setAllowMethodsList([]);
};


/**
 * repeated string allow_origins = 7;
 * @return {!Array<string>}
 */
proto.api.Flags.prototype.getAllowOriginsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.api.Flags.prototype.setAllowOriginsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.api.Flags.prototype.addAllowOrigins = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.api.Flags.prototype.clearAllowOriginsList = function() {
  this.setAllowOriginsList([]);
};


/**
 * repeated string root_users = 8;
 * @return {!Array<string>}
 */
proto.api.Flags.prototype.getRootUsersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.api.Flags.prototype.setRootUsersList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.api.Flags.prototype.addRootUsers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.api.Flags.prototype.clearRootUsersList = function() {
  this.setRootUsersList([]);
};


/**
 * optional string tls_cert = 9;
 * @return {string}
 */
proto.api.Flags.prototype.getTlsCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setTlsCert = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string tls_key = 10;
 * @return {string}
 */
proto.api.Flags.prototype.getTlsKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setTlsKey = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string playground_client_id = 11;
 * @return {string}
 */
proto.api.Flags.prototype.getPlaygroundClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setPlaygroundClientId = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string playground_client_secret = 12;
 * @return {string}
 */
proto.api.Flags.prototype.getPlaygroundClientSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setPlaygroundClientSecret = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string playground_redirect = 13;
 * @return {string}
 */
proto.api.Flags.prototype.getPlaygroundRedirect = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setPlaygroundRedirect = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string playground_session_store = 14;
 * @return {string}
 */
proto.api.Flags.prototype.getPlaygroundSessionStore = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.api.Flags.prototype.setPlaygroundSessionStore = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Boolean = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Boolean, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Boolean.displayName = 'proto.api.Boolean';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Boolean.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Boolean.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Boolean} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Boolean.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Boolean}
 */
proto.api.Boolean.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Boolean;
  return proto.api.Boolean.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Boolean} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Boolean}
 */
proto.api.Boolean.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Boolean.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Boolean.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Boolean} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Boolean.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool value = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.Boolean.prototype.getValue = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.api.Boolean.prototype.setValue = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Number = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Number, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Number.displayName = 'proto.api.Number';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Number.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Number.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Number} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Number.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Number}
 */
proto.api.Number.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Number;
  return proto.api.Number.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Number} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Number}
 */
proto.api.Number.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Number.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Number.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Number} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Number.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.api.Number.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.api.Number.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ExistsFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ExistsFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ExistsFilter.displayName = 'proto.api.ExistsFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ExistsFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ExistsFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ExistsFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ExistsFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    gtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 2, ""),
    seek: jspb.Message.getFieldWithDefault(msg, 3, ""),
    reverse: jspb.Message.getFieldWithDefault(msg, 4, false),
    index: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ExistsFilter}
 */
proto.api.ExistsFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ExistsFilter;
  return proto.api.ExistsFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ExistsFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ExistsFilter}
 */
proto.api.ExistsFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeek(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ExistsFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ExistsFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ExistsFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ExistsFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSeek();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getIndex();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string gtype = 1;
 * @return {string}
 */
proto.api.ExistsFilter.prototype.getGtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.ExistsFilter.prototype.setGtype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expression = 2;
 * @return {string}
 */
proto.api.ExistsFilter.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.api.ExistsFilter.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string seek = 3;
 * @return {string}
 */
proto.api.ExistsFilter.prototype.getSeek = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.api.ExistsFilter.prototype.setSeek = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool reverse = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.api.ExistsFilter.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.api.ExistsFilter.prototype.setReverse = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string index = 5;
 * @return {string}
 */
proto.api.ExistsFilter.prototype.getIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.api.ExistsFilter.prototype.setIndex = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Edit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Edit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Edit.displayName = 'proto.api.Edit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Edit.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Edit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Edit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Edit.toObject = function(includeInstance, msg) {
  var f, obj = {
    ref: (f = msg.getRef()) && proto.api.Ref.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Edit}
 */
proto.api.Edit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Edit;
  return proto.api.Edit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Edit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Edit}
 */
proto.api.Edit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setRef(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Edit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Edit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Edit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Edit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRef();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ref ref = 1;
 * @return {?proto.api.Ref}
 */
proto.api.Edit.prototype.getRef = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 1));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.Edit.prototype.setRef = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.Edit.prototype.clearRef = function() {
  this.setRef(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Edit.prototype.hasRef = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct attributes = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.Edit.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.Edit.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.Edit.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Edit.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.EditFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.EditFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.EditFilter.displayName = 'proto.api.EditFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.EditFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.EditFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.EditFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.EditFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && proto.api.Filter.toObject(includeInstance, f),
    attributes: (f = msg.getAttributes()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.EditFilter}
 */
proto.api.EditFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.EditFilter;
  return proto.api.EditFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.EditFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.EditFilter}
 */
proto.api.EditFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.Filter;
      reader.readMessage(value,proto.api.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.EditFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.EditFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.EditFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.EditFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.Filter.serializeBinaryToWriter
    );
  }
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional Filter filter = 1;
 * @return {?proto.api.Filter}
 */
proto.api.EditFilter.prototype.getFilter = function() {
  return /** @type{?proto.api.Filter} */ (
    jspb.Message.getWrapperField(this, proto.api.Filter, 1));
};


/** @param {?proto.api.Filter|undefined} value */
proto.api.EditFilter.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.EditFilter.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.EditFilter.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Struct attributes = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.EditFilter.prototype.getAttributes = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.EditFilter.prototype.setAttributes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.EditFilter.prototype.clearAttributes = function() {
  this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.EditFilter.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Pong.displayName = 'proto.api.Pong';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Pong}
 */
proto.api.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Pong;
  return proto.api.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Pong}
 */
proto.api.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.api.Pong.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.Pong.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.OutboundMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.OutboundMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.OutboundMessage.displayName = 'proto.api.OutboundMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.OutboundMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.api.OutboundMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.OutboundMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.OutboundMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.OutboundMessage}
 */
proto.api.OutboundMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.OutboundMessage;
  return proto.api.OutboundMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.OutboundMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.OutboundMessage}
 */
proto.api.OutboundMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.OutboundMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.OutboundMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.OutboundMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.OutboundMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.api.OutboundMessage.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.OutboundMessage.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct data = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.OutboundMessage.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.OutboundMessage.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.OutboundMessage.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.OutboundMessage.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Message.displayName = 'proto.api.Message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    data: (f = msg.getData()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.api.Ref.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    method: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Message}
 */
proto.api.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Message;
  return proto.api.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Message}
 */
proto.api.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 3:
      var value = new proto.api.Ref;
      reader.readMessage(value,proto.api.Ref.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Ref.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.api.Message.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.Message.prototype.setChannel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Struct data = 2;
 * @return {?proto.google.protobuf.Struct}
 */
proto.api.Message.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 2));
};


/** @param {?proto.google.protobuf.Struct|undefined} value */
proto.api.Message.prototype.setData = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.Message.prototype.clearData = function() {
  this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Message.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Ref user = 3;
 * @return {?proto.api.Ref}
 */
proto.api.Message.prototype.getUser = function() {
  return /** @type{?proto.api.Ref} */ (
    jspb.Message.getWrapperField(this, proto.api.Ref, 3));
};


/** @param {?proto.api.Ref|undefined} value */
proto.api.Message.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.Message.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Message.prototype.hasUser = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.api.Message.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.api.Message.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.api.Message.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Message.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string method = 5;
 * @return {string}
 */
proto.api.Message.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.api.Message.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Schema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.Schema.repeatedFields_, null);
};
goog.inherits(proto.api.Schema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Schema.displayName = 'proto.api.Schema';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.Schema.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Schema.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Schema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Schema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Schema.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionTypesList: jspb.Message.getRepeatedField(msg, 1),
    docTypesList: jspb.Message.getRepeatedField(msg, 2),
    authorizers: (f = msg.getAuthorizers()) && proto.api.Authorizers.toObject(includeInstance, f),
    validators: (f = msg.getValidators()) && proto.api.TypeValidators.toObject(includeInstance, f),
    indexes: (f = msg.getIndexes()) && proto.api.Indexes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Schema}
 */
proto.api.Schema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Schema;
  return proto.api.Schema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Schema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Schema}
 */
proto.api.Schema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addConnectionTypes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDocTypes(value);
      break;
    case 3:
      var value = new proto.api.Authorizers;
      reader.readMessage(value,proto.api.Authorizers.deserializeBinaryFromReader);
      msg.setAuthorizers(value);
      break;
    case 4:
      var value = new proto.api.TypeValidators;
      reader.readMessage(value,proto.api.TypeValidators.deserializeBinaryFromReader);
      msg.setValidators(value);
      break;
    case 5:
      var value = new proto.api.Indexes;
      reader.readMessage(value,proto.api.Indexes.deserializeBinaryFromReader);
      msg.setIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Schema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Schema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Schema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Schema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getDocTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAuthorizers();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.Authorizers.serializeBinaryToWriter
    );
  }
  f = message.getValidators();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.api.TypeValidators.serializeBinaryToWriter
    );
  }
  f = message.getIndexes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.api.Indexes.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string connection_types = 1;
 * @return {!Array<string>}
 */
proto.api.Schema.prototype.getConnectionTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.api.Schema.prototype.setConnectionTypesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.api.Schema.prototype.addConnectionTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.api.Schema.prototype.clearConnectionTypesList = function() {
  this.setConnectionTypesList([]);
};


/**
 * repeated string doc_types = 2;
 * @return {!Array<string>}
 */
proto.api.Schema.prototype.getDocTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.api.Schema.prototype.setDocTypesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.api.Schema.prototype.addDocTypes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.api.Schema.prototype.clearDocTypesList = function() {
  this.setDocTypesList([]);
};


/**
 * optional Authorizers authorizers = 3;
 * @return {?proto.api.Authorizers}
 */
proto.api.Schema.prototype.getAuthorizers = function() {
  return /** @type{?proto.api.Authorizers} */ (
    jspb.Message.getWrapperField(this, proto.api.Authorizers, 3));
};


/** @param {?proto.api.Authorizers|undefined} value */
proto.api.Schema.prototype.setAuthorizers = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.Schema.prototype.clearAuthorizers = function() {
  this.setAuthorizers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Schema.prototype.hasAuthorizers = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeValidators validators = 4;
 * @return {?proto.api.TypeValidators}
 */
proto.api.Schema.prototype.getValidators = function() {
  return /** @type{?proto.api.TypeValidators} */ (
    jspb.Message.getWrapperField(this, proto.api.TypeValidators, 4));
};


/** @param {?proto.api.TypeValidators|undefined} value */
proto.api.Schema.prototype.setValidators = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.api.Schema.prototype.clearValidators = function() {
  this.setValidators(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Schema.prototype.hasValidators = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Indexes indexes = 5;
 * @return {?proto.api.Indexes}
 */
proto.api.Schema.prototype.getIndexes = function() {
  return /** @type{?proto.api.Indexes} */ (
    jspb.Message.getWrapperField(this, proto.api.Indexes, 5));
};


/** @param {?proto.api.Indexes|undefined} value */
proto.api.Schema.prototype.setIndexes = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.api.Schema.prototype.clearIndexes = function() {
  this.setIndexes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.Schema.prototype.hasIndexes = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ExprFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ExprFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ExprFilter.displayName = 'proto.api.ExprFilter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ExprFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ExprFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ExprFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ExprFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
    expression: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ExprFilter}
 */
proto.api.ExprFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ExprFilter;
  return proto.api.ExprFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ExprFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ExprFilter}
 */
proto.api.ExprFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ExprFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ExprFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ExprFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ExprFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string expression = 1;
 * @return {string}
 */
proto.api.ExprFilter.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.api.ExprFilter.prototype.setExpression = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.api.Algorithm = {
  BFS: 0,
  DFS: 1
};

/**
 * @enum {number}
 */
proto.api.Aggregate = {
  COUNT: 0,
  SUM: 1,
  AVG: 2,
  MAX: 3,
  MIN: 4,
  PROD: 5
};

goog.object.extend(exports, proto.api);
