// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.6.1
// source: graphik.proto

package apipb

import (
	context "context"
	_ "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Algorithm int32

const (
	// BFS is short for the breadth-first search algorithm
	Algorithm_BFS Algorithm = 0
	// DFS is short for the depth-first search algorithm
	Algorithm_DFS Algorithm = 1
)

// Enum value maps for Algorithm.
var (
	Algorithm_name = map[int32]string{
		0: "BFS",
		1: "DFS",
	}
	Algorithm_value = map[string]int32{
		"BFS": 0,
		"DFS": 1,
	}
)

func (x Algorithm) Enum() *Algorithm {
	p := new(Algorithm)
	*p = x
	return p
}

func (x Algorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Algorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_graphik_proto_enumTypes[0].Descriptor()
}

func (Algorithm) Type() protoreflect.EnumType {
	return &file_graphik_proto_enumTypes[0]
}

func (x Algorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Algorithm.Descriptor instead.
func (Algorithm) EnumDescriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{0}
}

type Aggregate int32

const (
	Aggregate_COUNT Aggregate = 0
	Aggregate_SUM   Aggregate = 1
	Aggregate_AVG   Aggregate = 2
	Aggregate_MAX   Aggregate = 3
	Aggregate_MIN   Aggregate = 4
	Aggregate_PROD  Aggregate = 5
)

// Enum value maps for Aggregate.
var (
	Aggregate_name = map[int32]string{
		0: "COUNT",
		1: "SUM",
		2: "AVG",
		3: "MAX",
		4: "MIN",
		5: "PROD",
	}
	Aggregate_value = map[string]int32{
		"COUNT": 0,
		"SUM":   1,
		"AVG":   2,
		"MAX":   3,
		"MIN":   4,
		"PROD":  5,
	}
)

func (x Aggregate) Enum() *Aggregate {
	p := new(Aggregate)
	*p = x
	return p
}

func (x Aggregate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregate) Descriptor() protoreflect.EnumDescriptor {
	return file_graphik_proto_enumTypes[1].Descriptor()
}

func (Aggregate) Type() protoreflect.EnumType {
	return &file_graphik_proto_enumTypes[1]
}

func (x Aggregate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregate.Descriptor instead.
func (Aggregate) EnumDescriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{1}
}

// Ref describes a doc/connection type & id
type Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gtype is the type of the doc/connection ex: pet
	Gtype string `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// gid is the unique id of the doc/connection within the context of it's type
	Gid string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *Ref) Reset() {
	*x = Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{0}
}

func (x *Ref) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *Ref) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

// RefConstructor creates a new Ref
type RefConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gtype is the type of the doc/connection ex: pet
	Gtype string `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// gid is the unique id of the doc/connection within the context of it's type
	Gid string `protobuf:"bytes,2,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *RefConstructor) Reset() {
	*x = RefConstructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefConstructor) ProtoMessage() {}

func (x *RefConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefConstructor.ProtoReflect.Descriptor instead.
func (*RefConstructor) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{1}
}

func (x *RefConstructor) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *RefConstructor) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

// Refs is an array of refs
type Refs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refs []*Ref `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *Refs) Reset() {
	*x = Refs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Refs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Refs) ProtoMessage() {}

func (x *Refs) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Refs.ProtoReflect.Descriptor instead.
func (*Refs) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{2}
}

func (x *Refs) GetRefs() []*Ref {
	if x != nil {
		return x.Refs
	}
	return nil
}

// Doc is a Graph primitive representing a single entity/resource. It is connected to other docs via Connections
type Doc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref is the ref to the doc
	Ref *Ref `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Doc) Reset() {
	*x = Doc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Doc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Doc) ProtoMessage() {}

func (x *Doc) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Doc.ProtoReflect.Descriptor instead.
func (*Doc) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{3}
}

func (x *Doc) GetRef() *Ref {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Doc) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// DocConstructor is used to create a doc
type DocConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref is the ref to the new Doc. If an id isn't present, one will be generated.
	Ref *RefConstructor `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// arbitrary k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *DocConstructor) Reset() {
	*x = DocConstructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocConstructor) ProtoMessage() {}

func (x *DocConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocConstructor.ProtoReflect.Descriptor instead.
func (*DocConstructor) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{4}
}

func (x *DocConstructor) GetRef() *RefConstructor {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *DocConstructor) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// DocConstructor is used to create a batch of docs
type DocConstructors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// docs is an array of doc constructors
	Docs []*DocConstructor `protobuf:"bytes,1,rep,name=docs,proto3" json:"docs,omitempty"`
}

func (x *DocConstructors) Reset() {
	*x = DocConstructors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocConstructors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocConstructors) ProtoMessage() {}

func (x *DocConstructors) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocConstructors.ProtoReflect.Descriptor instead.
func (*DocConstructors) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{5}
}

func (x *DocConstructors) GetDocs() []*DocConstructor {
	if x != nil {
		return x.Docs
	}
	return nil
}

type Traversal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doc           *Doc   `protobuf:"bytes,1,opt,name=doc,proto3" json:"doc,omitempty"`
	TraversalPath []*Ref `protobuf:"bytes,2,rep,name=traversal_path,json=traversalPath,proto3" json:"traversal_path,omitempty"`
	Depth         uint64 `protobuf:"varint,3,opt,name=depth,proto3" json:"depth,omitempty"`
	Hops          uint64 `protobuf:"varint,4,opt,name=hops,proto3" json:"hops,omitempty"`
}

func (x *Traversal) Reset() {
	*x = Traversal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traversal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traversal) ProtoMessage() {}

func (x *Traversal) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traversal.ProtoReflect.Descriptor instead.
func (*Traversal) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{6}
}

func (x *Traversal) GetDoc() *Doc {
	if x != nil {
		return x.Doc
	}
	return nil
}

func (x *Traversal) GetTraversalPath() []*Ref {
	if x != nil {
		return x.TraversalPath
	}
	return nil
}

func (x *Traversal) GetDepth() uint64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *Traversal) GetHops() uint64 {
	if x != nil {
		return x.Hops
	}
	return 0
}

type Traversals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traversals []*Traversal `protobuf:"bytes,1,rep,name=traversals,proto3" json:"traversals,omitempty"`
}

func (x *Traversals) Reset() {
	*x = Traversals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traversals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traversals) ProtoMessage() {}

func (x *Traversals) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traversals.ProtoReflect.Descriptor instead.
func (*Traversals) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{7}
}

func (x *Traversals) GetTraversals() []*Traversal {
	if x != nil {
		return x.Traversals
	}
	return nil
}

// Docs is an array of docs
type Docs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// docs is an array of docs
	Docs     []*Doc `protobuf:"bytes,1,rep,name=docs,proto3" json:"docs,omitempty"`
	SeekNext string `protobuf:"bytes,2,opt,name=seek_next,json=seekNext,proto3" json:"seek_next,omitempty"`
}

func (x *Docs) Reset() {
	*x = Docs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Docs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Docs) ProtoMessage() {}

func (x *Docs) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Docs.ProtoReflect.Descriptor instead.
func (*Docs) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{8}
}

func (x *Docs) GetDocs() []*Doc {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Docs) GetSeekNext() string {
	if x != nil {
		return x.SeekNext
	}
	return ""
}

// Connection is a graph primitive that represents a relationship between two docs
type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref is the ref to the connection
	Ref *Ref `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// attributes are k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// directed is false if the connection is bi-directional
	Directed bool `protobuf:"varint,3,opt,name=directed,proto3" json:"directed,omitempty"`
	// from is the doc ref that is the source of the connection
	From *Ref `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// to is the doc ref that is the destination of the connection
	To *Ref `protobuf:"bytes,5,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{9}
}

func (x *Connection) GetRef() *Ref {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Connection) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Connection) GetDirected() bool {
	if x != nil {
		return x.Directed
	}
	return false
}

func (x *Connection) GetFrom() *Ref {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Connection) GetTo() *Ref {
	if x != nil {
		return x.To
	}
	return nil
}

// ConnectionConstructor is used to create an Connection
type ConnectionConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref is the ref to the new Connection. If an id isn't present, one will be generated.
	Ref *RefConstructor `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// attributes are k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// directed is false if the connection is bi-directional
	Directed bool `protobuf:"varint,4,opt,name=directed,proto3" json:"directed,omitempty"`
	// from is the doc ref that is the root of the connection
	From *Ref `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	// to is the doc ref that is the destination of the connection
	To *Ref `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *ConnectionConstructor) Reset() {
	*x = ConnectionConstructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConstructor) ProtoMessage() {}

func (x *ConnectionConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConstructor.ProtoReflect.Descriptor instead.
func (*ConnectionConstructor) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectionConstructor) GetRef() *RefConstructor {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *ConnectionConstructor) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ConnectionConstructor) GetDirected() bool {
	if x != nil {
		return x.Directed
	}
	return false
}

func (x *ConnectionConstructor) GetFrom() *Ref {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ConnectionConstructor) GetTo() *Ref {
	if x != nil {
		return x.To
	}
	return nil
}

type SConnectFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Gtype  string  `protobuf:"bytes,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// attributes are k/v pairs
	Attributes *_struct.Struct `protobuf:"bytes,3,opt,name=attributes,proto3" json:"attributes,omitempty"`
	// directed is false if the connection is bi-directional
	Directed bool `protobuf:"varint,4,opt,name=directed,proto3" json:"directed,omitempty"`
	// from is the doc ref that is the root of the connection
	From *Ref `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *SConnectFilter) Reset() {
	*x = SConnectFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SConnectFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SConnectFilter) ProtoMessage() {}

func (x *SConnectFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SConnectFilter.ProtoReflect.Descriptor instead.
func (*SConnectFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{11}
}

func (x *SConnectFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SConnectFilter) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *SConnectFilter) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SConnectFilter) GetDirected() bool {
	if x != nil {
		return x.Directed
	}
	return false
}

func (x *SConnectFilter) GetFrom() *Ref {
	if x != nil {
		return x.From
	}
	return nil
}

// ConnectionConstructors is an array of ConnectionConstructor
type ConnectionConstructors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*ConnectionConstructor `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *ConnectionConstructors) Reset() {
	*x = ConnectionConstructors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionConstructors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConstructors) ProtoMessage() {}

func (x *ConnectionConstructors) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConstructors.ProtoReflect.Descriptor instead.
func (*ConnectionConstructors) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{12}
}

func (x *ConnectionConstructors) GetConnections() []*ConnectionConstructor {
	if x != nil {
		return x.Connections
	}
	return nil
}

// Connections is an array of Connection
type Connections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
	SeekNext    string        `protobuf:"bytes,2,opt,name=seek_next,json=seekNext,proto3" json:"seek_next,omitempty"`
}

func (x *Connections) Reset() {
	*x = Connections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connections) ProtoMessage() {}

func (x *Connections) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connections.ProtoReflect.Descriptor instead.
func (*Connections) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{13}
}

func (x *Connections) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *Connections) GetSeekNext() string {
	if x != nil {
		return x.SeekNext
	}
	return ""
}

// CFilter is used to fetch connections related to a single noted
type CFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// doc_ref is the ref to the target doc. (validator.field) = {msg_exists : true}]
	DocRef *Ref `protobuf:"bytes,1,opt,name=doc_ref,json=docRef,proto3" json:"doc_ref,omitempty"`
	// gtype is the type of connections to return. (validator.field) = {regex : "^.{1,225}$"}
	Gtype string `protobuf:"bytes,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// expression is a CEL expression used to filter connections/modes
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	// limit is the maximum number of items to return. (validator.field) = {int_gt : 0}
	Limit uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// custom sorting of the results. (validator.field) = {regex : "((^|, )(|ref.gid|ref.gtype|^attributes.(.*)))+$"}
	Sort string `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	// seek to a specific key for pagination
	Seek string `protobuf:"bytes,6,opt,name=seek,proto3" json:"seek,omitempty"`
	// reverse the results
	Reverse bool `protobuf:"varint,7,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *CFilter) Reset() {
	*x = CFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CFilter) ProtoMessage() {}

func (x *CFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CFilter.ProtoReflect.Descriptor instead.
func (*CFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{14}
}

func (x *CFilter) GetDocRef() *Ref {
	if x != nil {
		return x.DocRef
	}
	return nil
}

func (x *CFilter) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *CFilter) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *CFilter) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CFilter) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *CFilter) GetSeek() string {
	if x != nil {
		return x.Seek
	}
	return ""
}

func (x *CFilter) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

// Filter is a generic filter using Common Expression Language
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gtype is the doc/connection type to be filtered
	Gtype string `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// expression is a CEL expression used to filter connections/modes
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// limit is the maximum number of items to return
	Limit uint64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// custom sorting of the results.
	Sort string `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	// seek to a specific key for pagination
	Seek string `protobuf:"bytes,5,opt,name=seek,proto3" json:"seek,omitempty"`
	// reverse the results
	Reverse bool `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// search in a specific index
	Index string `protobuf:"bytes,7,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{15}
}

func (x *Filter) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *Filter) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Filter) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Filter) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *Filter) GetSeek() string {
	if x != nil {
		return x.Seek
	}
	return ""
}

func (x *Filter) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *Filter) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

type AggFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    *Filter   `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	Aggregate Aggregate `protobuf:"varint,2,opt,name=aggregate,proto3,enum=api.Aggregate" json:"aggregate,omitempty"`
	Field     string    `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *AggFilter) Reset() {
	*x = AggFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggFilter) ProtoMessage() {}

func (x *AggFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggFilter.ProtoReflect.Descriptor instead.
func (*AggFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{16}
}

func (x *AggFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *AggFilter) GetAggregate() Aggregate {
	if x != nil {
		return x.Aggregate
	}
	return Aggregate_COUNT
}

func (x *AggFilter) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type TFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root                 *Ref   `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	DocExpression        string `protobuf:"bytes,2,opt,name=doc_expression,json=docExpression,proto3" json:"doc_expression,omitempty"`
	ConnectionExpression string `protobuf:"bytes,3,opt,name=connection_expression,json=connectionExpression,proto3" json:"connection_expression,omitempty"`
	Limit                uint64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// custom sorting of the results. (validator.field) = {regex : "((^|, )(|ref.gid|ref.gtype|^attributes.(.*)))+$"}
	Sort      string    `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Reverse   bool      `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`
	Algorithm Algorithm `protobuf:"varint,7,opt,name=algorithm,proto3,enum=api.Algorithm" json:"algorithm,omitempty"`
	// maximum degree/depth of nodes to be visited during traversal
	MaxDepth uint64 `protobuf:"varint,8,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	// maximum number of nodes to be visited during traversal
	MaxHops uint64 `protobuf:"varint,9,opt,name=max_hops,json=maxHops,proto3" json:"max_hops,omitempty"`
}

func (x *TFilter) Reset() {
	*x = TFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFilter) ProtoMessage() {}

func (x *TFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFilter.ProtoReflect.Descriptor instead.
func (*TFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{17}
}

func (x *TFilter) GetRoot() *Ref {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *TFilter) GetDocExpression() string {
	if x != nil {
		return x.DocExpression
	}
	return ""
}

func (x *TFilter) GetConnectionExpression() string {
	if x != nil {
		return x.ConnectionExpression
	}
	return ""
}

func (x *TFilter) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TFilter) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *TFilter) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *TFilter) GetAlgorithm() Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return Algorithm_BFS
}

func (x *TFilter) GetMaxDepth() uint64 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *TFilter) GetMaxHops() uint64 {
	if x != nil {
		return x.MaxHops
	}
	return 0
}

type IndexConstructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// gtype is the doc/connection type to be filtered
	Gtype string `protobuf:"bytes,3,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// expression is a CEL expression used to filter connections/modes
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	// if docs is true, this index will be applied to documents. Either docs or connections may be true, but not both.
	Docs bool `protobuf:"varint,6,opt,name=docs,proto3" json:"docs,omitempty"`
	// if docs is true, this index will be applied to connections. Either docs or connections may be true, but not both.
	Connections bool `protobuf:"varint,7,opt,name=connections,proto3" json:"connections,omitempty"`
}

func (x *IndexConstructor) Reset() {
	*x = IndexConstructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexConstructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexConstructor) ProtoMessage() {}

func (x *IndexConstructor) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexConstructor.ProtoReflect.Descriptor instead.
func (*IndexConstructor) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{18}
}

func (x *IndexConstructor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexConstructor) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *IndexConstructor) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *IndexConstructor) GetDocs() bool {
	if x != nil {
		return x.Docs
	}
	return false
}

func (x *IndexConstructor) GetConnections() bool {
	if x != nil {
		return x.Connections
	}
	return false
}

type Authorizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *Authorizer) Reset() {
	*x = Authorizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorizer) ProtoMessage() {}

func (x *Authorizer) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorizer.ProtoReflect.Descriptor instead.
func (*Authorizer) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{19}
}

func (x *Authorizer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Authorizer) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type Authorizers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authorizers []*Authorizer `protobuf:"bytes,1,rep,name=authorizers,proto3" json:"authorizers,omitempty"`
}

func (x *Authorizers) Reset() {
	*x = Authorizers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authorizers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authorizers) ProtoMessage() {}

func (x *Authorizers) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authorizers.ProtoReflect.Descriptor instead.
func (*Authorizers) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{20}
}

func (x *Authorizers) GetAuthorizers() []*Authorizer {
	if x != nil {
		return x.Authorizers
	}
	return nil
}

type TypeValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Gtype      string `protobuf:"bytes,2,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	// if docs is true, this validator will be applied to documents. Either docs or connections may be true, but not both.
	Docs bool `protobuf:"varint,4,opt,name=docs,proto3" json:"docs,omitempty"`
	// if docs is true, this validator will be applied to connections. Either docs or connections may be true, but not both.
	Connections bool `protobuf:"varint,5,opt,name=connections,proto3" json:"connections,omitempty"`
}

func (x *TypeValidator) Reset() {
	*x = TypeValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeValidator) ProtoMessage() {}

func (x *TypeValidator) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeValidator.ProtoReflect.Descriptor instead.
func (*TypeValidator) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{21}
}

func (x *TypeValidator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeValidator) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *TypeValidator) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *TypeValidator) GetDocs() bool {
	if x != nil {
		return x.Docs
	}
	return false
}

func (x *TypeValidator) GetConnections() bool {
	if x != nil {
		return x.Connections
	}
	return false
}

type TypeValidators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []*TypeValidator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *TypeValidators) Reset() {
	*x = TypeValidators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeValidators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeValidators) ProtoMessage() {}

func (x *TypeValidators) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeValidators.ProtoReflect.Descriptor instead.
func (*TypeValidators) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{22}
}

func (x *TypeValidators) GetValidators() []*TypeValidator {
	if x != nil {
		return x.Validators
	}
	return nil
}

type Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// gtype is the doc/connection type to be filtered
	Gtype string `protobuf:"bytes,3,opt,name=gtype,proto3" json:"gtype,omitempty"`
	// expression is a CEL expression used to filter connections/modes
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	// if docs is true, this index will be applied to documents. Either docs or connections may be true, but not both.
	Docs bool `protobuf:"varint,6,opt,name=docs,proto3" json:"docs,omitempty"`
	// if docs is true, this index will be applied to connections. Either docs or connections may be true, but not both.
	Connections bool `protobuf:"varint,7,opt,name=connections,proto3" json:"connections,omitempty"`
}

func (x *Index) Reset() {
	*x = Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Index) ProtoMessage() {}

func (x *Index) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Index.ProtoReflect.Descriptor instead.
func (*Index) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{23}
}

func (x *Index) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Index) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *Index) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Index) GetDocs() bool {
	if x != nil {
		return x.Docs
	}
	return false
}

func (x *Index) GetConnections() bool {
	if x != nil {
		return x.Connections
	}
	return false
}

type Indexes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []*Index `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *Indexes) Reset() {
	*x = Indexes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indexes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indexes) ProtoMessage() {}

func (x *Indexes) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indexes.ProtoReflect.Descriptor instead.
func (*Indexes) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{24}
}

func (x *Indexes) GetIndexes() []*Index {
	if x != nil {
		return x.Indexes
	}
	return nil
}

// ChanFilter is used to filter messages in a pubsub channel
type ChanFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel is the target channel to filter from
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// expression is CEL expression used to filter messages
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ChanFilter) Reset() {
	*x = ChanFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChanFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChanFilter) ProtoMessage() {}

func (x *ChanFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChanFilter.ProtoReflect.Descriptor instead.
func (*ChanFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{25}
}

func (x *ChanFilter) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *ChanFilter) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// Graph is an array of docs and connections
type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// docs are docs present in the graph
	Docs *Docs `protobuf:"bytes,1,opt,name=docs,proto3" json:"docs,omitempty"`
	// connections are connections present in the graph
	Connections *Connections `protobuf:"bytes,2,opt,name=connections,proto3" json:"connections,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{26}
}

func (x *Graph) GetDocs() *Docs {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Graph) GetConnections() *Connections {
	if x != nil {
		return x.Connections
	}
	return nil
}

type Flags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// open id connect discovery uri ex: https://accounts.google.com/.well-known/openid-configuration (env: GRAPHIK_OPEN_ID)
	OpenIdDiscovery string `protobuf:"bytes,1,opt,name=open_id_discovery,json=openIdDiscovery,proto3" json:"open_id_discovery,omitempty"`
	// persistant storage ref (env: GRAPHIK_STORAGE_PATH)
	StoragePath string `protobuf:"bytes,2,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	// enable prometheus & pprof metrics (emv: GRAPHIK_METRICS = true)
	Metrics bool `protobuf:"varint,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// cors allow headers (env: GRAPHIK_ALLOW_HEADERS)
	AllowHeaders []string `protobuf:"bytes,5,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// cors allow methods (env: GRAPHIK_ALLOW_METHODS)
	AllowMethods []string `protobuf:"bytes,6,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// cors allow origins (env: GRAPHIK_ALLOW_ORIGINS)
	AllowOrigins []string `protobuf:"bytes,7,rep,name=allow_origins,json=allowOrigins,proto3" json:"allow_origins,omitempty"`
	// root user is a list of email addresses that bypass authorizers. (env: GRAPHIK_ROOT_USERS)
	RootUsers              []string `protobuf:"bytes,8,rep,name=root_users,json=rootUsers,proto3" json:"root_users,omitempty"`
	TlsCert                string   `protobuf:"bytes,9,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	TlsKey                 string   `protobuf:"bytes,10,opt,name=tls_key,json=tlsKey,proto3" json:"tls_key,omitempty"`
	PlaygroundClientId     string   `protobuf:"bytes,11,opt,name=playground_client_id,json=playgroundClientId,proto3" json:"playground_client_id,omitempty"`
	PlaygroundClientSecret string   `protobuf:"bytes,12,opt,name=playground_client_secret,json=playgroundClientSecret,proto3" json:"playground_client_secret,omitempty"`
	PlaygroundRedirect     string   `protobuf:"bytes,13,opt,name=playground_redirect,json=playgroundRedirect,proto3" json:"playground_redirect,omitempty"`
}

func (x *Flags) Reset() {
	*x = Flags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flags) ProtoMessage() {}

func (x *Flags) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flags.ProtoReflect.Descriptor instead.
func (*Flags) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{27}
}

func (x *Flags) GetOpenIdDiscovery() string {
	if x != nil {
		return x.OpenIdDiscovery
	}
	return ""
}

func (x *Flags) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *Flags) GetMetrics() bool {
	if x != nil {
		return x.Metrics
	}
	return false
}

func (x *Flags) GetAllowHeaders() []string {
	if x != nil {
		return x.AllowHeaders
	}
	return nil
}

func (x *Flags) GetAllowMethods() []string {
	if x != nil {
		return x.AllowMethods
	}
	return nil
}

func (x *Flags) GetAllowOrigins() []string {
	if x != nil {
		return x.AllowOrigins
	}
	return nil
}

func (x *Flags) GetRootUsers() []string {
	if x != nil {
		return x.RootUsers
	}
	return nil
}

func (x *Flags) GetTlsCert() string {
	if x != nil {
		return x.TlsCert
	}
	return ""
}

func (x *Flags) GetTlsKey() string {
	if x != nil {
		return x.TlsKey
	}
	return ""
}

func (x *Flags) GetPlaygroundClientId() string {
	if x != nil {
		return x.PlaygroundClientId
	}
	return ""
}

func (x *Flags) GetPlaygroundClientSecret() string {
	if x != nil {
		return x.PlaygroundClientSecret
	}
	return ""
}

func (x *Flags) GetPlaygroundRedirect() string {
	if x != nil {
		return x.PlaygroundRedirect
	}
	return ""
}

// Boolean is a simple boolean value
type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{28}
}

func (x *Boolean) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

// Number is a simple double/float64 value
type Number struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Number) Reset() {
	*x = Number{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Number) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Number) ProtoMessage() {}

func (x *Number) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Number.ProtoReflect.Descriptor instead.
func (*Number) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{29}
}

func (x *Number) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// ExistsFilter is used as input into all Exists(boolean) related queries.
type ExistsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gtype      string `protobuf:"bytes,1,opt,name=gtype,proto3" json:"gtype,omitempty"`
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// seek to a specific key for pagination
	Seek string `protobuf:"bytes,3,opt,name=seek,proto3" json:"seek,omitempty"`
	// reverse the results
	Reverse bool `protobuf:"varint,4,opt,name=reverse,proto3" json:"reverse,omitempty"`
	// search in a specific index
	Index string `protobuf:"bytes,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *ExistsFilter) Reset() {
	*x = ExistsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsFilter) ProtoMessage() {}

func (x *ExistsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsFilter.ProtoReflect.Descriptor instead.
func (*ExistsFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{30}
}

func (x *ExistsFilter) GetGtype() string {
	if x != nil {
		return x.Gtype
	}
	return ""
}

func (x *ExistsFilter) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *ExistsFilter) GetSeek() string {
	if x != nil {
		return x.Seek
	}
	return ""
}

func (x *ExistsFilter) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

func (x *ExistsFilter) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

// Edit patches the attributes of a Doc or Connection
type Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ref is the ref to the target doc/connection to patch
	Ref *Ref `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// attributes are k/v pairs used to overwrite k/v pairs on a doc/connection
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Edit) Reset() {
	*x = Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edit) ProtoMessage() {}

func (x *Edit) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edit.ProtoReflect.Descriptor instead.
func (*Edit) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{31}
}

func (x *Edit) GetRef() *Ref {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *Edit) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// EFilter is used to patch/edit docs/connections
type EFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter is used to filter docs/connections to patch
	Filter *Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// attributes are k/v pairs used to overwrite k/v pairs on all docs/connections that pass the filter
	Attributes *_struct.Struct `protobuf:"bytes,2,opt,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *EFilter) Reset() {
	*x = EFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EFilter) ProtoMessage() {}

func (x *EFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EFilter.ProtoReflect.Descriptor instead.
func (*EFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{32}
}

func (x *EFilter) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *EFilter) GetAttributes() *_struct.Struct {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Pong returns PONG if the server is healthy
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message returns PONG if healthy
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{33}
}

func (x *Pong) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// OutboundMessage is a message to be published to a pubsub channel
type OutboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel is the target channel to send the message to
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// data is the data to send with the message
	Data *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OutboundMessage) Reset() {
	*x = OutboundMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessage) ProtoMessage() {}

func (x *OutboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessage.ProtoReflect.Descriptor instead.
func (*OutboundMessage) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{34}
}

func (x *OutboundMessage) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *OutboundMessage) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// Message is received on PubSub subscriptions
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// channel is the channel the message was sent to
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// data is the data sent with the message
	Data *_struct.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// sender is the user that sent the message
	Sender *Ref `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	// timestamp is when the message was sent
	Timestamp *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{35}
}

func (x *Message) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Message) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Message) GetSender() *Ref {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *Message) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Schema returns registered connection & doc types
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connection_types are the types of connections in the graph
	ConnectionTypes []string `protobuf:"bytes,1,rep,name=connection_types,json=connectionTypes,proto3" json:"connection_types,omitempty"`
	// doc_types are the types of docs in the graph
	DocTypes    []string        `protobuf:"bytes,2,rep,name=doc_types,json=docTypes,proto3" json:"doc_types,omitempty"`
	Authorizers *Authorizers    `protobuf:"bytes,3,opt,name=authorizers,proto3" json:"authorizers,omitempty"`
	Validators  *TypeValidators `protobuf:"bytes,4,opt,name=validators,proto3" json:"validators,omitempty"`
	Indexes     *Indexes        `protobuf:"bytes,5,opt,name=indexes,proto3" json:"indexes,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{36}
}

func (x *Schema) GetConnectionTypes() []string {
	if x != nil {
		return x.ConnectionTypes
	}
	return nil
}

func (x *Schema) GetDocTypes() []string {
	if x != nil {
		return x.DocTypes
	}
	return nil
}

func (x *Schema) GetAuthorizers() *Authorizers {
	if x != nil {
		return x.Authorizers
	}
	return nil
}

func (x *Schema) GetValidators() *TypeValidators {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *Schema) GetIndexes() *Indexes {
	if x != nil {
		return x.Indexes
	}
	return nil
}

type ExprFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// expression is a CEL expression used to filter connections/nodes
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *ExprFilter) Reset() {
	*x = ExprFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExprFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExprFilter) ProtoMessage() {}

func (x *ExprFilter) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExprFilter.ProtoReflect.Descriptor instead.
func (*ExprFilter) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{37}
}

func (x *ExprFilter) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method is the rpc method
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// user is the user making the request
	User *Doc `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// timestamp is when the intercept was received
	Timestamp *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// request is the intercepted request
	Request *_struct.Struct `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_graphik_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_graphik_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_graphik_proto_rawDescGZIP(), []int{38}
}

func (x *Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Request) GetUser() *Doc {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Request) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Request) GetRequest() *_struct.Struct {
	if x != nil {
		return x.Request
	}
	return nil
}

var File_graphik_proto protoreflect.FileDescriptor

var file_graphik_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f,
	0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a,
	0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x05, 0x67, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d,
	0x24, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e,
	0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x22, 0x24, 0x0a, 0x04, 0x52, 0x65, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x66, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x62, 0x0a, 0x03, 0x44, 0x6f, 0x63, 0x12,
	0x22, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03,
	0x72, 0x65, 0x66, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x0e,
	0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x37, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x6f, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f,
	0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x2f, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x41, 0x0a, 0x04, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1c, 0x0a,
	0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x6f, 0x63, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x65, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x65, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x37, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x20, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xc6,
	0x01, 0x0a, 0x0e, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20,
	0x01, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x56, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x5d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x65, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x22, 0x93,
	0x02, 0x0a, 0x07, 0x43, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x64, 0x6f,
	0x63, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x64,
	0x6f, 0x63, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31,
	0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0xdf, 0x1f, 0x31, 0x0a,
	0x2f, 0x28, 0x28, 0x5e, 0x7c, 0x2c, 0x20, 0x29, 0x28, 0x7c, 0x72, 0x65, 0x66, 0x2e, 0x67, 0x69,
	0x64, 0x7c, 0x72, 0x65, 0x66, 0x2e, 0x67, 0x74, 0x79, 0x70, 0x65, 0x7c, 0x5e, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x28, 0x2e, 0x2a, 0x29, 0x29, 0x29, 0x2b, 0x24,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24,
	0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0xe2, 0xdf, 0x1f, 0x31, 0x0a, 0x2f, 0x28, 0x28, 0x5e, 0x7c, 0x2c,
	0x20, 0x29, 0x28, 0x7c, 0x72, 0x65, 0x66, 0x2e, 0x67, 0x69, 0x64, 0x7c, 0x72, 0x65, 0x66, 0x2e,
	0x67, 0x74, 0x79, 0x70, 0x65, 0x7c, 0x5e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x28, 0x2e, 0x2a, 0x29, 0x29, 0x29, 0x2b, 0x24, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x65, 0x65, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xa1, 0x01, 0x0a, 0x09, 0x41, 0x67, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe2, 0xdf,
	0x1f, 0x1f, 0x0a, 0x1d, 0x28, 0x28, 0x5e, 0x7c, 0x2c, 0x20, 0x29, 0x28, 0x7c, 0x5e, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x28, 0x2e, 0x2a, 0x29, 0x29, 0x29, 0x2b,
	0x24, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x07, 0x54, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f,
	0x63, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x35, 0xe2, 0xdf, 0x1f, 0x31, 0x0a, 0x2f, 0x28, 0x28, 0x5e, 0x7c, 0x2c, 0x20,
	0x29, 0x28, 0x7c, 0x72, 0x65, 0x66, 0x2e, 0x67, 0x69, 0x64, 0x7c, 0x72, 0x65, 0x66, 0x2e, 0x67,
	0x74, 0x79, 0x70, 0x65, 0x7c, 0x5e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x28, 0x2e, 0x2a, 0x29, 0x29, 0x29, 0x2b, 0x24, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x10, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x10, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70, 0x73, 0x22,
	0xc8, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32,
	0x32, 0x35, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a,
	0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x05, 0x67, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e,
	0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x0a, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e,
	0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32,
	0x32, 0x35, 0x7d, 0x24, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x40, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x12,
	0x31, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x72, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32,
	0x32, 0x35, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a,
	0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x05, 0x67, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e,
	0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x0e, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x22, 0xbd, 0x01, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a,
	0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d,
	0x24, 0x52, 0x05, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf,
	0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x2f, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x22, 0x58, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35,
	0x7d, 0x24, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x05, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x52, 0x04, 0x64,
	0x6f, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcf, 0x03, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70,
	0x65, 0x6e, 0x49, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43,
	0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6c, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x79,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x22, 0x1f, 0x0a, 0x07, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x67,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c,
	0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x05, 0x67, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e,
	0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x63, 0x0a, 0x04, 0x45, 0x64, 0x69,
	0x74, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x67,
	0x0a, 0x07, 0x45, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x0f, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2,
	0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd6, 0x01,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c,
	0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31, 0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x66, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe1, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x6f, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73,
	0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x26, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x45, 0x78,
	0x70, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xce, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xe2, 0xdf, 0x1f, 0x0c, 0x0a, 0x0a, 0x5e, 0x2e, 0x7b, 0x31,
	0x2c, 0x32, 0x32, 0x35, 0x7d, 0x24, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a, 0x1d, 0x0a, 0x09, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x46, 0x53, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x46, 0x53, 0x10, 0x01, 0x2a, 0x44, 0x0a, 0x09, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56, 0x47,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d,
	0x49, 0x4e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x44, 0x10, 0x05, 0x32, 0xbd,
	0x0f, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12,
	0x32, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12,
	0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x02, 0x4d,
	0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x44, 0x6f, 0x63, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x6f, 0x63, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f,
	0x63, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63,
	0x73, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f,
	0x63, 0x73, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x12, 0x08,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x1a, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x6f, 0x63, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x6f,
	0x63, 0x73, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x73, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x07, 0x45, 0x64, 0x69,
	0x74, 0x44, 0x6f, 0x63, 0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x1a,
	0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x08, 0x45,
	0x64, 0x69, 0x74, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x73,
	0x22, 0x00, 0x12, 0x2c, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x44, 0x6f, 0x63, 0x12, 0x08, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x44, 0x6f, 0x63, 0x12,
	0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x06, 0x48, 0x61, 0x73,
	0x44, 0x6f, 0x63, 0x12, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x1a, 0x0c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x00, 0x12, 0x29, 0x0a,
	0x0d, 0x48, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x1a, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x2c,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x66, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x11,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x1a,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x66, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x12, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a,
	0x0d, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x0e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x67, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x67, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x0f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x3a, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x08, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x6f, 0x63, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x1a, 0x50,
	0x75, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x30, 0x0a, 0x08,
	0x53, 0x65, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x08, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x6f, 0x63, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3e,
	0x0a, 0x0f, 0x53, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x07,
	0x5a, 0x05, 0x61, 0x70, 0x69, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_graphik_proto_rawDescOnce sync.Once
	file_graphik_proto_rawDescData = file_graphik_proto_rawDesc
)

func file_graphik_proto_rawDescGZIP() []byte {
	file_graphik_proto_rawDescOnce.Do(func() {
		file_graphik_proto_rawDescData = protoimpl.X.CompressGZIP(file_graphik_proto_rawDescData)
	})
	return file_graphik_proto_rawDescData
}

var file_graphik_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_graphik_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_graphik_proto_goTypes = []interface{}{
	(Algorithm)(0),                 // 0: api.Algorithm
	(Aggregate)(0),                 // 1: api.Aggregate
	(*Ref)(nil),                    // 2: api.Ref
	(*RefConstructor)(nil),         // 3: api.RefConstructor
	(*Refs)(nil),                   // 4: api.Refs
	(*Doc)(nil),                    // 5: api.Doc
	(*DocConstructor)(nil),         // 6: api.DocConstructor
	(*DocConstructors)(nil),        // 7: api.DocConstructors
	(*Traversal)(nil),              // 8: api.Traversal
	(*Traversals)(nil),             // 9: api.Traversals
	(*Docs)(nil),                   // 10: api.Docs
	(*Connection)(nil),             // 11: api.Connection
	(*ConnectionConstructor)(nil),  // 12: api.ConnectionConstructor
	(*SConnectFilter)(nil),         // 13: api.SConnectFilter
	(*ConnectionConstructors)(nil), // 14: api.ConnectionConstructors
	(*Connections)(nil),            // 15: api.Connections
	(*CFilter)(nil),                // 16: api.CFilter
	(*Filter)(nil),                 // 17: api.Filter
	(*AggFilter)(nil),              // 18: api.AggFilter
	(*TFilter)(nil),                // 19: api.TFilter
	(*IndexConstructor)(nil),       // 20: api.IndexConstructor
	(*Authorizer)(nil),             // 21: api.Authorizer
	(*Authorizers)(nil),            // 22: api.Authorizers
	(*TypeValidator)(nil),          // 23: api.TypeValidator
	(*TypeValidators)(nil),         // 24: api.TypeValidators
	(*Index)(nil),                  // 25: api.Index
	(*Indexes)(nil),                // 26: api.Indexes
	(*ChanFilter)(nil),             // 27: api.ChanFilter
	(*Graph)(nil),                  // 28: api.Graph
	(*Flags)(nil),                  // 29: api.Flags
	(*Boolean)(nil),                // 30: api.Boolean
	(*Number)(nil),                 // 31: api.Number
	(*ExistsFilter)(nil),           // 32: api.ExistsFilter
	(*Edit)(nil),                   // 33: api.Edit
	(*EFilter)(nil),                // 34: api.EFilter
	(*Pong)(nil),                   // 35: api.Pong
	(*OutboundMessage)(nil),        // 36: api.OutboundMessage
	(*Message)(nil),                // 37: api.Message
	(*Schema)(nil),                 // 38: api.Schema
	(*ExprFilter)(nil),             // 39: api.ExprFilter
	(*Request)(nil),                // 40: api.Request
	(*_struct.Struct)(nil),         // 41: google.protobuf.Struct
	(*timestamp.Timestamp)(nil),    // 42: google.protobuf.Timestamp
	(*empty.Empty)(nil),            // 43: google.protobuf.Empty
}
var file_graphik_proto_depIdxs = []int32{
	2,  // 0: api.Refs.refs:type_name -> api.Ref
	2,  // 1: api.Doc.ref:type_name -> api.Ref
	41, // 2: api.Doc.attributes:type_name -> google.protobuf.Struct
	3,  // 3: api.DocConstructor.ref:type_name -> api.RefConstructor
	41, // 4: api.DocConstructor.attributes:type_name -> google.protobuf.Struct
	6,  // 5: api.DocConstructors.docs:type_name -> api.DocConstructor
	5,  // 6: api.Traversal.doc:type_name -> api.Doc
	2,  // 7: api.Traversal.traversal_path:type_name -> api.Ref
	8,  // 8: api.Traversals.traversals:type_name -> api.Traversal
	5,  // 9: api.Docs.docs:type_name -> api.Doc
	2,  // 10: api.Connection.ref:type_name -> api.Ref
	41, // 11: api.Connection.attributes:type_name -> google.protobuf.Struct
	2,  // 12: api.Connection.from:type_name -> api.Ref
	2,  // 13: api.Connection.to:type_name -> api.Ref
	3,  // 14: api.ConnectionConstructor.ref:type_name -> api.RefConstructor
	41, // 15: api.ConnectionConstructor.attributes:type_name -> google.protobuf.Struct
	2,  // 16: api.ConnectionConstructor.from:type_name -> api.Ref
	2,  // 17: api.ConnectionConstructor.to:type_name -> api.Ref
	17, // 18: api.SConnectFilter.filter:type_name -> api.Filter
	41, // 19: api.SConnectFilter.attributes:type_name -> google.protobuf.Struct
	2,  // 20: api.SConnectFilter.from:type_name -> api.Ref
	12, // 21: api.ConnectionConstructors.connections:type_name -> api.ConnectionConstructor
	11, // 22: api.Connections.connections:type_name -> api.Connection
	2,  // 23: api.CFilter.doc_ref:type_name -> api.Ref
	17, // 24: api.AggFilter.filter:type_name -> api.Filter
	1,  // 25: api.AggFilter.aggregate:type_name -> api.Aggregate
	2,  // 26: api.TFilter.root:type_name -> api.Ref
	0,  // 27: api.TFilter.algorithm:type_name -> api.Algorithm
	21, // 28: api.Authorizers.authorizers:type_name -> api.Authorizer
	23, // 29: api.TypeValidators.validators:type_name -> api.TypeValidator
	25, // 30: api.Indexes.indexes:type_name -> api.Index
	10, // 31: api.Graph.docs:type_name -> api.Docs
	15, // 32: api.Graph.connections:type_name -> api.Connections
	2,  // 33: api.Edit.ref:type_name -> api.Ref
	41, // 34: api.Edit.attributes:type_name -> google.protobuf.Struct
	17, // 35: api.EFilter.filter:type_name -> api.Filter
	41, // 36: api.EFilter.attributes:type_name -> google.protobuf.Struct
	41, // 37: api.OutboundMessage.data:type_name -> google.protobuf.Struct
	41, // 38: api.Message.data:type_name -> google.protobuf.Struct
	2,  // 39: api.Message.sender:type_name -> api.Ref
	42, // 40: api.Message.timestamp:type_name -> google.protobuf.Timestamp
	22, // 41: api.Schema.authorizers:type_name -> api.Authorizers
	24, // 42: api.Schema.validators:type_name -> api.TypeValidators
	26, // 43: api.Schema.indexes:type_name -> api.Indexes
	5,  // 44: api.Request.user:type_name -> api.Doc
	42, // 45: api.Request.timestamp:type_name -> google.protobuf.Timestamp
	41, // 46: api.Request.request:type_name -> google.protobuf.Struct
	43, // 47: api.DatabaseService.Ping:input_type -> google.protobuf.Empty
	43, // 48: api.DatabaseService.GetSchema:input_type -> google.protobuf.Empty
	22, // 49: api.DatabaseService.SetAuthorizers:input_type -> api.Authorizers
	26, // 50: api.DatabaseService.SetIndexes:input_type -> api.Indexes
	24, // 51: api.DatabaseService.SetTypeValidators:input_type -> api.TypeValidators
	43, // 52: api.DatabaseService.Me:input_type -> google.protobuf.Empty
	6,  // 53: api.DatabaseService.CreateDoc:input_type -> api.DocConstructor
	7,  // 54: api.DatabaseService.CreateDocs:input_type -> api.DocConstructors
	2,  // 55: api.DatabaseService.GetDoc:input_type -> api.Ref
	17, // 56: api.DatabaseService.SearchDocs:input_type -> api.Filter
	19, // 57: api.DatabaseService.Traverse:input_type -> api.TFilter
	33, // 58: api.DatabaseService.EditDoc:input_type -> api.Edit
	34, // 59: api.DatabaseService.EditDocs:input_type -> api.EFilter
	2,  // 60: api.DatabaseService.DelDoc:input_type -> api.Ref
	17, // 61: api.DatabaseService.DelDocs:input_type -> api.Filter
	32, // 62: api.DatabaseService.ExistsDoc:input_type -> api.ExistsFilter
	32, // 63: api.DatabaseService.ExistsConnection:input_type -> api.ExistsFilter
	2,  // 64: api.DatabaseService.HasDoc:input_type -> api.Ref
	2,  // 65: api.DatabaseService.HasConnection:input_type -> api.Ref
	12, // 66: api.DatabaseService.CreateConnection:input_type -> api.ConnectionConstructor
	14, // 67: api.DatabaseService.CreateConnections:input_type -> api.ConnectionConstructors
	13, // 68: api.DatabaseService.SearchAndConnect:input_type -> api.SConnectFilter
	2,  // 69: api.DatabaseService.GetConnection:input_type -> api.Ref
	17, // 70: api.DatabaseService.SearchConnections:input_type -> api.Filter
	33, // 71: api.DatabaseService.EditConnection:input_type -> api.Edit
	34, // 72: api.DatabaseService.EditConnections:input_type -> api.EFilter
	2,  // 73: api.DatabaseService.DelConnection:input_type -> api.Ref
	17, // 74: api.DatabaseService.DelConnections:input_type -> api.Filter
	16, // 75: api.DatabaseService.ConnectionsFrom:input_type -> api.CFilter
	16, // 76: api.DatabaseService.ConnectionsTo:input_type -> api.CFilter
	18, // 77: api.DatabaseService.AggregateDocs:input_type -> api.AggFilter
	18, // 78: api.DatabaseService.AggregateConnections:input_type -> api.AggFilter
	36, // 79: api.DatabaseService.Publish:input_type -> api.OutboundMessage
	27, // 80: api.DatabaseService.Subscribe:input_type -> api.ChanFilter
	6,  // 81: api.DatabaseService.PushDocConstructors:input_type -> api.DocConstructor
	12, // 82: api.DatabaseService.PushConnectionConstructors:input_type -> api.ConnectionConstructor
	5,  // 83: api.DatabaseService.SeedDocs:input_type -> api.Doc
	11, // 84: api.DatabaseService.SeedConnections:input_type -> api.Connection
	35, // 85: api.DatabaseService.Ping:output_type -> api.Pong
	38, // 86: api.DatabaseService.GetSchema:output_type -> api.Schema
	43, // 87: api.DatabaseService.SetAuthorizers:output_type -> google.protobuf.Empty
	43, // 88: api.DatabaseService.SetIndexes:output_type -> google.protobuf.Empty
	43, // 89: api.DatabaseService.SetTypeValidators:output_type -> google.protobuf.Empty
	5,  // 90: api.DatabaseService.Me:output_type -> api.Doc
	5,  // 91: api.DatabaseService.CreateDoc:output_type -> api.Doc
	10, // 92: api.DatabaseService.CreateDocs:output_type -> api.Docs
	5,  // 93: api.DatabaseService.GetDoc:output_type -> api.Doc
	10, // 94: api.DatabaseService.SearchDocs:output_type -> api.Docs
	9,  // 95: api.DatabaseService.Traverse:output_type -> api.Traversals
	5,  // 96: api.DatabaseService.EditDoc:output_type -> api.Doc
	10, // 97: api.DatabaseService.EditDocs:output_type -> api.Docs
	43, // 98: api.DatabaseService.DelDoc:output_type -> google.protobuf.Empty
	43, // 99: api.DatabaseService.DelDocs:output_type -> google.protobuf.Empty
	30, // 100: api.DatabaseService.ExistsDoc:output_type -> api.Boolean
	30, // 101: api.DatabaseService.ExistsConnection:output_type -> api.Boolean
	30, // 102: api.DatabaseService.HasDoc:output_type -> api.Boolean
	30, // 103: api.DatabaseService.HasConnection:output_type -> api.Boolean
	11, // 104: api.DatabaseService.CreateConnection:output_type -> api.Connection
	15, // 105: api.DatabaseService.CreateConnections:output_type -> api.Connections
	15, // 106: api.DatabaseService.SearchAndConnect:output_type -> api.Connections
	11, // 107: api.DatabaseService.GetConnection:output_type -> api.Connection
	15, // 108: api.DatabaseService.SearchConnections:output_type -> api.Connections
	11, // 109: api.DatabaseService.EditConnection:output_type -> api.Connection
	15, // 110: api.DatabaseService.EditConnections:output_type -> api.Connections
	43, // 111: api.DatabaseService.DelConnection:output_type -> google.protobuf.Empty
	43, // 112: api.DatabaseService.DelConnections:output_type -> google.protobuf.Empty
	15, // 113: api.DatabaseService.ConnectionsFrom:output_type -> api.Connections
	15, // 114: api.DatabaseService.ConnectionsTo:output_type -> api.Connections
	31, // 115: api.DatabaseService.AggregateDocs:output_type -> api.Number
	31, // 116: api.DatabaseService.AggregateConnections:output_type -> api.Number
	43, // 117: api.DatabaseService.Publish:output_type -> google.protobuf.Empty
	37, // 118: api.DatabaseService.Subscribe:output_type -> api.Message
	5,  // 119: api.DatabaseService.PushDocConstructors:output_type -> api.Doc
	11, // 120: api.DatabaseService.PushConnectionConstructors:output_type -> api.Connection
	43, // 121: api.DatabaseService.SeedDocs:output_type -> google.protobuf.Empty
	43, // 122: api.DatabaseService.SeedConnections:output_type -> google.protobuf.Empty
	85, // [85:123] is the sub-list for method output_type
	47, // [47:85] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_graphik_proto_init() }
func file_graphik_proto_init() {
	if File_graphik_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_graphik_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefConstructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Refs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Doc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocConstructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocConstructors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traversal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traversals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Docs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionConstructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SConnectFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionConstructors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexConstructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authorizers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeValidators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indexes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChanFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Number); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExprFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_graphik_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_graphik_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_graphik_proto_goTypes,
		DependencyIndexes: file_graphik_proto_depIdxs,
		EnumInfos:         file_graphik_proto_enumTypes,
		MessageInfos:      file_graphik_proto_msgTypes,
	}.Build()
	File_graphik_proto = out.File
	file_graphik_proto_rawDesc = nil
	file_graphik_proto_goTypes = nil
	file_graphik_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DatabaseServiceClient is the client API for DatabaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseServiceClient interface {
	// Ping returns PONG if the server is health
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error)
	// GetSchema gets schema about the Graph doc & connection types
	GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Schema, error)
	SetAuthorizers(ctx context.Context, in *Authorizers, opts ...grpc.CallOption) (*empty.Empty, error)
	SetIndexes(ctx context.Context, in *Indexes, opts ...grpc.CallOption) (*empty.Empty, error)
	SetTypeValidators(ctx context.Context, in *TypeValidators, opts ...grpc.CallOption) (*empty.Empty, error)
	// Me returns a Doc of the currently logged in user
	Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Doc, error)
	// CreateDoc creates a doc in the graph
	CreateDoc(ctx context.Context, in *DocConstructor, opts ...grpc.CallOption) (*Doc, error)
	// CreateDocs creates a batch of docs in the graph
	CreateDocs(ctx context.Context, in *DocConstructors, opts ...grpc.CallOption) (*Docs, error)
	// GetDoc gets a single doc in the graph
	GetDoc(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Doc, error)
	// SearchDocs searches the graph for docs
	SearchDocs(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Docs, error)
	// Traverse executes a depth first search of the graph for docs
	Traverse(ctx context.Context, in *TFilter, opts ...grpc.CallOption) (*Traversals, error)
	// EditDoc patches/edits a docs attributes
	EditDoc(ctx context.Context, in *Edit, opts ...grpc.CallOption) (*Doc, error)
	// EditDocs patches a batch of docs attributes that pass the patch filter
	EditDocs(ctx context.Context, in *EFilter, opts ...grpc.CallOption) (*Docs, error)
	// DelDoc deletes a doc & all of it's connected connections
	DelDoc(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*empty.Empty, error)
	// DelDocs deletes a batch of docs that pass the filter
	DelDocs(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*empty.Empty, error)
	// ExistsDoc searches for a Doc and returns a Boolean indicating if it exists in the graph
	ExistsDoc(ctx context.Context, in *ExistsFilter, opts ...grpc.CallOption) (*Boolean, error)
	// ExistsConnection searches for a Connection and returns a Boolean indicating if it exists in the graph
	ExistsConnection(ctx context.Context, in *ExistsFilter, opts ...grpc.CallOption) (*Boolean, error)
	// HasDoc searches for the Doc by Ref returns a Boolean indicating if it exists in the graph
	HasDoc(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Boolean, error)
	// HasConnection searches for the Connection by Ref returns a Boolean indicating if it exists in the graph
	HasConnection(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Boolean, error)
	// CreateConnection creates an connection in the graph
	CreateConnection(ctx context.Context, in *ConnectionConstructor, opts ...grpc.CallOption) (*Connection, error)
	// CreateConnections creates a batch of connections in the graph
	CreateConnections(ctx context.Context, in *ConnectionConstructors, opts ...grpc.CallOption) (*Connections, error)
	SearchAndConnect(ctx context.Context, in *SConnectFilter, opts ...grpc.CallOption) (*Connections, error)
	// GetConnection gets a single connection in the graph
	GetConnection(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Connection, error)
	// SearchConnections searches the graph for connections
	SearchConnections(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Connections, error)
	// EditConnection patches an connections attributes
	EditConnection(ctx context.Context, in *Edit, opts ...grpc.CallOption) (*Connection, error)
	// EditConnections patches a batch of connections attributes that pass the patch filter
	EditConnections(ctx context.Context, in *EFilter, opts ...grpc.CallOption) (*Connections, error)
	// DelConnection deletes an connection from the graph
	DelConnection(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*empty.Empty, error)
	// DelConnections deletes a batch of connections that pass the filter
	DelConnections(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*empty.Empty, error)
	// ConnectionsFrom returns connections that source from the given doc ref that pass the filter
	ConnectionsFrom(ctx context.Context, in *CFilter, opts ...grpc.CallOption) (*Connections, error)
	// ConnectionsTo returns connections that point to the given doc ref that pass the filter
	ConnectionsTo(ctx context.Context, in *CFilter, opts ...grpc.CallOption) (*Connections, error)
	// AggregateDocs executes an aggregation function against the graph
	AggregateDocs(ctx context.Context, in *AggFilter, opts ...grpc.CallOption) (*Number, error)
	AggregateConnections(ctx context.Context, in *AggFilter, opts ...grpc.CallOption) (*Number, error)
	// Publish publishes a message to a pubsub channel
	Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error)
	// Subscribe subscribes to messages on a pubsub channel
	Subscribe(ctx context.Context, in *ChanFilter, opts ...grpc.CallOption) (DatabaseService_SubscribeClient, error)
	PushDocConstructors(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_PushDocConstructorsClient, error)
	PushConnectionConstructors(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_PushConnectionConstructorsClient, error)
	SeedDocs(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_SeedDocsClient, error)
	SeedConnections(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_SeedConnectionsClient, error)
}

type databaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseServiceClient(cc grpc.ClientConnInterface) DatabaseServiceClient {
	return &databaseServiceClient{cc}
}

func (c *databaseServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetSchema(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Schema, error) {
	out := new(Schema)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SetAuthorizers(ctx context.Context, in *Authorizers, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/SetAuthorizers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SetIndexes(ctx context.Context, in *Indexes, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/SetIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SetTypeValidators(ctx context.Context, in *TypeValidators, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/SetTypeValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Me(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Doc, error) {
	out := new(Doc)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/Me", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateDoc(ctx context.Context, in *DocConstructor, opts ...grpc.CallOption) (*Doc, error) {
	out := new(Doc)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/CreateDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateDocs(ctx context.Context, in *DocConstructors, opts ...grpc.CallOption) (*Docs, error) {
	out := new(Docs)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/CreateDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetDoc(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Doc, error) {
	out := new(Doc)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/GetDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SearchDocs(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Docs, error) {
	out := new(Docs)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/SearchDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Traverse(ctx context.Context, in *TFilter, opts ...grpc.CallOption) (*Traversals, error) {
	out := new(Traversals)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/Traverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) EditDoc(ctx context.Context, in *Edit, opts ...grpc.CallOption) (*Doc, error) {
	out := new(Doc)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/EditDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) EditDocs(ctx context.Context, in *EFilter, opts ...grpc.CallOption) (*Docs, error) {
	out := new(Docs)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/EditDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DelDoc(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/DelDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DelDocs(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/DelDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ExistsDoc(ctx context.Context, in *ExistsFilter, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/ExistsDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ExistsConnection(ctx context.Context, in *ExistsFilter, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/ExistsConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) HasDoc(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/HasDoc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) HasConnection(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/HasConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateConnection(ctx context.Context, in *ConnectionConstructor, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) CreateConnections(ctx context.Context, in *ConnectionConstructors, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/CreateConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SearchAndConnect(ctx context.Context, in *SConnectFilter, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/SearchAndConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) GetConnection(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) SearchConnections(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/SearchConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) EditConnection(ctx context.Context, in *Edit, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/EditConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) EditConnections(ctx context.Context, in *EFilter, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/EditConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DelConnection(ctx context.Context, in *Ref, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/DelConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) DelConnections(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/DelConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ConnectionsFrom(ctx context.Context, in *CFilter, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/ConnectionsFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) ConnectionsTo(ctx context.Context, in *CFilter, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/ConnectionsTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) AggregateDocs(ctx context.Context, in *AggFilter, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/AggregateDocs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) AggregateConnections(ctx context.Context, in *AggFilter, opts ...grpc.CallOption) (*Number, error) {
	out := new(Number)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/AggregateConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Publish(ctx context.Context, in *OutboundMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DatabaseService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseServiceClient) Subscribe(ctx context.Context, in *ChanFilter, opts ...grpc.CallOption) (DatabaseService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatabaseService_serviceDesc.Streams[0], "/api.DatabaseService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatabaseService_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type databaseServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *databaseServiceSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseServiceClient) PushDocConstructors(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_PushDocConstructorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatabaseService_serviceDesc.Streams[1], "/api.DatabaseService/PushDocConstructors", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseServicePushDocConstructorsClient{stream}
	return x, nil
}

type DatabaseService_PushDocConstructorsClient interface {
	Send(*DocConstructor) error
	Recv() (*Doc, error)
	grpc.ClientStream
}

type databaseServicePushDocConstructorsClient struct {
	grpc.ClientStream
}

func (x *databaseServicePushDocConstructorsClient) Send(m *DocConstructor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *databaseServicePushDocConstructorsClient) Recv() (*Doc, error) {
	m := new(Doc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseServiceClient) PushConnectionConstructors(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_PushConnectionConstructorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatabaseService_serviceDesc.Streams[2], "/api.DatabaseService/PushConnectionConstructors", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseServicePushConnectionConstructorsClient{stream}
	return x, nil
}

type DatabaseService_PushConnectionConstructorsClient interface {
	Send(*ConnectionConstructor) error
	Recv() (*Connection, error)
	grpc.ClientStream
}

type databaseServicePushConnectionConstructorsClient struct {
	grpc.ClientStream
}

func (x *databaseServicePushConnectionConstructorsClient) Send(m *ConnectionConstructor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *databaseServicePushConnectionConstructorsClient) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseServiceClient) SeedDocs(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_SeedDocsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatabaseService_serviceDesc.Streams[3], "/api.DatabaseService/SeedDocs", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseServiceSeedDocsClient{stream}
	return x, nil
}

type DatabaseService_SeedDocsClient interface {
	Send(*Doc) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type databaseServiceSeedDocsClient struct {
	grpc.ClientStream
}

func (x *databaseServiceSeedDocsClient) Send(m *Doc) error {
	return x.ClientStream.SendMsg(m)
}

func (x *databaseServiceSeedDocsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *databaseServiceClient) SeedConnections(ctx context.Context, opts ...grpc.CallOption) (DatabaseService_SeedConnectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatabaseService_serviceDesc.Streams[4], "/api.DatabaseService/SeedConnections", opts...)
	if err != nil {
		return nil, err
	}
	x := &databaseServiceSeedConnectionsClient{stream}
	return x, nil
}

type DatabaseService_SeedConnectionsClient interface {
	Send(*Connection) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type databaseServiceSeedConnectionsClient struct {
	grpc.ClientStream
}

func (x *databaseServiceSeedConnectionsClient) Send(m *Connection) error {
	return x.ClientStream.SendMsg(m)
}

func (x *databaseServiceSeedConnectionsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatabaseServiceServer is the server API for DatabaseService service.
type DatabaseServiceServer interface {
	// Ping returns PONG if the server is health
	Ping(context.Context, *empty.Empty) (*Pong, error)
	// GetSchema gets schema about the Graph doc & connection types
	GetSchema(context.Context, *empty.Empty) (*Schema, error)
	SetAuthorizers(context.Context, *Authorizers) (*empty.Empty, error)
	SetIndexes(context.Context, *Indexes) (*empty.Empty, error)
	SetTypeValidators(context.Context, *TypeValidators) (*empty.Empty, error)
	// Me returns a Doc of the currently logged in user
	Me(context.Context, *empty.Empty) (*Doc, error)
	// CreateDoc creates a doc in the graph
	CreateDoc(context.Context, *DocConstructor) (*Doc, error)
	// CreateDocs creates a batch of docs in the graph
	CreateDocs(context.Context, *DocConstructors) (*Docs, error)
	// GetDoc gets a single doc in the graph
	GetDoc(context.Context, *Ref) (*Doc, error)
	// SearchDocs searches the graph for docs
	SearchDocs(context.Context, *Filter) (*Docs, error)
	// Traverse executes a depth first search of the graph for docs
	Traverse(context.Context, *TFilter) (*Traversals, error)
	// EditDoc patches/edits a docs attributes
	EditDoc(context.Context, *Edit) (*Doc, error)
	// EditDocs patches a batch of docs attributes that pass the patch filter
	EditDocs(context.Context, *EFilter) (*Docs, error)
	// DelDoc deletes a doc & all of it's connected connections
	DelDoc(context.Context, *Ref) (*empty.Empty, error)
	// DelDocs deletes a batch of docs that pass the filter
	DelDocs(context.Context, *Filter) (*empty.Empty, error)
	// ExistsDoc searches for a Doc and returns a Boolean indicating if it exists in the graph
	ExistsDoc(context.Context, *ExistsFilter) (*Boolean, error)
	// ExistsConnection searches for a Connection and returns a Boolean indicating if it exists in the graph
	ExistsConnection(context.Context, *ExistsFilter) (*Boolean, error)
	// HasDoc searches for the Doc by Ref returns a Boolean indicating if it exists in the graph
	HasDoc(context.Context, *Ref) (*Boolean, error)
	// HasConnection searches for the Connection by Ref returns a Boolean indicating if it exists in the graph
	HasConnection(context.Context, *Ref) (*Boolean, error)
	// CreateConnection creates an connection in the graph
	CreateConnection(context.Context, *ConnectionConstructor) (*Connection, error)
	// CreateConnections creates a batch of connections in the graph
	CreateConnections(context.Context, *ConnectionConstructors) (*Connections, error)
	SearchAndConnect(context.Context, *SConnectFilter) (*Connections, error)
	// GetConnection gets a single connection in the graph
	GetConnection(context.Context, *Ref) (*Connection, error)
	// SearchConnections searches the graph for connections
	SearchConnections(context.Context, *Filter) (*Connections, error)
	// EditConnection patches an connections attributes
	EditConnection(context.Context, *Edit) (*Connection, error)
	// EditConnections patches a batch of connections attributes that pass the patch filter
	EditConnections(context.Context, *EFilter) (*Connections, error)
	// DelConnection deletes an connection from the graph
	DelConnection(context.Context, *Ref) (*empty.Empty, error)
	// DelConnections deletes a batch of connections that pass the filter
	DelConnections(context.Context, *Filter) (*empty.Empty, error)
	// ConnectionsFrom returns connections that source from the given doc ref that pass the filter
	ConnectionsFrom(context.Context, *CFilter) (*Connections, error)
	// ConnectionsTo returns connections that point to the given doc ref that pass the filter
	ConnectionsTo(context.Context, *CFilter) (*Connections, error)
	// AggregateDocs executes an aggregation function against the graph
	AggregateDocs(context.Context, *AggFilter) (*Number, error)
	AggregateConnections(context.Context, *AggFilter) (*Number, error)
	// Publish publishes a message to a pubsub channel
	Publish(context.Context, *OutboundMessage) (*empty.Empty, error)
	// Subscribe subscribes to messages on a pubsub channel
	Subscribe(*ChanFilter, DatabaseService_SubscribeServer) error
	PushDocConstructors(DatabaseService_PushDocConstructorsServer) error
	PushConnectionConstructors(DatabaseService_PushConnectionConstructorsServer) error
	SeedDocs(DatabaseService_SeedDocsServer) error
	SeedConnections(DatabaseService_SeedConnectionsServer) error
}

// UnimplementedDatabaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatabaseServiceServer struct {
}

func (*UnimplementedDatabaseServiceServer) Ping(context.Context, *empty.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDatabaseServiceServer) GetSchema(context.Context, *empty.Empty) (*Schema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedDatabaseServiceServer) SetAuthorizers(context.Context, *Authorizers) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthorizers not implemented")
}
func (*UnimplementedDatabaseServiceServer) SetIndexes(context.Context, *Indexes) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIndexes not implemented")
}
func (*UnimplementedDatabaseServiceServer) SetTypeValidators(context.Context, *TypeValidators) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTypeValidators not implemented")
}
func (*UnimplementedDatabaseServiceServer) Me(context.Context, *empty.Empty) (*Doc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Me not implemented")
}
func (*UnimplementedDatabaseServiceServer) CreateDoc(context.Context, *DocConstructor) (*Doc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoc not implemented")
}
func (*UnimplementedDatabaseServiceServer) CreateDocs(context.Context, *DocConstructors) (*Docs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocs not implemented")
}
func (*UnimplementedDatabaseServiceServer) GetDoc(context.Context, *Ref) (*Doc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoc not implemented")
}
func (*UnimplementedDatabaseServiceServer) SearchDocs(context.Context, *Filter) (*Docs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchDocs not implemented")
}
func (*UnimplementedDatabaseServiceServer) Traverse(context.Context, *TFilter) (*Traversals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Traverse not implemented")
}
func (*UnimplementedDatabaseServiceServer) EditDoc(context.Context, *Edit) (*Doc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDoc not implemented")
}
func (*UnimplementedDatabaseServiceServer) EditDocs(context.Context, *EFilter) (*Docs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditDocs not implemented")
}
func (*UnimplementedDatabaseServiceServer) DelDoc(context.Context, *Ref) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDoc not implemented")
}
func (*UnimplementedDatabaseServiceServer) DelDocs(context.Context, *Filter) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDocs not implemented")
}
func (*UnimplementedDatabaseServiceServer) ExistsDoc(context.Context, *ExistsFilter) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsDoc not implemented")
}
func (*UnimplementedDatabaseServiceServer) ExistsConnection(context.Context, *ExistsFilter) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistsConnection not implemented")
}
func (*UnimplementedDatabaseServiceServer) HasDoc(context.Context, *Ref) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasDoc not implemented")
}
func (*UnimplementedDatabaseServiceServer) HasConnection(context.Context, *Ref) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasConnection not implemented")
}
func (*UnimplementedDatabaseServiceServer) CreateConnection(context.Context, *ConnectionConstructor) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (*UnimplementedDatabaseServiceServer) CreateConnections(context.Context, *ConnectionConstructors) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnections not implemented")
}
func (*UnimplementedDatabaseServiceServer) SearchAndConnect(context.Context, *SConnectFilter) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAndConnect not implemented")
}
func (*UnimplementedDatabaseServiceServer) GetConnection(context.Context, *Ref) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (*UnimplementedDatabaseServiceServer) SearchConnections(context.Context, *Filter) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConnections not implemented")
}
func (*UnimplementedDatabaseServiceServer) EditConnection(context.Context, *Edit) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditConnection not implemented")
}
func (*UnimplementedDatabaseServiceServer) EditConnections(context.Context, *EFilter) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditConnections not implemented")
}
func (*UnimplementedDatabaseServiceServer) DelConnection(context.Context, *Ref) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConnection not implemented")
}
func (*UnimplementedDatabaseServiceServer) DelConnections(context.Context, *Filter) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelConnections not implemented")
}
func (*UnimplementedDatabaseServiceServer) ConnectionsFrom(context.Context, *CFilter) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionsFrom not implemented")
}
func (*UnimplementedDatabaseServiceServer) ConnectionsTo(context.Context, *CFilter) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectionsTo not implemented")
}
func (*UnimplementedDatabaseServiceServer) AggregateDocs(context.Context, *AggFilter) (*Number, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateDocs not implemented")
}
func (*UnimplementedDatabaseServiceServer) AggregateConnections(context.Context, *AggFilter) (*Number, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateConnections not implemented")
}
func (*UnimplementedDatabaseServiceServer) Publish(context.Context, *OutboundMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedDatabaseServiceServer) Subscribe(*ChanFilter, DatabaseService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedDatabaseServiceServer) PushDocConstructors(DatabaseService_PushDocConstructorsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushDocConstructors not implemented")
}
func (*UnimplementedDatabaseServiceServer) PushConnectionConstructors(DatabaseService_PushConnectionConstructorsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushConnectionConstructors not implemented")
}
func (*UnimplementedDatabaseServiceServer) SeedDocs(DatabaseService_SeedDocsServer) error {
	return status.Errorf(codes.Unimplemented, "method SeedDocs not implemented")
}
func (*UnimplementedDatabaseServiceServer) SeedConnections(DatabaseService_SeedConnectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SeedConnections not implemented")
}

func RegisterDatabaseServiceServer(s *grpc.Server, srv DatabaseServiceServer) {
	s.RegisterService(&_DatabaseService_serviceDesc, srv)
}

func _DatabaseService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetSchema(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SetAuthorizers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authorizers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SetAuthorizers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/SetAuthorizers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SetAuthorizers(ctx, req.(*Authorizers))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SetIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Indexes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SetIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/SetIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SetIndexes(ctx, req.(*Indexes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SetTypeValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeValidators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SetTypeValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/SetTypeValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SetTypeValidators(ctx, req.(*TypeValidators))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Me(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocConstructor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/CreateDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateDoc(ctx, req.(*DocConstructor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocConstructors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/CreateDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateDocs(ctx, req.(*DocConstructors))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/GetDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetDoc(ctx, req.(*Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SearchDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SearchDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/SearchDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SearchDocs(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Traverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Traverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/Traverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Traverse(ctx, req.(*TFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_EditDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).EditDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/EditDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).EditDoc(ctx, req.(*Edit))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_EditDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).EditDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/EditDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).EditDocs(ctx, req.(*EFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DelDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DelDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/DelDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DelDoc(ctx, req.(*Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DelDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DelDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/DelDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DelDocs(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ExistsDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ExistsDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/ExistsDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ExistsDoc(ctx, req.(*ExistsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ExistsConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ExistsConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/ExistsConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ExistsConnection(ctx, req.(*ExistsFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_HasDoc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).HasDoc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/HasDoc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).HasDoc(ctx, req.(*Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_HasConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).HasConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/HasConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).HasConnection(ctx, req.(*Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionConstructor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateConnection(ctx, req.(*ConnectionConstructor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_CreateConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionConstructors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).CreateConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/CreateConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).CreateConnections(ctx, req.(*ConnectionConstructors))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SearchAndConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SConnectFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SearchAndConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/SearchAndConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SearchAndConnect(ctx, req.(*SConnectFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).GetConnection(ctx, req.(*Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_SearchConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).SearchConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/SearchConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).SearchConnections(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_EditConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).EditConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/EditConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).EditConnection(ctx, req.(*Edit))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_EditConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).EditConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/EditConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).EditConnections(ctx, req.(*EFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DelConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ref)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DelConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/DelConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DelConnection(ctx, req.(*Ref))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_DelConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).DelConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/DelConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).DelConnections(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ConnectionsFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ConnectionsFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/ConnectionsFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ConnectionsFrom(ctx, req.(*CFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_ConnectionsTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).ConnectionsTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/ConnectionsTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).ConnectionsTo(ctx, req.(*CFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_AggregateDocs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).AggregateDocs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/AggregateDocs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).AggregateDocs(ctx, req.(*AggFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_AggregateConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).AggregateConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/AggregateConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).AggregateConnections(ctx, req.(*AggFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutboundMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DatabaseService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServiceServer).Publish(ctx, req.(*OutboundMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChanFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatabaseServiceServer).Subscribe(m, &databaseServiceSubscribeServer{stream})
}

type DatabaseService_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type databaseServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *databaseServiceSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _DatabaseService_PushDocConstructors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatabaseServiceServer).PushDocConstructors(&databaseServicePushDocConstructorsServer{stream})
}

type DatabaseService_PushDocConstructorsServer interface {
	Send(*Doc) error
	Recv() (*DocConstructor, error)
	grpc.ServerStream
}

type databaseServicePushDocConstructorsServer struct {
	grpc.ServerStream
}

func (x *databaseServicePushDocConstructorsServer) Send(m *Doc) error {
	return x.ServerStream.SendMsg(m)
}

func (x *databaseServicePushDocConstructorsServer) Recv() (*DocConstructor, error) {
	m := new(DocConstructor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DatabaseService_PushConnectionConstructors_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatabaseServiceServer).PushConnectionConstructors(&databaseServicePushConnectionConstructorsServer{stream})
}

type DatabaseService_PushConnectionConstructorsServer interface {
	Send(*Connection) error
	Recv() (*ConnectionConstructor, error)
	grpc.ServerStream
}

type databaseServicePushConnectionConstructorsServer struct {
	grpc.ServerStream
}

func (x *databaseServicePushConnectionConstructorsServer) Send(m *Connection) error {
	return x.ServerStream.SendMsg(m)
}

func (x *databaseServicePushConnectionConstructorsServer) Recv() (*ConnectionConstructor, error) {
	m := new(ConnectionConstructor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DatabaseService_SeedDocs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatabaseServiceServer).SeedDocs(&databaseServiceSeedDocsServer{stream})
}

type DatabaseService_SeedDocsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Doc, error)
	grpc.ServerStream
}

type databaseServiceSeedDocsServer struct {
	grpc.ServerStream
}

func (x *databaseServiceSeedDocsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *databaseServiceSeedDocsServer) Recv() (*Doc, error) {
	m := new(Doc)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DatabaseService_SeedConnections_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatabaseServiceServer).SeedConnections(&databaseServiceSeedConnectionsServer{stream})
}

type DatabaseService_SeedConnectionsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Connection, error)
	grpc.ServerStream
}

type databaseServiceSeedConnectionsServer struct {
	grpc.ServerStream
}

func (x *databaseServiceSeedConnectionsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *databaseServiceSeedConnectionsServer) Recv() (*Connection, error) {
	m := new(Connection)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DatabaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DatabaseService",
	HandlerType: (*DatabaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DatabaseService_Ping_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _DatabaseService_GetSchema_Handler,
		},
		{
			MethodName: "SetAuthorizers",
			Handler:    _DatabaseService_SetAuthorizers_Handler,
		},
		{
			MethodName: "SetIndexes",
			Handler:    _DatabaseService_SetIndexes_Handler,
		},
		{
			MethodName: "SetTypeValidators",
			Handler:    _DatabaseService_SetTypeValidators_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _DatabaseService_Me_Handler,
		},
		{
			MethodName: "CreateDoc",
			Handler:    _DatabaseService_CreateDoc_Handler,
		},
		{
			MethodName: "CreateDocs",
			Handler:    _DatabaseService_CreateDocs_Handler,
		},
		{
			MethodName: "GetDoc",
			Handler:    _DatabaseService_GetDoc_Handler,
		},
		{
			MethodName: "SearchDocs",
			Handler:    _DatabaseService_SearchDocs_Handler,
		},
		{
			MethodName: "Traverse",
			Handler:    _DatabaseService_Traverse_Handler,
		},
		{
			MethodName: "EditDoc",
			Handler:    _DatabaseService_EditDoc_Handler,
		},
		{
			MethodName: "EditDocs",
			Handler:    _DatabaseService_EditDocs_Handler,
		},
		{
			MethodName: "DelDoc",
			Handler:    _DatabaseService_DelDoc_Handler,
		},
		{
			MethodName: "DelDocs",
			Handler:    _DatabaseService_DelDocs_Handler,
		},
		{
			MethodName: "ExistsDoc",
			Handler:    _DatabaseService_ExistsDoc_Handler,
		},
		{
			MethodName: "ExistsConnection",
			Handler:    _DatabaseService_ExistsConnection_Handler,
		},
		{
			MethodName: "HasDoc",
			Handler:    _DatabaseService_HasDoc_Handler,
		},
		{
			MethodName: "HasConnection",
			Handler:    _DatabaseService_HasConnection_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _DatabaseService_CreateConnection_Handler,
		},
		{
			MethodName: "CreateConnections",
			Handler:    _DatabaseService_CreateConnections_Handler,
		},
		{
			MethodName: "SearchAndConnect",
			Handler:    _DatabaseService_SearchAndConnect_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _DatabaseService_GetConnection_Handler,
		},
		{
			MethodName: "SearchConnections",
			Handler:    _DatabaseService_SearchConnections_Handler,
		},
		{
			MethodName: "EditConnection",
			Handler:    _DatabaseService_EditConnection_Handler,
		},
		{
			MethodName: "EditConnections",
			Handler:    _DatabaseService_EditConnections_Handler,
		},
		{
			MethodName: "DelConnection",
			Handler:    _DatabaseService_DelConnection_Handler,
		},
		{
			MethodName: "DelConnections",
			Handler:    _DatabaseService_DelConnections_Handler,
		},
		{
			MethodName: "ConnectionsFrom",
			Handler:    _DatabaseService_ConnectionsFrom_Handler,
		},
		{
			MethodName: "ConnectionsTo",
			Handler:    _DatabaseService_ConnectionsTo_Handler,
		},
		{
			MethodName: "AggregateDocs",
			Handler:    _DatabaseService_AggregateDocs_Handler,
		},
		{
			MethodName: "AggregateConnections",
			Handler:    _DatabaseService_AggregateConnections_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _DatabaseService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _DatabaseService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushDocConstructors",
			Handler:       _DatabaseService_PushDocConstructors_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PushConnectionConstructors",
			Handler:       _DatabaseService_PushConnectionConstructors_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SeedDocs",
			Handler:       _DatabaseService_SeedDocs_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SeedConnections",
			Handler:       _DatabaseService_SeedConnections_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "graphik.proto",
}
