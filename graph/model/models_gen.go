// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Object interface {
	IsObject()
}

type Counter struct {
	Count int `json:"count"`
}

type Edge struct {
	ID         string                 `json:"id"`
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
	From       *Node                  `json:"from"`
	To         *Node                  `json:"to"`
	Mutual     *bool                  `json:"mutual"`
	CreatedAt  time.Time              `json:"createdAt"`
	UpdatedAt  *time.Time             `json:"updatedAt"`
}

func (Edge) IsObject() {}

type EdgeConstructor struct {
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
	From       *ForeignKey            `json:"from"`
	To         *ForeignKey            `json:"to"`
	Mutual     *bool                  `json:"mutual"`
}

type Export struct {
	Nodes []*Node `json:"nodes"`
	Edges []*Edge `json:"edges"`
}

type Expression struct {
	Key      string      `json:"key"`
	Operator Operator    `json:"operator"`
	Value    interface{} `json:"value"`
}

type Filter struct {
	Type        string        `json:"type"`
	Expressions []*Expression `json:"expressions"`
	Limit       int           `json:"limit"`
}

type ForeignKey struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

type Node struct {
	ID         string                 `json:"id"`
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
	Edges      []*Edge                `json:"edges"`
	CreatedAt  time.Time              `json:"createdAt"`
	UpdatedAt  *time.Time             `json:"updatedAt"`
}

func (Node) IsObject() {}

type NodeConstructor struct {
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
}

type Patch struct {
	Type  string                 `json:"type"`
	ID    string                 `json:"id"`
	Patch map[string]interface{} `json:"patch"`
}

type Result struct {
	ID   string      `json:"id"`
	Type string      `json:"type"`
	Val  interface{} `json:"val"`
}

type Results struct {
	Search  string    `json:"search"`
	Results []*Result `json:"results"`
}

type Search struct {
	Search string `json:"search"`
	Type   string `json:"type"`
}

type Operator string

const (
	OperatorNeq Operator = "NEQ"
	OperatorEq  Operator = "EQ"
)

var AllOperator = []Operator{
	OperatorNeq,
	OperatorEq,
}

func (e Operator) IsValid() bool {
	switch e {
	case OperatorNeq, OperatorEq:
		return true
	}
	return false
}

func (e Operator) String() string {
	return string(e)
}

func (e *Operator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Operator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Operator", str)
	}
	return nil
}

func (e Operator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
