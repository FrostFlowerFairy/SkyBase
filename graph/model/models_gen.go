// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"
)

type Object interface {
	IsObject()
}

type Counter struct {
	Count int `json:"count"`
}

type Edge struct {
	ID         string                 `json:"id"`
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
	From       *Node                  `json:"from"`
	To         *Node                  `json:"to"`
	Mutual     *bool                  `json:"mutual"`
	CreatedAt  time.Time              `json:"createdAt"`
	UpdatedAt  *time.Time             `json:"updatedAt"`
}

func (Edge) IsObject() {}

type EdgeConstructor struct {
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
	From       *ForeignKey            `json:"from"`
	To         *ForeignKey            `json:"to"`
	Mutual     *bool                  `json:"mutual"`
}

type EdgeFilter struct {
	Type        string        `json:"type"`
	Expressions []*Expression `json:"expressions"`
	Limit       int           `json:"limit"`
}

type Export struct {
	Nodes []*Node `json:"nodes"`
	Edges []*Edge `json:"edges"`
}

type Expression struct {
	Key      string      `json:"key"`
	Operator string      `json:"operator"`
	Value    interface{} `json:"value"`
}

type ForeignKey struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

type Node struct {
	ID         string                 `json:"id"`
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
	Edges      []*Edge                `json:"edges"`
	CreatedAt  time.Time              `json:"createdAt"`
	UpdatedAt  *time.Time             `json:"updatedAt"`
}

func (Node) IsObject() {}

type NodeConstructor struct {
	Type       string                 `json:"type"`
	Attributes map[string]interface{} `json:"attributes"`
}

type NodeFilter struct {
	Type        string        `json:"type"`
	Expressions []*Expression `json:"expressions"`
	Limit       int           `json:"limit"`
}

type Patch struct {
	Type  string                 `json:"type"`
	ID    string                 `json:"id"`
	Patch map[string]interface{} `json:"patch"`
}
